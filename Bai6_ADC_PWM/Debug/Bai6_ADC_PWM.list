
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000309c  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c944  0800c944  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c944  0800c944  0001c944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c94c  0800c94c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c94c  0800c94c  0001c94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c950  0800c950  0001c950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000003d0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f58d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004504  00000000  00000000  0003f63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  00043b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  00045248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026760  00000000  00000000  00046768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fdbf  00000000  00000000  0006cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e00a0  00000000  00000000  0008cc87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016cd27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006290  00000000  00000000  0016cd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009890 	.word	0x08009890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009890 	.word	0x08009890

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_ADC1_Init+0x108>)
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <MX_ADC1_Init+0x10c>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_ADC1_Init+0x108>)
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <MX_ADC1_Init+0x110>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e02:	482a      	ldr	r0, [pc, #168]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e04:	f002 fafa 	bl	80033fc <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f001 fcef 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e12:	2308      	movs	r3, #8
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e24:	f002 fc5c 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f001 fcdf 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e32:	2309      	movs	r3, #9
 8000e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e40:	f002 fc4e 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e4a:	f001 fcd1 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e5c:	f002 fc40 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e66:	f001 fcc3 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e78:	f002 fc32 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e82:	f001 fcb5 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e86:	230c      	movs	r3, #12
 8000e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e94:	f002 fc24 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e9e:	f001 fca7 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000e8 	.word	0x200000e8
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	0f000001 	.word	0x0f000001

08000eb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <HAL_ADC_MspInit+0x110>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d171      	bne.n	8000fbe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a33      	ldr	r2, [pc, #204]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <HAL_ADC_MspInit+0x118>)
 8000f42:	f003 fb81 	bl	8004648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f46:	2303      	movs	r3, #3
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0x11c>)
 8000f5a:	f003 fb75 	bl	8004648 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x124>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fa4:	f002 ff4e 	bl	8003e44 <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fae:	f001 fc1f 	bl	80027f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000130 	.word	0x20000130
 8000fdc:	40026410 	.word	0x40026410

08000fe0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <button_init+0x14>)
 8000fea:	f003 fcc9 	bl	8004980 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <button_Scan>:

void button_Scan(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <button_Scan+0xc8>)
 8001004:	f003 fcbc 	bl	8004980 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	482c      	ldr	r0, [pc, #176]	; (80010c0 <button_Scan+0xc8>)
 800100e:	f003 fcb7 	bl	8004980 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001012:	230a      	movs	r3, #10
 8001014:	2202      	movs	r2, #2
 8001016:	492b      	ldr	r1, [pc, #172]	; (80010c4 <button_Scan+0xcc>)
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <button_Scan+0xd0>)
 800101a:	f005 fade 	bl	80065da <HAL_SPI_Receive>
	  int button_index = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e03f      	b.n	80010ae <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db06      	blt.n	8001042 <button_Scan+0x4a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	dc03      	bgt.n	8001042 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e018      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dd07      	ble.n	8001058 <button_Scan+0x60>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b07      	cmp	r3, #7
 800104c:	dc04      	bgt.n	8001058 <button_Scan+0x60>
			  button_index = 7 - i;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f1c3 0307 	rsb	r3, r3, #7
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e00d      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b07      	cmp	r3, #7
 800105c:	dd06      	ble.n	800106c <button_Scan+0x74>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	dc03      	bgt.n	800106c <button_Scan+0x74>
			  button_index = i + 4;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3304      	adds	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e003      	b.n	8001074 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1c3 0317 	rsb	r3, r3, #23
 8001072:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <button_Scan+0xcc>)
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	4013      	ands	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <button_Scan+0x96>
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <button_Scan+0xd4>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2100      	movs	r1, #0
 8001088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800108c:	e009      	b.n	80010a2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <button_Scan+0xd4>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	3301      	adds	r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <button_Scan+0xd4>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80010a2:	897b      	ldrh	r3, [r7, #10]
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	ddbc      	ble.n	800102e <button_Scan+0x36>
	  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	2000009c 	.word	0x2000009c
 80010c8:	200002ac 	.word	0x200002ac
 80010cc:	20000190 	.word	0x20000190

080010d0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <buzzer_init+0x10>)
 80010d8:	f005 ffc0 	bl	800705c <HAL_TIM_PWM_Start>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000304 	.word	0x20000304

080010e4 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <buzzer_SetVolume+0x28>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <buzzer_SetVolume+0x28>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <buzzer_SetVolume+0x2c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2000009e 	.word	0x2000009e
 8001110:	20000304 	.word	0x20000304

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x3c>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2038      	movs	r0, #56	; 0x38
 800113c:	f002 fe4b 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001140:	2038      	movs	r0, #56	; 0x38
 8001142:	f002 fe64 	bl	8003e0e <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8001158:	201e      	movs	r0, #30
 800115a:	f002 f86b 	bl	8003234 <DEC2BCD>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <ds3231_init+0x6c>)
 8001164:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001166:	2016      	movs	r0, #22
 8001168:	f002 f864 	bl	8003234 <DEC2BCD>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <ds3231_init+0x6c>)
 8001172:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001174:	2015      	movs	r0, #21
 8001176:	f002 f85d 	bl	8003234 <DEC2BCD>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <ds3231_init+0x6c>)
 8001180:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8001182:	2006      	movs	r0, #6
 8001184:	f002 f856 	bl	8003234 <DEC2BCD>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <ds3231_init+0x6c>)
 800118e:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8001190:	200f      	movs	r0, #15
 8001192:	f002 f84f 	bl	8003234 <DEC2BCD>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <ds3231_init+0x6c>)
 800119c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800119e:	2009      	movs	r0, #9
 80011a0:	f002 f848 	bl	8003234 <DEC2BCD>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <ds3231_init+0x6c>)
 80011aa:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80011ac:	2017      	movs	r0, #23
 80011ae:	f002 f841 	bl	8003234 <DEC2BCD>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b02      	ldr	r3, [pc, #8]	; (80011c0 <ds3231_init+0x6c>)
 80011b8:	719a      	strb	r2, [r3, #6]
//	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
//		while(1);
//	};
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200001b8 	.word	0x200001b8

080011c4 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 f82c 	bl	8003234 <DEC2BCD>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	230a      	movs	r3, #10
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2301      	movs	r3, #1
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	f107 030f 	add.w	r3, r7, #15
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	21d0      	movs	r1, #208	; 0xd0
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <ds3231_Write+0x40>)
 80011f8:	f003 fd3a 	bl	8004c70 <HAL_I2C_Mem_Write>
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000210 	.word	0x20000210

08001208 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800120e:	230a      	movs	r3, #10
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2307      	movs	r3, #7
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <ds3231_ReadTime+0xa4>)
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	2200      	movs	r2, #0
 800121e:	21d0      	movs	r1, #208	; 0xd0
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <ds3231_ReadTime+0xa8>)
 8001222:	f003 fe1f 	bl	8004e64 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <ds3231_ReadTime+0xa4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f001 ffe8 	bl	8003200 <BCD2DEC>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <ds3231_ReadTime+0xac>)
 8001236:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <ds3231_ReadTime+0xa4>)
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	4618      	mov	r0, r3
 800123e:	f001 ffdf 	bl	8003200 <BCD2DEC>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <ds3231_ReadTime+0xb0>)
 8001248:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <ds3231_ReadTime+0xa4>)
 800124c:	789b      	ldrb	r3, [r3, #2]
 800124e:	4618      	mov	r0, r3
 8001250:	f001 ffd6 	bl	8003200 <BCD2DEC>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <ds3231_ReadTime+0xb4>)
 800125a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <ds3231_ReadTime+0xa4>)
 800125e:	78db      	ldrb	r3, [r3, #3]
 8001260:	4618      	mov	r0, r3
 8001262:	f001 ffcd 	bl	8003200 <BCD2DEC>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <ds3231_ReadTime+0xb8>)
 800126c:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <ds3231_ReadTime+0xa4>)
 8001270:	791b      	ldrb	r3, [r3, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	f001 ffc4 	bl	8003200 <BCD2DEC>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <ds3231_ReadTime+0xbc>)
 800127e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <ds3231_ReadTime+0xa4>)
 8001282:	795b      	ldrb	r3, [r3, #5]
 8001284:	4618      	mov	r0, r3
 8001286:	f001 ffbb 	bl	8003200 <BCD2DEC>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <ds3231_ReadTime+0xc0>)
 8001290:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <ds3231_ReadTime+0xa4>)
 8001294:	799b      	ldrb	r3, [r3, #6]
 8001296:	4618      	mov	r0, r3
 8001298:	f001 ffb2 	bl	8003200 <BCD2DEC>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <ds3231_ReadTime+0xc4>)
 80012a2:	701a      	strb	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001b8 	.word	0x200001b8
 80012b0:	20000210 	.word	0x20000210
 80012b4:	200001b0 	.word	0x200001b0
 80012b8:	200001b2 	.word	0x200001b2
 80012bc:	200001b5 	.word	0x200001b5
 80012c0:	200001b4 	.word	0x200001b4
 80012c4:	200001b3 	.word	0x200001b3
 80012c8:	200001b6 	.word	0x200001b6
 80012cc:	200001b1 	.word	0x200001b1

080012d0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <MX_FSMC_Init+0xec>)
 80012fe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001302:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <MX_FSMC_Init+0xec>)
 8001306:	4a2e      	ldr	r2, [pc, #184]	; (80013c0 <MX_FSMC_Init+0xf0>)
 8001308:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_FSMC_Init+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <MX_FSMC_Init+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_FSMC_Init+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <MX_FSMC_Init+0xec>)
 800131e:	2210      	movs	r2, #16
 8001320:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <MX_FSMC_Init+0xec>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <MX_FSMC_Init+0xec>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_FSMC_Init+0xec>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_FSMC_Init+0xec>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_FSMC_Init+0xec>)
 800133c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_FSMC_Init+0xec>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_FSMC_Init+0xec>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_FSMC_Init+0xec>)
 8001352:	2200      	movs	r2, #0
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_FSMC_Init+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_FSMC_Init+0xec>)
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001362:	230f      	movs	r3, #15
 8001364:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001366:	230f      	movs	r3, #15
 8001368:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800136a:	233c      	movs	r3, #60	; 0x3c
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001372:	2310      	movs	r3, #16
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001376:	2311      	movs	r3, #17
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800137e:	2308      	movs	r3, #8
 8001380:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001382:	230f      	movs	r3, #15
 8001384:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001386:	2309      	movs	r3, #9
 8001388:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800138e:	2310      	movs	r3, #16
 8001390:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001392:	2311      	movs	r3, #17
 8001394:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800139a:	463a      	mov	r2, r7
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_FSMC_Init+0xec>)
 80013a4:	f005 fcfc 	bl	8006da0 <HAL_SRAM_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80013ae:	f001 fa1f 	bl	80027f0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013b2:	bf00      	nop
 80013b4:	3738      	adds	r7, #56	; 0x38
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001c0 	.word	0x200001c0
 80013c0:	a0000104 	.word	0xa0000104

080013c4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_FSMC_MspInit+0x88>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d131      	bne.n	8001444 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_FSMC_MspInit+0x88>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_FSMC_MspInit+0x8c>)
 80013ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ee:	4a18      	ldr	r2, [pc, #96]	; (8001450 <HAL_FSMC_MspInit+0x8c>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6393      	str	r3, [r2, #56]	; 0x38
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_FSMC_MspInit+0x8c>)
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001402:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001406:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001414:	230c      	movs	r3, #12
 8001416:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <HAL_FSMC_MspInit+0x90>)
 800141e:	f003 f913 	bl	8004648 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001422:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001426:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001434:	230c      	movs	r3, #12
 8001436:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <HAL_FSMC_MspInit+0x94>)
 800143e:	f003 f903 	bl	8004648 <HAL_GPIO_Init>
 8001442:	e000      	b.n	8001446 <HAL_FSMC_MspInit+0x82>
    return;
 8001444:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200000a0 	.word	0x200000a0
 8001450:	40023800 	.word	0x40023800
 8001454:	40021000 	.word	0x40021000
 8001458:	40020c00 	.word	0x40020c00

0800145c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001464:	f7ff ffae 	bl	80013c4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <MX_GPIO_Init+0x1f4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a75      	ldr	r2, [pc, #468]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b73      	ldr	r3, [pc, #460]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	623b      	str	r3, [r7, #32]
 80014a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a6e      	ldr	r2, [pc, #440]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b6c      	ldr	r3, [pc, #432]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	4b68      	ldr	r3, [pc, #416]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a67      	ldr	r2, [pc, #412]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b65      	ldr	r3, [pc, #404]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4b61      	ldr	r3, [pc, #388]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a60      	ldr	r2, [pc, #384]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b5a      	ldr	r3, [pc, #360]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a59      	ldr	r2, [pc, #356]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b57      	ldr	r3, [pc, #348]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b53      	ldr	r3, [pc, #332]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <MX_GPIO_Init+0x1f4>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b50      	ldr	r3, [pc, #320]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a4b      	ldr	r2, [pc, #300]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a44      	ldr	r2, [pc, #272]	; (8001664 <MX_GPIO_Init+0x1f4>)
 8001554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b42      	ldr	r3, [pc, #264]	; (8001664 <MX_GPIO_Init+0x1f4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2170      	movs	r1, #112	; 0x70
 800156a:	483f      	ldr	r0, [pc, #252]	; (8001668 <MX_GPIO_Init+0x1f8>)
 800156c:	f003 fa08 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001576:	483d      	ldr	r0, [pc, #244]	; (800166c <MX_GPIO_Init+0x1fc>)
 8001578:	f003 fa02 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	483b      	ldr	r0, [pc, #236]	; (8001670 <MX_GPIO_Init+0x200>)
 8001582:	f003 f9fd 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158c:	4839      	ldr	r0, [pc, #228]	; (8001674 <MX_GPIO_Init+0x204>)
 800158e:	f003 f9f7 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2108      	movs	r1, #8
 8001596:	4838      	ldr	r0, [pc, #224]	; (8001678 <MX_GPIO_Init+0x208>)
 8001598:	f003 f9f2 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800159c:	2370      	movs	r3, #112	; 0x70
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	482d      	ldr	r0, [pc, #180]	; (8001668 <MX_GPIO_Init+0x1f8>)
 80015b4:	f003 f848 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80015b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	4826      	ldr	r0, [pc, #152]	; (800166c <MX_GPIO_Init+0x1fc>)
 80015d2:	f003 f839 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4822      	ldr	r0, [pc, #136]	; (8001674 <MX_GPIO_Init+0x204>)
 80015ea:	f003 f82d 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80015ee:	2330      	movs	r3, #48	; 0x30
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	481a      	ldr	r0, [pc, #104]	; (800166c <MX_GPIO_Init+0x1fc>)
 8001602:	f003 f821 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	4814      	ldr	r0, [pc, #80]	; (8001670 <MX_GPIO_Init+0x200>)
 800161e:	f003 f813 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <MX_GPIO_Init+0x204>)
 800163c:	f003 f804 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001640:	2308      	movs	r3, #8
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_GPIO_Init+0x208>)
 8001658:	f002 fff6 	bl	8004648 <HAL_GPIO_Init>

}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	40021000 	.word	0x40021000
 800166c:	40020800 	.word	0x40020800
 8001670:	40021800 	.word	0x40021800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020c00 	.word	0x40020c00

0800167c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_I2C1_Init+0x50>)
 8001682:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <MX_I2C1_Init+0x54>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_I2C1_Init+0x50>)
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_I2C1_Init+0x58>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_I2C1_Init+0x50>)
 800169a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800169e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_I2C1_Init+0x50>)
 80016ba:	f003 f995 	bl	80049e8 <HAL_I2C_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016c4:	f001 f894 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000210 	.word	0x20000210
 80016d0:	40005400 	.word	0x40005400
 80016d4:	000186a0 	.word	0x000186a0

080016d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_I2C_MspInit+0x84>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12b      	bne.n	8001752 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_I2C_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001716:	23c0      	movs	r3, #192	; 0xc0
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171a:	2312      	movs	r3, #18
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001726:	2304      	movs	r3, #4
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <HAL_I2C_MspInit+0x8c>)
 8001732:	f002 ff89 	bl	8004648 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_I2C_MspInit+0x88>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40005400 	.word	0x40005400
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400

08001768 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <LCD_WR_REG+0x1c>)
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	8013      	strh	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	600ffffe 	.word	0x600ffffe

08001788 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <LCD_WR_DATA+0x1c>)
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	8053      	strh	r3, [r2, #2]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	600ffffe 	.word	0x600ffffe

080017a8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <LCD_RD_DATA+0x20>)
 80017b0:	885b      	ldrh	r3, [r3, #2]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	b29b      	uxth	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	600ffffe 	.word	0x600ffffe

080017cc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80017ea:	202a      	movs	r0, #42	; 0x2a
 80017ec:	f7ff ffbc 	bl	8001768 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ffc6 	bl	8001788 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ffc0 	bl	8001788 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffba 	bl	8001788 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	b29b      	uxth	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ffb4 	bl	8001788 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001820:	202b      	movs	r0, #43	; 0x2b
 8001822:	f7ff ffa1 	bl	8001768 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	b29b      	uxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ffab 	bl	8001788 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	b29b      	uxth	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ffa5 	bl	8001788 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800183e:	883b      	ldrh	r3, [r7, #0]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff9f 	bl	8001788 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800184a:	883b      	ldrh	r3, [r7, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff99 	bl	8001788 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001856:	202c      	movs	r0, #44	; 0x2c
 8001858:	f7ff ff86 	bl	8001768 <LCD_WR_REG>
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}

08001864 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <lcd_Clear+0x60>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <lcd_Clear+0x60>)
 8001878:	885b      	ldrh	r3, [r3, #2]
 800187a:	3b01      	subs	r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	2100      	movs	r1, #0
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff ffa3 	bl	80017cc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001886:	2300      	movs	r3, #0
 8001888:	81fb      	strh	r3, [r7, #14]
 800188a:	e011      	b.n	80018b0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800188c:	2300      	movs	r3, #0
 800188e:	81bb      	strh	r3, [r7, #12]
 8001890:	e006      	b.n	80018a0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff77 	bl	8001788 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	3301      	adds	r3, #1
 800189e:	81bb      	strh	r3, [r7, #12]
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <lcd_Clear+0x60>)
 80018a2:	885b      	ldrh	r3, [r3, #2]
 80018a4:	89ba      	ldrh	r2, [r7, #12]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d3f3      	bcc.n	8001892 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	3301      	adds	r3, #1
 80018ae:	81fb      	strh	r3, [r7, #14]
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <lcd_Clear+0x60>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	89fa      	ldrh	r2, [r7, #14]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3e8      	bcc.n	800188c <lcd_Clear+0x28>
		}
	}
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000264 	.word	0x20000264

080018c8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
 80018d2:	460b      	mov	r3, r1
 80018d4:	80bb      	strh	r3, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018da:	88bb      	ldrh	r3, [r7, #4]
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	88b9      	ldrh	r1, [r7, #4]
 80018e0:	88f8      	ldrh	r0, [r7, #6]
 80018e2:	f7ff ff73 	bl	80017cc <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff4d 	bl	8001788 <LCD_WR_DATA>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4604      	mov	r4, r0
 8001900:	4608      	mov	r0, r1
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4623      	mov	r3, r4
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	4603      	mov	r3, r0
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	70fb      	strb	r3, [r7, #3]
 8001912:	4613      	mov	r3, r2
 8001914:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001916:	2300      	movs	r3, #0
 8001918:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800191e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4413      	add	r3, r2
 8001942:	b29a      	uxth	r2, r3
 8001944:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001948:	b29b      	uxth	r3, r3
 800194a:	fb12 f303 	smulbb	r3, r2, r3
 800194e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	3b20      	subs	r3, #32
 8001954:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	b29a      	uxth	r2, r3
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29c      	uxth	r4, r3
 8001964:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001968:	b29a      	uxth	r2, r3
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	3b01      	subs	r3, #1
 8001972:	b29b      	uxth	r3, r3
 8001974:	88b9      	ldrh	r1, [r7, #4]
 8001976:	88f8      	ldrh	r0, [r7, #6]
 8001978:	4622      	mov	r2, r4
 800197a:	f7ff ff27 	bl	80017cc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800197e:	2300      	movs	r3, #0
 8001980:	827b      	strh	r3, [r7, #18]
 8001982:	e07a      	b.n	8001a7a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001984:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d028      	beq.n	80019de <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800198c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001990:	2b10      	cmp	r3, #16
 8001992:	d108      	bne.n	80019a6 <lcd_ShowChar+0xae>
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	8a7b      	ldrh	r3, [r7, #18]
 8001998:	493c      	ldr	r1, [pc, #240]	; (8001a8c <lcd_ShowChar+0x194>)
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	440a      	add	r2, r1
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	75fb      	strb	r3, [r7, #23]
 80019a4:	e01b      	b.n	80019de <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80019a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019aa:	2b18      	cmp	r3, #24
 80019ac:	d10b      	bne.n	80019c6 <lcd_ShowChar+0xce>
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	8a79      	ldrh	r1, [r7, #18]
 80019b2:	4837      	ldr	r0, [pc, #220]	; (8001a90 <lcd_ShowChar+0x198>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	4403      	add	r3, r0
 80019be:	440b      	add	r3, r1
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	75fb      	strb	r3, [r7, #23]
 80019c4:	e00b      	b.n	80019de <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80019c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d15a      	bne.n	8001a84 <lcd_ShowChar+0x18c>
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	8a7b      	ldrh	r3, [r7, #18]
 80019d2:	4930      	ldr	r1, [pc, #192]	; (8001a94 <lcd_ShowChar+0x19c>)
 80019d4:	0192      	lsls	r2, r2, #6
 80019d6:	440a      	add	r2, r1
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80019de:	2300      	movs	r3, #0
 80019e0:	75bb      	strb	r3, [r7, #22]
 80019e2:	e044      	b.n	8001a6e <lcd_ShowChar+0x176>
		{
			if(!mode)
 80019e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d120      	bne.n	8001a2e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80019ec:	7dfa      	ldrb	r2, [r7, #23]
 80019ee:	7dbb      	ldrb	r3, [r7, #22]
 80019f0:	fa42 f303 	asr.w	r3, r2, r3
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <lcd_ShowChar+0x10e>
 80019fc:	883b      	ldrh	r3, [r7, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fec2 	bl	8001788 <LCD_WR_DATA>
 8001a04:	e003      	b.n	8001a0e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff febd 	bl	8001788 <LCD_WR_DATA>
				m++;
 8001a0e:	7d7b      	ldrb	r3, [r7, #21]
 8001a10:	3301      	adds	r3, #1
 8001a12:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a14:	7d7b      	ldrb	r3, [r7, #21]
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a1c:	fb02 f201 	mul.w	r2, r2, r1
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11f      	bne.n	8001a68 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	757b      	strb	r3, [r7, #21]
					break;
 8001a2c:	e022      	b.n	8001a74 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a2e:	7dfa      	ldrb	r2, [r7, #23]
 8001a30:	7dbb      	ldrb	r3, [r7, #22]
 8001a32:	fa42 f303 	asr.w	r3, r2, r3
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <lcd_ShowChar+0x152>
 8001a3e:	883a      	ldrh	r2, [r7, #0]
 8001a40:	88b9      	ldrh	r1, [r7, #4]
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff3f 	bl	80018c8 <lcd_DrawPoint>
				x++;
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001a50:	88fa      	ldrh	r2, [r7, #6]
 8001a52:	8a3b      	ldrh	r3, [r7, #16]
 8001a54:	1ad2      	subs	r2, r2, r3
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d105      	bne.n	8001a68 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a5c:	8a3b      	ldrh	r3, [r7, #16]
 8001a5e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a60:	88bb      	ldrh	r3, [r7, #4]
 8001a62:	3301      	adds	r3, #1
 8001a64:	80bb      	strh	r3, [r7, #4]
					break;
 8001a66:	e005      	b.n	8001a74 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a68:	7dbb      	ldrb	r3, [r7, #22]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	75bb      	strb	r3, [r7, #22]
 8001a6e:	7dbb      	ldrb	r3, [r7, #22]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	d9b7      	bls.n	80019e4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a74:	8a7b      	ldrh	r3, [r7, #18]
 8001a76:	3301      	adds	r3, #1
 8001a78:	827b      	strh	r3, [r7, #18]
 8001a7a:	8a7a      	ldrh	r2, [r7, #18]
 8001a7c:	89bb      	ldrh	r3, [r7, #12]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d380      	bcc.n	8001984 <lcd_ShowChar+0x8c>
 8001a82:	e000      	b.n	8001a86 <lcd_ShowChar+0x18e>
		else return;
 8001a84:	bf00      	nop
				}
			}
		}
	}
}
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}
 8001a8c:	08009970 	.word	0x08009970
 8001a90:	08009f60 	.word	0x08009f60
 8001a94:	0800b130 	.word	0x0800b130

08001a98 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001aac:	e004      	b.n	8001ab8 <mypow+0x20>
 8001aae:	79fa      	ldrb	r2, [r7, #7]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	79bb      	ldrb	r3, [r7, #6]
 8001aba:	1e5a      	subs	r2, r3, #1
 8001abc:	71ba      	strb	r2, [r7, #6]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f5      	bne.n	8001aae <mypow+0x16>
	return result;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b08b      	sub	sp, #44	; 0x2c
 8001ad4:	af04      	add	r7, sp, #16
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	4608      	mov	r0, r1
 8001ada:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	81fb      	strh	r3, [r7, #14]
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	81bb      	strh	r3, [r7, #12]
 8001aea:	460b      	mov	r3, r1
 8001aec:	71fb      	strb	r3, [r7, #7]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001af2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001afa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001afe:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001bd8 <lcd_ShowFloatNum+0x108>
 8001b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b0a:	ee17 3a90 	vmov	r3, s15
 8001b0e:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	75fb      	strb	r3, [r7, #23]
 8001b14:	e057      	b.n	8001bc6 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001b16:	8abc      	ldrh	r4, [r7, #20]
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	200a      	movs	r0, #10
 8001b28:	f7ff ffb6 	bl	8001a98 <mypow>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <lcd_ShowFloatNum+0x10c>)
 8001b34:	fba3 2301 	umull	r2, r3, r3, r1
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	1aca      	subs	r2, r1, r3
 8001b44:	4613      	mov	r3, r2
 8001b46:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001b48:	7dfa      	ldrb	r2, [r7, #23]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	3b02      	subs	r3, #2
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d11d      	bne.n	8001b8e <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	3b02      	subs	r3, #2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	7dbb      	ldrb	r3, [r7, #22]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	fb12 f303 	smulbb	r3, r2, r3
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	89fb      	ldrh	r3, [r7, #14]
 8001b64:	4413      	add	r3, r2
 8001b66:	b298      	uxth	r0, r3
 8001b68:	88ba      	ldrh	r2, [r7, #4]
 8001b6a:	89b9      	ldrh	r1, [r7, #12]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	222e      	movs	r2, #46	; 0x2e
 8001b7e:	f7ff febb 	bl	80018f8 <lcd_ShowChar>
			t++;
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	3301      	adds	r3, #1
 8001b86:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	7dbb      	ldrb	r3, [r7, #22]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	fb12 f303 	smulbb	r3, r2, r3
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b298      	uxth	r0, r3
 8001ba2:	7cfb      	ldrb	r3, [r7, #19]
 8001ba4:	3330      	adds	r3, #48	; 0x30
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	88bc      	ldrh	r4, [r7, #4]
 8001baa:	89b9      	ldrh	r1, [r7, #12]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4623      	mov	r3, r4
 8001bbc:	f7ff fe9c 	bl	80018f8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	75fb      	strb	r3, [r7, #23]
 8001bc6:	7dfa      	ldrb	r2, [r7, #23]
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3a3      	bcc.n	8001b16 <lcd_ShowFloatNum+0x46>
	}
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	42c80000 	.word	0x42c80000
 8001bdc:	cccccccd 	.word	0xcccccccd

08001be0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <lcd_SetDir+0x44>)
 8001bfc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c00:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <lcd_SetDir+0x44>)
 8001c04:	22f0      	movs	r2, #240	; 0xf0
 8001c06:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c08:	e006      	b.n	8001c18 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <lcd_SetDir+0x44>)
 8001c0c:	22f0      	movs	r2, #240	; 0xf0
 8001c0e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <lcd_SetDir+0x44>)
 8001c12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c16:	805a      	strh	r2, [r3, #2]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	20000264 	.word	0x20000264

08001c28 <lcd_init>:


void lcd_init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c32:	48aa      	ldr	r0, [pc, #680]	; (8001edc <lcd_init+0x2b4>)
 8001c34:	f002 fea4 	bl	8004980 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3c:	f001 fbba 	bl	80033b4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c46:	48a5      	ldr	r0, [pc, #660]	; (8001edc <lcd_init+0x2b4>)
 8001c48:	f002 fe9a 	bl	8004980 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c50:	f001 fbb0 	bl	80033b4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff ffc3 	bl	8001be0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c5a:	20d3      	movs	r0, #211	; 0xd3
 8001c5c:	f7ff fd84 	bl	8001768 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c60:	f7ff fda2 	bl	80017a8 <LCD_RD_DATA>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b9d      	ldr	r3, [pc, #628]	; (8001ee0 <lcd_init+0x2b8>)
 8001c6a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c6c:	f7ff fd9c 	bl	80017a8 <LCD_RD_DATA>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b9a      	ldr	r3, [pc, #616]	; (8001ee0 <lcd_init+0x2b8>)
 8001c76:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c78:	f7ff fd96 	bl	80017a8 <LCD_RD_DATA>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b97      	ldr	r3, [pc, #604]	; (8001ee0 <lcd_init+0x2b8>)
 8001c82:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001c84:	4b96      	ldr	r3, [pc, #600]	; (8001ee0 <lcd_init+0x2b8>)
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4b94      	ldr	r3, [pc, #592]	; (8001ee0 <lcd_init+0x2b8>)
 8001c8e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001c90:	f7ff fd8a 	bl	80017a8 <LCD_RD_DATA>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b91      	ldr	r3, [pc, #580]	; (8001ee0 <lcd_init+0x2b8>)
 8001c9a:	889b      	ldrh	r3, [r3, #4]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <lcd_init+0x2b8>)
 8001ca2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001ca4:	20cf      	movs	r0, #207	; 0xcf
 8001ca6:	f7ff fd5f 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fd6c 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001cb0:	20c1      	movs	r0, #193	; 0xc1
 8001cb2:	f7ff fd69 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001cb6:	2030      	movs	r0, #48	; 0x30
 8001cb8:	f7ff fd66 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001cbc:	20ed      	movs	r0, #237	; 0xed
 8001cbe:	f7ff fd53 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001cc2:	2064      	movs	r0, #100	; 0x64
 8001cc4:	f7ff fd60 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f7ff fd5d 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001cce:	2012      	movs	r0, #18
 8001cd0:	f7ff fd5a 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001cd4:	2081      	movs	r0, #129	; 0x81
 8001cd6:	f7ff fd57 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001cda:	20e8      	movs	r0, #232	; 0xe8
 8001cdc:	f7ff fd44 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001ce0:	2085      	movs	r0, #133	; 0x85
 8001ce2:	f7ff fd51 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ce6:	2010      	movs	r0, #16
 8001ce8:	f7ff fd4e 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001cec:	207a      	movs	r0, #122	; 0x7a
 8001cee:	f7ff fd4b 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001cf2:	20cb      	movs	r0, #203	; 0xcb
 8001cf4:	f7ff fd38 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001cf8:	2039      	movs	r0, #57	; 0x39
 8001cfa:	f7ff fd45 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001cfe:	202c      	movs	r0, #44	; 0x2c
 8001d00:	f7ff fd42 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff fd3f 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d0a:	2034      	movs	r0, #52	; 0x34
 8001d0c:	f7ff fd3c 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f7ff fd39 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d16:	20f7      	movs	r0, #247	; 0xf7
 8001d18:	f7ff fd26 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d1c:	2020      	movs	r0, #32
 8001d1e:	f7ff fd33 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d22:	20ea      	movs	r0, #234	; 0xea
 8001d24:	f7ff fd20 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fd2d 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fd2a 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d34:	20c0      	movs	r0, #192	; 0xc0
 8001d36:	f7ff fd17 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d3a:	201b      	movs	r0, #27
 8001d3c:	f7ff fd24 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d40:	20c1      	movs	r0, #193	; 0xc1
 8001d42:	f7ff fd11 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff fd1e 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d4c:	20c5      	movs	r0, #197	; 0xc5
 8001d4e:	f7ff fd0b 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d52:	2030      	movs	r0, #48	; 0x30
 8001d54:	f7ff fd18 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d58:	2030      	movs	r0, #48	; 0x30
 8001d5a:	f7ff fd15 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d5e:	20c7      	movs	r0, #199	; 0xc7
 8001d60:	f7ff fd02 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d64:	20b7      	movs	r0, #183	; 0xb7
 8001d66:	f7ff fd0f 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d6a:	2036      	movs	r0, #54	; 0x36
 8001d6c:	f7ff fcfc 	bl	8001768 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001d70:	2008      	movs	r0, #8
 8001d72:	f7ff fd09 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001d76:	203a      	movs	r0, #58	; 0x3a
 8001d78:	f7ff fcf6 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001d7c:	2055      	movs	r0, #85	; 0x55
 8001d7e:	f7ff fd03 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001d82:	20b1      	movs	r0, #177	; 0xb1
 8001d84:	f7ff fcf0 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff fcfd 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001d8e:	201a      	movs	r0, #26
 8001d90:	f7ff fcfa 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001d94:	20b6      	movs	r0, #182	; 0xb6
 8001d96:	f7ff fce7 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f7ff fcf4 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001da0:	20a2      	movs	r0, #162	; 0xa2
 8001da2:	f7ff fcf1 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001da6:	20f2      	movs	r0, #242	; 0xf2
 8001da8:	f7ff fcde 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff fceb 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001db2:	2026      	movs	r0, #38	; 0x26
 8001db4:	f7ff fcd8 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fce5 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001dbe:	20e0      	movs	r0, #224	; 0xe0
 8001dc0:	f7ff fcd2 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001dc4:	200f      	movs	r0, #15
 8001dc6:	f7ff fcdf 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001dca:	202a      	movs	r0, #42	; 0x2a
 8001dcc:	f7ff fcdc 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001dd0:	2028      	movs	r0, #40	; 0x28
 8001dd2:	f7ff fcd9 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001dd6:	2008      	movs	r0, #8
 8001dd8:	f7ff fcd6 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001ddc:	200e      	movs	r0, #14
 8001dde:	f7ff fcd3 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001de2:	2008      	movs	r0, #8
 8001de4:	f7ff fcd0 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001de8:	2054      	movs	r0, #84	; 0x54
 8001dea:	f7ff fccd 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001dee:	20a9      	movs	r0, #169	; 0xa9
 8001df0:	f7ff fcca 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001df4:	2043      	movs	r0, #67	; 0x43
 8001df6:	f7ff fcc7 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001dfa:	200a      	movs	r0, #10
 8001dfc:	f7ff fcc4 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e00:	200f      	movs	r0, #15
 8001e02:	f7ff fcc1 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fcbe 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fcbb 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fcb8 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fcb5 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e1e:	20e1      	movs	r0, #225	; 0xe1
 8001e20:	f7ff fca2 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff fcaf 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e2a:	2015      	movs	r0, #21
 8001e2c:	f7ff fcac 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e30:	2017      	movs	r0, #23
 8001e32:	f7ff fca9 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e36:	2007      	movs	r0, #7
 8001e38:	f7ff fca6 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e3c:	2011      	movs	r0, #17
 8001e3e:	f7ff fca3 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e42:	2006      	movs	r0, #6
 8001e44:	f7ff fca0 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e48:	202b      	movs	r0, #43	; 0x2b
 8001e4a:	f7ff fc9d 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e4e:	2056      	movs	r0, #86	; 0x56
 8001e50:	f7ff fc9a 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e54:	203c      	movs	r0, #60	; 0x3c
 8001e56:	f7ff fc97 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e5a:	2005      	movs	r0, #5
 8001e5c:	f7ff fc94 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e60:	2010      	movs	r0, #16
 8001e62:	f7ff fc91 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e66:	200f      	movs	r0, #15
 8001e68:	f7ff fc8e 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e6c:	203f      	movs	r0, #63	; 0x3f
 8001e6e:	f7ff fc8b 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e72:	203f      	movs	r0, #63	; 0x3f
 8001e74:	f7ff fc88 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e78:	200f      	movs	r0, #15
 8001e7a:	f7ff fc85 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001e7e:	202b      	movs	r0, #43	; 0x2b
 8001e80:	f7ff fc72 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fc7f 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff fc7c 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7ff fc79 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001e96:	203f      	movs	r0, #63	; 0x3f
 8001e98:	f7ff fc76 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001e9c:	202a      	movs	r0, #42	; 0x2a
 8001e9e:	f7ff fc63 	bl	8001768 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fc70 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fc6d 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fc6a 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001eb4:	20ef      	movs	r0, #239	; 0xef
 8001eb6:	f7ff fc67 	bl	8001788 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001eba:	2011      	movs	r0, #17
 8001ebc:	f7ff fc54 	bl	8001768 <LCD_WR_REG>
	HAL_Delay(120);
 8001ec0:	2078      	movs	r0, #120	; 0x78
 8001ec2:	f001 fa77 	bl	80033b4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001ec6:	2029      	movs	r0, #41	; 0x29
 8001ec8:	f7ff fc4e 	bl	8001768 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <lcd_init+0x2bc>)
 8001ed4:	f002 fd54 	bl	8004980 <HAL_GPIO_WritePin>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	20000264 	.word	0x20000264
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	60ba      	str	r2, [r7, #8]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	81fb      	strh	r3, [r7, #14]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	81bb      	strh	r3, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001efe:	89fb      	ldrh	r3, [r7, #14]
 8001f00:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f06:	e048      	b.n	8001f9a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d145      	bne.n	8001f9a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f0e:	89fa      	ldrh	r2, [r7, #14]
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <lcd_ShowStr+0xc4>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dc3f      	bgt.n	8001fa4 <lcd_ShowStr+0xbc>
 8001f24:	89ba      	ldrh	r2, [r7, #12]
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <lcd_ShowStr+0xc4>)
 8001f28:	885b      	ldrh	r3, [r3, #2]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f30:	1acb      	subs	r3, r1, r3
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dc36      	bgt.n	8001fa4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b80      	cmp	r3, #128	; 0x80
 8001f3c:	d902      	bls.n	8001f44 <lcd_ShowStr+0x5c>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
 8001f42:	e02a      	b.n	8001f9a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b0d      	cmp	r3, #13
 8001f4a:	d10b      	bne.n	8001f64 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001f4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	89bb      	ldrh	r3, [r7, #12]
 8001f54:	4413      	add	r3, r2
 8001f56:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001f58:	8abb      	ldrh	r3, [r7, #20]
 8001f5a:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	e017      	b.n	8001f94 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	88fc      	ldrh	r4, [r7, #6]
 8001f6a:	89b9      	ldrh	r1, [r7, #12]
 8001f6c:	89f8      	ldrh	r0, [r7, #14]
 8001f6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f72:	9302      	str	r3, [sp, #8]
 8001f74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	4623      	mov	r3, r4
 8001f80:	f7ff fcba 	bl	80018f8 <lcd_ShowChar>
					x+=sizey/2;
 8001f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f88:	085b      	lsrs	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	89fb      	ldrh	r3, [r7, #14]
 8001f90:	4413      	add	r3, r2
 8001f92:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1b2      	bne.n	8001f08 <lcd_ShowStr+0x20>
 8001fa2:	e000      	b.n	8001fa6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001fa4:	bf00      	nop
			}
		}
	}
}
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	20000264 	.word	0x20000264

08001fb0 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <led7_init+0x14>)
 8001fba:	f002 fce1 	bl	8004980 <HAL_GPIO_WritePin>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021800 	.word	0x40021800

08001fc8 <led7_Scan>:

void led7_Scan(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <led7_Scan+0x104>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <led7_Scan+0x104>)
 8001fd6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001fd8:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <led7_Scan+0x108>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a3d      	ldr	r2, [pc, #244]	; (80020d4 <led7_Scan+0x10c>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <led7_Scan+0x104>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <led7_Scan+0x104>)
 8001ff2:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <led7_Scan+0x108>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d847      	bhi.n	800208c <led7_Scan+0xc4>
 8001ffc:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <led7_Scan+0x3c>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002015 	.word	0x08002015
 8002008:	08002033 	.word	0x08002033
 800200c:	08002051 	.word	0x08002051
 8002010:	0800206f 	.word	0x0800206f
	case 0:
		spi_buffer |= 0x00b0;
 8002014:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <led7_Scan+0x104>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800201c:	b29a      	uxth	r2, r3
 800201e:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <led7_Scan+0x104>)
 8002020:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <led7_Scan+0x104>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <led7_Scan+0x104>)
 800202e:	801a      	strh	r2, [r3, #0]
		break;
 8002030:	e02d      	b.n	800208e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <led7_Scan+0x104>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800203a:	b29a      	uxth	r2, r3
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <led7_Scan+0x104>)
 800203e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <led7_Scan+0x104>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f023 0320 	bic.w	r3, r3, #32
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <led7_Scan+0x104>)
 800204c:	801a      	strh	r2, [r3, #0]
		break;
 800204e:	e01e      	b.n	800208e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002050:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <led7_Scan+0x104>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002058:	b29a      	uxth	r2, r3
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <led7_Scan+0x104>)
 800205c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <led7_Scan+0x104>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	f023 0310 	bic.w	r3, r3, #16
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <led7_Scan+0x104>)
 800206a:	801a      	strh	r2, [r3, #0]
		break;
 800206c:	e00f      	b.n	800208e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <led7_Scan+0x104>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <led7_Scan+0x104>)
 800207a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <led7_Scan+0x104>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <led7_Scan+0x104>)
 8002088:	801a      	strh	r2, [r3, #0]
		break;
 800208a:	e000      	b.n	800208e <led7_Scan+0xc6>
	default:
		break;
 800208c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <led7_Scan+0x108>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	425a      	negs	r2, r3
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	bf58      	it	pl
 80020a0:	4253      	negpl	r3, r2
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <led7_Scan+0x108>)
 80020a4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2140      	movs	r1, #64	; 0x40
 80020aa:	480b      	ldr	r0, [pc, #44]	; (80020d8 <led7_Scan+0x110>)
 80020ac:	f002 fc68 	bl	8004980 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80020b0:	2301      	movs	r3, #1
 80020b2:	2202      	movs	r2, #2
 80020b4:	4905      	ldr	r1, [pc, #20]	; (80020cc <led7_Scan+0x104>)
 80020b6:	4809      	ldr	r0, [pc, #36]	; (80020dc <led7_Scan+0x114>)
 80020b8:	f004 f953 	bl	8006362 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80020bc:	2201      	movs	r2, #1
 80020be:	2140      	movs	r1, #64	; 0x40
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <led7_Scan+0x110>)
 80020c2:	f002 fc5d 	bl	8004980 <HAL_GPIO_WritePin>
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000000e 	.word	0x2000000e
 80020d0:	200000a4 	.word	0x200000a4
 80020d4:	20000000 	.word	0x20000000
 80020d8:	40021800 	.word	0x40021800
 80020dc:	200002ac 	.word	0x200002ac

080020e0 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0e      	blt.n	8002112 <led7_SetDigit+0x32>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b09      	cmp	r3, #9
 80020f8:	dc0b      	bgt.n	8002112 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <led7_SetDigit+0x40>)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	b2d9      	uxtb	r1, r3
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <led7_SetDigit+0x44>)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	460a      	mov	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
	}
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000004 	.word	0x20000004
 8002124:	20000000 	.word	0x20000000

08002128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800212c:	f001 f8d0 	bl	80032d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002130:	f000 f860 	bl	80021f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002134:	f7ff f99c 	bl	8001470 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002138:	f000 fe0a 	bl	8002d50 <MX_TIM2_Init>
  MX_SPI1_Init();
 800213c:	f000 fcd2 	bl	8002ae4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002140:	f7ff f8c6 	bl	80012d0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002144:	f7ff fa9a 	bl	800167c <MX_I2C1_Init>
  MX_TIM13_Init();
 8002148:	f000 fe4e 	bl	8002de8 <MX_TIM13_Init>
  MX_DMA_Init();
 800214c:	f7fe ffe2 	bl	8001114 <MX_DMA_Init>
  MX_ADC1_Init();
 8002150:	f7fe fe28 	bl	8000da4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002154:	f000 ffda 	bl	800310c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002158:	f000 f8b6 	bl	80022c8 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fb81 	bl	8001864 <lcd_Clear>
  while (1)
  {
	  if (flag_timer2 == 1){
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <main+0xb4>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10e      	bne.n	8002188 <main+0x60>
		  flag_timer2 = 0;
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <main+0xb4>)
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 8002170:	f7fe ff42 	bl	8000ff8 <button_Scan>
		  test_LedDebug();
 8002174:	f000 f8e0 	bl	8002338 <test_LedDebug>
		  ShowADC();
 8002178:	f000 f932 	bl	80023e0 <ShowADC>
		  test_Buzzer();
 800217c:	f000 fa60 	bl	8002640 <test_Buzzer>
		  ds3231_ReadTime();
 8002180:	f7ff f842 	bl	8001208 <ds3231_ReadTime>
		  test_led7seg();
 8002184:	f000 faf0 	bl	8002768 <test_led7seg>
	  }
	  if (flag_timer_senduart == 1){
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <main+0xb8>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d113      	bne.n	80021b8 <main+0x90>
		  flag_timer_senduart = 0;
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <main+0xb8>)
 8002192:	2200      	movs	r2, #0
 8002194:	801a      	strh	r2, [r3, #0]
		  if (warning){
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <main+0xbc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <main+0x8c>
			  send_uart_warning();
 800219e:	f000 fab3 	bl	8002708 <send_uart_warning>
			  buzzer_warning();
 80021a2:	f000 fac9 	bl	8002738 <buzzer_warning>
			  state_buzzer = 1 - state_buzzer;
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <main+0xc0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f1c3 0301 	rsb	r3, r3, #1
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <main+0xc0>)
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e001      	b.n	80021b8 <main+0x90>
		  }
		  else {
			  send_uart();
 80021b4:	f000 fa60 	bl	8002678 <send_uart>
		  }
	  }

	  if (humidity > 70){
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <main+0xc4>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80021f0 <main+0xc8>
 80021c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	dd03      	ble.n	80021d4 <main+0xac>
		  warning = 1;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <main+0xbc>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e7c6      	b.n	8002162 <main+0x3a>
	  }
	  else {
		  warning = 0;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <main+0xbc>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
	  if (flag_timer2 == 1){
 80021da:	e7c2      	b.n	8002162 <main+0x3a>
 80021dc:	200000ca 	.word	0x200000ca
 80021e0:	200000d0 	.word	0x200000d0
 80021e4:	200000c0 	.word	0x200000c0
 80021e8:	200000c4 	.word	0x200000c4
 80021ec:	200000b8 	.word	0x200000b8
 80021f0:	428c0000 	.word	0x428c0000

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b094      	sub	sp, #80	; 0x50
 80021f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fa:	f107 0320 	add.w	r3, r7, #32
 80021fe:	2230      	movs	r2, #48	; 0x30
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f006 ff0e 	bl	8009024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <SystemClock_Config+0xcc>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <SystemClock_Config+0xcc>)
 8002222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002226:	6413      	str	r3, [r2, #64]	; 0x40
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <SystemClock_Config+0xcc>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <SystemClock_Config+0xd0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <SystemClock_Config+0xd0>)
 800223e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <SystemClock_Config+0xd0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002250:	2302      	movs	r3, #2
 8002252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002254:	2301      	movs	r3, #1
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002258:	2310      	movs	r3, #16
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225c:	2302      	movs	r3, #2
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002260:	2300      	movs	r3, #0
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002264:	2308      	movs	r3, #8
 8002266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002268:	23a8      	movs	r3, #168	; 0xa8
 800226a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800226c:	2302      	movs	r3, #2
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002270:	2304      	movs	r3, #4
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002274:	f107 0320 	add.w	r3, r7, #32
 8002278:	4618      	mov	r0, r3
 800227a:	f003 fb75 	bl	8005968 <HAL_RCC_OscConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002284:	f000 fab4 	bl	80027f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002288:	230f      	movs	r3, #15
 800228a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800228c:	2302      	movs	r3, #2
 800228e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800229a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800229e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2105      	movs	r1, #5
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fdd6 	bl	8005e58 <HAL_RCC_ClockConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022b2:	f000 fa9d 	bl	80027f0 <Error_Handler>
  }
}
 80022b6:	bf00      	nop
 80022b8:	3750      	adds	r7, #80	; 0x50
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000

080022c8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	  timer_init();
 80022cc:	f000 fb82 	bl	80029d4 <timer_init>
	  button_init();
 80022d0:	f7fe fe86 	bl	8000fe0 <button_init>
	  lcd_init();
 80022d4:	f7ff fca8 	bl	8001c28 <lcd_init>
	  sensor_init();
 80022d8:	f000 fa90 	bl	80027fc <sensor_init>
	  buzzer_init();
 80022dc:	f7fe fef8 	bl	80010d0 <buzzer_init>
	  uart_init_rs232();
 80022e0:	f000 fe46 	bl	8002f70 <uart_init_rs232>
	  led7_init();
 80022e4:	f7ff fe64 	bl	8001fb0 <led7_init>
	  setTimer2(10);
 80022e8:	200a      	movs	r0, #10
 80022ea:	f000 fb7d 	bl	80029e8 <setTimer2>
	  ds3231_init();
 80022ee:	f7fe ff31 	bl	8001154 <ds3231_init>
	  setTimerSendUart(1000);
 80022f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f6:	f000 fb93 	bl	8002a20 <setTimerSendUart>
	  HAL_Delay(1000);
 80022fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022fe:	f001 f859 	bl	80033b4 <HAL_Delay>
	  ds3231_Write(ADRESS_SEC, 30);
 8002302:	211e      	movs	r1, #30
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe ff5d 	bl	80011c4 <ds3231_Write>
	  ds3231_Write(ADRESS_MIN, 30);
 800230a:	211e      	movs	r1, #30
 800230c:	2001      	movs	r0, #1
 800230e:	f7fe ff59 	bl	80011c4 <ds3231_Write>
	  ds3231_Write(ADRESS_HOUR, 9);
 8002312:	2109      	movs	r1, #9
 8002314:	2002      	movs	r0, #2
 8002316:	f7fe ff55 	bl	80011c4 <ds3231_Write>
//#define ADRESS_DAY		0x03
//#define ADRESS_DATE		0x04
//#define ADRESS_MONTH	0x05
//#define ADRESS_YEAR		0x06

	  ds3231_Write(ADRESS_DATE, 26);
 800231a:	211a      	movs	r1, #26
 800231c:	2004      	movs	r0, #4
 800231e:	f7fe ff51 	bl	80011c4 <ds3231_Write>
	  ds3231_Write(ADRESS_MONTH, 11);
 8002322:	210b      	movs	r1, #11
 8002324:	2005      	movs	r0, #5
 8002326:	f7fe ff4d 	bl	80011c4 <ds3231_Write>
	  ds3231_Write(ADRESS_YEAR, 2024);
 800232a:	21e8      	movs	r1, #232	; 0xe8
 800232c:	2006      	movs	r0, #6
 800232e:	f7fe ff49 	bl	80011c4 <ds3231_Write>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <test_LedDebug+0x3c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <test_LedDebug+0x40>)
 8002344:	fb83 1302 	smull	r1, r3, r3, r2
 8002348:	10d9      	asrs	r1, r3, #3
 800234a:	17d3      	asrs	r3, r2, #31
 800234c:	1ac9      	subs	r1, r1, r3
 800234e:	460b      	mov	r3, r1
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	1ad1      	subs	r1, r2, r3
 8002358:	b2ca      	uxtb	r2, r1
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <test_LedDebug+0x3c>)
 800235c:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <test_LedDebug+0x3c>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002366:	2110      	movs	r1, #16
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <test_LedDebug+0x44>)
 800236a:	f002 fb22 	bl	80049b2 <HAL_GPIO_TogglePin>
	}
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200000c8 	.word	0x200000c8
 8002378:	66666667 	.word	0x66666667
 800237c:	40021000 	.word	0x40021000

08002380 <isButtonUp>:

uint8_t isButtonUp()
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <isButtonUp+0x1c>)
 8002386:	88db      	ldrh	r3, [r3, #6]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <isButtonUp+0x10>
        return 1;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <isButtonUp+0x12>
    else
        return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	20000190 	.word	0x20000190

080023a0 <isButtonDown>:

uint8_t isButtonDown()
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <isButtonDown+0x1c>)
 80023a6:	89db      	ldrh	r3, [r3, #14]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <isButtonDown+0x10>
        return 1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <isButtonDown+0x12>
    else
        return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	20000190 	.word	0x20000190

080023c0 <isButtonRight>:

uint8_t isButtonRight()
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <isButtonRight+0x1c>)
 80023c6:	8adb      	ldrh	r3, [r3, #22]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <isButtonRight+0x10>
        return 1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <isButtonRight+0x12>
    else
        return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	20000190 	.word	0x20000190

080023e0 <ShowADC>:

uint8_t count_adc = 0;

void ShowADC(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	ed2d 8b02 	vpush	{d8}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 80023ea:	4b83      	ldr	r3, [pc, #524]	; (80025f8 <ShowADC+0x218>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	4b82      	ldr	r3, [pc, #520]	; (80025fc <ShowADC+0x21c>)
 80023f2:	fb83 1302 	smull	r1, r3, r3, r2
 80023f6:	10d9      	asrs	r1, r3, #3
 80023f8:	17d3      	asrs	r3, r2, #31
 80023fa:	1ac9      	subs	r1, r1, r3
 80023fc:	460b      	mov	r3, r1
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	1ad1      	subs	r1, r2, r3
 8002406:	b2ca      	uxtb	r2, r1
 8002408:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <ShowADC+0x218>)
 800240a:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 800240c:	4b7a      	ldr	r3, [pc, #488]	; (80025f8 <ShowADC+0x218>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 80ec 	bne.w	80025ee <ShowADC+0x20e>
		sensor_Read();
 8002416:	f000 f9ff 	bl	8002818 <sensor_Read>
		power = sensor_GetCurrent() * sensor_GetVoltage();
 800241a:	f000 fa61 	bl	80028e0 <sensor_GetCurrent>
 800241e:	eeb0 8a40 	vmov.f32	s16, s0
 8002422:	f000 fa21 	bl	8002868 <sensor_GetVoltage>
 8002426:	eef0 7a40 	vmov.f32	s15, s0
 800242a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800242e:	4b74      	ldr	r3, [pc, #464]	; (8002600 <ShowADC+0x220>)
 8002430:	edc3 7a00 	vstr	s15, [r3]
		light = sensor_GetLight();
 8002434:	f000 f9fe 	bl	8002834 <sensor_GetLight>
 8002438:	4603      	mov	r3, r0
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002442:	4b70      	ldr	r3, [pc, #448]	; (8002604 <ShowADC+0x224>)
 8002444:	edc3 7a00 	vstr	s15, [r3]
		humidity = sensor_GetPotentiometer()*1.0 / 4096 * 100;
 8002448:	f000 fa00 	bl	800284c <sensor_GetPotentiometer>
 800244c:	4603      	mov	r3, r0
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f860 	bl	8000514 <__aeabi_i2d>
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <ShowADC+0x228>)
 800245a:	f7fe f9ef 	bl	800083c <__aeabi_ddiv>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b68      	ldr	r3, [pc, #416]	; (800260c <ShowADC+0x22c>)
 800246c:	f7fe f8bc 	bl	80005e8 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fac8 	bl	8000a0c <__aeabi_d2f>
 800247c:	4603      	mov	r3, r0
 800247e:	4a64      	ldr	r2, [pc, #400]	; (8002610 <ShowADC+0x230>)
 8002480:	6013      	str	r3, [r2, #0]
		temp = sensor_GetTemperature();
 8002482:	f000 fa89 	bl	8002998 <sensor_GetTemperature>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <ShowADC+0x234>)
 800248c:	edc3 7a00 	vstr	s15, [r3]

		//------------show power---------------//
		lcd_ShowStr(10, 120, "Power(mW):", RED, BLACK, 16, 0);
 8002490:	2300      	movs	r3, #0
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2310      	movs	r3, #16
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024a0:	4a5d      	ldr	r2, [pc, #372]	; (8002618 <ShowADC+0x238>)
 80024a2:	2178      	movs	r1, #120	; 0x78
 80024a4:	200a      	movs	r0, #10
 80024a6:	f7ff fd1f 	bl	8001ee8 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 120,power, 5, RED, BLACK, 16);
 80024aa:	4b55      	ldr	r3, [pc, #340]	; (8002600 <ShowADC+0x220>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	2310      	movs	r3, #16
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2300      	movs	r3, #0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024bc:	2205      	movs	r2, #5
 80024be:	eeb0 0a67 	vmov.f32	s0, s15
 80024c2:	2178      	movs	r1, #120	; 0x78
 80024c4:	2082      	movs	r0, #130	; 0x82
 80024c6:	f7ff fb03 	bl	8001ad0 <lcd_ShowFloatNum>

		//------------show light---------------//
		lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
 80024ca:	2300      	movs	r3, #0
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	2310      	movs	r3, #16
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	2300      	movs	r3, #0
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024da:	4a50      	ldr	r2, [pc, #320]	; (800261c <ShowADC+0x23c>)
 80024dc:	218c      	movs	r1, #140	; 0x8c
 80024de:	200a      	movs	r0, #10
 80024e0:	f7ff fd02 	bl	8001ee8 <lcd_ShowStr>
		if (light >= 3000){
 80024e4:	4b47      	ldr	r3, [pc, #284]	; (8002604 <ShowADC+0x224>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002620 <ShowADC+0x240>
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	db0a      	blt.n	800250e <ShowADC+0x12e>
			strcpy(light_str, "WEAK  ");
 80024f8:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <ShowADC+0x244>)
 80024fa:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <ShowADC+0x248>)
 80024fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002500:	6018      	str	r0, [r3, #0]
 8002502:	3304      	adds	r3, #4
 8002504:	8019      	strh	r1, [r3, #0]
 8002506:	3302      	adds	r3, #2
 8002508:	0c0a      	lsrs	r2, r1, #16
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e028      	b.n	8002560 <ShowADC+0x180>
//			lcd_ShowStr(130, 140, "WEAK  ", RED, BLACK, 16, 0);
		}
		else if (light <= 3000 && light >=1200){
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <ShowADC+0x224>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002620 <ShowADC+0x240>
 8002518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	d814      	bhi.n	800254c <ShowADC+0x16c>
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <ShowADC+0x224>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800262c <ShowADC+0x24c>
 800252c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002534:	db0a      	blt.n	800254c <ShowADC+0x16c>
			strcpy(light_str, "NORMAL");
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <ShowADC+0x244>)
 8002538:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <ShowADC+0x250>)
 800253a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800253e:	6018      	str	r0, [r3, #0]
 8002540:	3304      	adds	r3, #4
 8002542:	8019      	strh	r1, [r3, #0]
 8002544:	3302      	adds	r3, #2
 8002546:	0c0a      	lsrs	r2, r1, #16
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e009      	b.n	8002560 <ShowADC+0x180>
//			lcd_ShowStr(130, 140, "NORMAL", RED, BLACK, 16, 0);
		}
		else{
			strcpy(light_str, "STRONG");
 800254c:	4b35      	ldr	r3, [pc, #212]	; (8002624 <ShowADC+0x244>)
 800254e:	4a39      	ldr	r2, [pc, #228]	; (8002634 <ShowADC+0x254>)
 8002550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002554:	6018      	str	r0, [r3, #0]
 8002556:	3304      	adds	r3, #4
 8002558:	8019      	strh	r1, [r3, #0]
 800255a:	3302      	adds	r3, #2
 800255c:	0c0a      	lsrs	r2, r1, #16
 800255e:	701a      	strb	r2, [r3, #0]
//			lcd_ShowStr(130, 140, "STRONG", RED, BLACK, 16, 0);
		}
		lcd_ShowStr(130, 140, light_str, RED, BLACK, 16, 0);
 8002560:	2300      	movs	r3, #0
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	2310      	movs	r3, #16
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	2300      	movs	r3, #0
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002570:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <ShowADC+0x244>)
 8002572:	218c      	movs	r1, #140	; 0x8c
 8002574:	2082      	movs	r0, #130	; 0x82
 8002576:	f7ff fcb7 	bl	8001ee8 <lcd_ShowStr>

		//------------show Humidity---------------//
		lcd_ShowStr(10, 160, "Humidity (%):", RED, BLACK, 16, 0);
 800257a:	2300      	movs	r3, #0
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	2310      	movs	r3, #16
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2300      	movs	r3, #0
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800258a:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <ShowADC+0x258>)
 800258c:	21a0      	movs	r1, #160	; 0xa0
 800258e:	200a      	movs	r0, #10
 8002590:	f7ff fcaa 	bl	8001ee8 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 160, humidity , 4, RED, BLACK, 16);
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <ShowADC+0x230>)
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	2310      	movs	r3, #16
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	2300      	movs	r3, #0
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025a6:	2204      	movs	r2, #4
 80025a8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ac:	21a0      	movs	r1, #160	; 0xa0
 80025ae:	2082      	movs	r0, #130	; 0x82
 80025b0:	f7ff fa8e 	bl	8001ad0 <lcd_ShowFloatNum>

		//------------show Temperature---------------//
		lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 80025b4:	2300      	movs	r3, #0
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	2310      	movs	r3, #16
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	2300      	movs	r3, #0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <ShowADC+0x25c>)
 80025c6:	21b4      	movs	r1, #180	; 0xb4
 80025c8:	200a      	movs	r0, #10
 80025ca:	f7ff fc8d 	bl	8001ee8 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 180, temp, 4, RED, BLACK, 16);
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <ShowADC+0x234>)
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	2310      	movs	r3, #16
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2300      	movs	r3, #0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025e0:	2204      	movs	r2, #4
 80025e2:	eeb0 0a67 	vmov.f32	s0, s15
 80025e6:	21b4      	movs	r1, #180	; 0xb4
 80025e8:	2082      	movs	r0, #130	; 0x82
 80025ea:	f7ff fa71 	bl	8001ad0 <lcd_ShowFloatNum>
	}
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	ecbd 8b02 	vpop	{d8}
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200000c9 	.word	0x200000c9
 80025fc:	66666667 	.word	0x66666667
 8002600:	200000a8 	.word	0x200000a8
 8002604:	200000b4 	.word	0x200000b4
 8002608:	40b00000 	.word	0x40b00000
 800260c:	40590000 	.word	0x40590000
 8002610:	200000b8 	.word	0x200000b8
 8002614:	200000bc 	.word	0x200000bc
 8002618:	080098a8 	.word	0x080098a8
 800261c:	080098b4 	.word	0x080098b4
 8002620:	453b8000 	.word	0x453b8000
 8002624:	200000ac 	.word	0x200000ac
 8002628:	080098bc 	.word	0x080098bc
 800262c:	44960000 	.word	0x44960000
 8002630:	080098c4 	.word	0x080098c4
 8002634:	080098cc 	.word	0x080098cc
 8002638:	080098d4 	.word	0x080098d4
 800263c:	080098e4 	.word	0x080098e4

08002640 <test_Buzzer>:

void test_Buzzer(){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 8002644:	f7ff fe9c 	bl	8002380 <isButtonUp>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <test_Buzzer+0x14>
		buzzer_SetVolume(50);
 800264e:	2032      	movs	r0, #50	; 0x32
 8002650:	f7fe fd48 	bl	80010e4 <buzzer_SetVolume>
	}

	if(isButtonDown()){
 8002654:	f7ff fea4 	bl	80023a0 <isButtonDown>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <test_Buzzer+0x24>
		buzzer_SetVolume(0);
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe fd40 	bl	80010e4 <buzzer_SetVolume>
	}

	if(isButtonRight()){
 8002664:	f7ff feac 	bl	80023c0 <isButtonRight>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <test_Buzzer+0x34>
		buzzer_SetVolume(25);
 800266e:	2019      	movs	r0, #25
 8002670:	f7fe fd38 	bl	80010e4 <buzzer_SetVolume>
	}

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}

08002678 <send_uart>:

void send_uart(){
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	uart_Rs232SendString("Power(mW): ");
 800267c:	4818      	ldr	r0, [pc, #96]	; (80026e0 <send_uart+0x68>)
 800267e:	f000 fc85 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendFloat(power);
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <send_uart+0x6c>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	eeb0 0a67 	vmov.f32	s0, s15
 800268c:	f000 fcee 	bl	800306c <uart_Rs232SendFloat>
	uart_Rs232SendString("-");
 8002690:	4815      	ldr	r0, [pc, #84]	; (80026e8 <send_uart+0x70>)
 8002692:	f000 fc7b 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendString("Light: ");
 8002696:	4815      	ldr	r0, [pc, #84]	; (80026ec <send_uart+0x74>)
 8002698:	f000 fc78 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendString(light_str);
 800269c:	4814      	ldr	r0, [pc, #80]	; (80026f0 <send_uart+0x78>)
 800269e:	f000 fc75 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendString("-");
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <send_uart+0x70>)
 80026a4:	f000 fc72 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendString("Humidity(%): ");
 80026a8:	4812      	ldr	r0, [pc, #72]	; (80026f4 <send_uart+0x7c>)
 80026aa:	f000 fc6f 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendFloat(humidity);
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <send_uart+0x80>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	f000 fcd8 	bl	800306c <uart_Rs232SendFloat>
	uart_Rs232SendString("-");
 80026bc:	480a      	ldr	r0, [pc, #40]	; (80026e8 <send_uart+0x70>)
 80026be:	f000 fc65 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendString("Temperature(oC): ");
 80026c2:	480e      	ldr	r0, [pc, #56]	; (80026fc <send_uart+0x84>)
 80026c4:	f000 fc62 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendFloat(temp);
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <send_uart+0x88>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eeb0 0a67 	vmov.f32	s0, s15
 80026d2:	f000 fccb 	bl	800306c <uart_Rs232SendFloat>
	uart_Rs232SendString("\n");
 80026d6:	480b      	ldr	r0, [pc, #44]	; (8002704 <send_uart+0x8c>)
 80026d8:	f000 fc58 	bl	8002f8c <uart_Rs232SendString>
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	080098f4 	.word	0x080098f4
 80026e4:	200000a8 	.word	0x200000a8
 80026e8:	08009900 	.word	0x08009900
 80026ec:	08009904 	.word	0x08009904
 80026f0:	200000ac 	.word	0x200000ac
 80026f4:	0800990c 	.word	0x0800990c
 80026f8:	200000b8 	.word	0x200000b8
 80026fc:	0800991c 	.word	0x0800991c
 8002700:	200000bc 	.word	0x200000bc
 8002704:	08009930 	.word	0x08009930

08002708 <send_uart_warning>:

void send_uart_warning(){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	uart_Rs232SendString("Humidityis bigger than 70%, current: ");
 800270c:	4807      	ldr	r0, [pc, #28]	; (800272c <send_uart_warning+0x24>)
 800270e:	f000 fc3d 	bl	8002f8c <uart_Rs232SendString>
	uart_Rs232SendFloat(humidity);
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <send_uart_warning+0x28>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	eeb0 0a67 	vmov.f32	s0, s15
 800271c:	f000 fca6 	bl	800306c <uart_Rs232SendFloat>
	uart_Rs232SendString("\n");
 8002720:	4804      	ldr	r0, [pc, #16]	; (8002734 <send_uart_warning+0x2c>)
 8002722:	f000 fc33 	bl	8002f8c <uart_Rs232SendString>
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	08009934 	.word	0x08009934
 8002730:	200000b8 	.word	0x200000b8
 8002734:	08009930 	.word	0x08009930

08002738 <buzzer_warning>:

void buzzer_warning(){
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
	if (state_buzzer == 1){
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <buzzer_warning+0x2c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d109      	bne.n	8002758 <buzzer_warning+0x20>
		buzzer_SetVolume(50);
 8002744:	2032      	movs	r0, #50	; 0x32
 8002746:	f7fe fccd 	bl	80010e4 <buzzer_SetVolume>
		HAL_Delay(100);
 800274a:	2064      	movs	r0, #100	; 0x64
 800274c:	f000 fe32 	bl	80033b4 <HAL_Delay>
		buzzer_SetVolume(0);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe fcc7 	bl	80010e4 <buzzer_SetVolume>

	}
	else{
		buzzer_SetVolume(0);
	}
}
 8002756:	e002      	b.n	800275e <buzzer_warning+0x26>
		buzzer_SetVolume(0);
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe fcc3 	bl	80010e4 <buzzer_SetVolume>
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200000c4 	.word	0x200000c4

08002768 <test_led7seg>:

void test_led7seg(){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	led7_SetDigit(ds3231_hours / 10, 0, 0);
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <test_led7seg+0x7c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <test_led7seg+0x80>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	08db      	lsrs	r3, r3, #3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fcae 	bl	80020e0 <led7_SetDigit>
	led7_SetDigit(ds3231_hours % 10, 1, 0);
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <test_led7seg+0x7c>)
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <test_led7seg+0x80>)
 800278a:	fba3 1302 	umull	r1, r3, r3, r2
 800278e:	08d9      	lsrs	r1, r3, #3
 8002790:	460b      	mov	r3, r1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2200      	movs	r2, #0
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fc9d 	bl	80020e0 <led7_SetDigit>
	led7_SetDigit(ds3231_min / 10, 2, 0);
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <test_led7seg+0x84>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <test_led7seg+0x80>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	08db      	lsrs	r3, r3, #3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fc91 	bl	80020e0 <led7_SetDigit>
	led7_SetDigit(ds3231_min % 10, 3, 0);
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <test_led7seg+0x84>)
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <test_led7seg+0x80>)
 80027c4:	fba3 1302 	umull	r1, r3, r3, r2
 80027c8:	08d9      	lsrs	r1, r3, #3
 80027ca:	460b      	mov	r3, r1
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2200      	movs	r2, #0
 80027d8:	2103      	movs	r1, #3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fc80 	bl	80020e0 <led7_SetDigit>
//	led7_SetDigit(1, 0, 0);
//	led7_SetDigit(2, 1, 0);
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200001b5 	.word	0x200001b5
 80027e8:	cccccccd 	.word	0xcccccccd
 80027ec:	200001b2 	.word	0x200001b2

080027f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f4:	b672      	cpsid	i
}
 80027f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <Error_Handler+0x8>
	...

080027fc <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002800:	2205      	movs	r2, #5
 8002802:	4903      	ldr	r1, [pc, #12]	; (8002810 <sensor_init+0x14>)
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <sensor_init+0x18>)
 8002806:	f000 fe3d 	bl	8003484 <HAL_ADC_Start_DMA>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200002a0 	.word	0x200002a0
 8002814:	200000e8 	.word	0x200000e8

08002818 <sensor_Read>:

void sensor_Read(){
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800281c:	2205      	movs	r2, #5
 800281e:	4903      	ldr	r1, [pc, #12]	; (800282c <sensor_Read+0x14>)
 8002820:	4803      	ldr	r0, [pc, #12]	; (8002830 <sensor_Read+0x18>)
 8002822:	f000 fe2f 	bl	8003484 <HAL_ADC_Start_DMA>
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200002a0 	.word	0x200002a0
 8002830:	200000e8 	.word	0x200000e8

08002834 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <sensor_GetLight+0x14>)
 800283a:	889b      	ldrh	r3, [r3, #4]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	200002a0 	.word	0x200002a0

0800284c <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <sensor_GetPotentiometer+0x14>)
 8002852:	88db      	ldrh	r3, [r3, #6]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	200002a0 	.word	0x200002a0
 8002864:	00000000 	.word	0x00000000

08002868 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <sensor_GetVoltage+0x70>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002878:	ee17 0a90 	vmov	r0, s15
 800287c:	f7fd fe5c 	bl	8000538 <__aeabi_f2d>
 8002880:	a311      	add	r3, pc, #68	; (adr r3, 80028c8 <sensor_GetVoltage+0x60>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fd feaf 	bl	80005e8 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <sensor_GetVoltage+0x74>)
 8002898:	f7fd fea6 	bl	80005e8 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	a30a      	add	r3, pc, #40	; (adr r3, 80028d0 <sensor_GetVoltage+0x68>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd ffc7 	bl	800083c <__aeabi_ddiv>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f7fe f8a9 	bl	8000a0c <__aeabi_d2f>
 80028ba:	4603      	mov	r3, r0
 80028bc:	ee07 3a90 	vmov	s15, r3
}
 80028c0:	eeb0 0a67 	vmov.f32	s0, s15
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	66666666 	.word	0x66666666
 80028cc:	400a6666 	.word	0x400a6666
 80028d0:	cccccccd 	.word	0xcccccccd
 80028d4:	40b908ac 	.word	0x40b908ac
 80028d8:	200002a0 	.word	0x200002a0
 80028dc:	40280000 	.word	0x40280000

080028e0 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 80028e4:	4b28      	ldr	r3, [pc, #160]	; (8002988 <sensor_GetCurrent+0xa8>)
 80028e6:	885b      	ldrh	r3, [r3, #2]
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f0:	ee17 0a90 	vmov	r0, s15
 80028f4:	f7fd fe20 	bl	8000538 <__aeabi_f2d>
 80028f8:	a31f      	add	r3, pc, #124	; (adr r3, 8002978 <sensor_GetCurrent+0x98>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd fe73 	bl	80005e8 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b1f      	ldr	r3, [pc, #124]	; (800298c <sensor_GetCurrent+0xac>)
 8002910:	f7fd fe6a 	bl	80005e8 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	a318      	add	r3, pc, #96	; (adr r3, 8002980 <sensor_GetCurrent+0xa0>)
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fd ff8b 	bl	800083c <__aeabi_ddiv>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <sensor_GetCurrent+0xb0>)
 8002934:	f7fd fca0 	bl	8000278 <__aeabi_dsub>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <sensor_GetCurrent+0xb4>)
 8002946:	f7fd fe4f 	bl	80005e8 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <sensor_GetCurrent+0xb0>)
 8002958:	f7fd ff70 	bl	800083c <__aeabi_ddiv>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f7fe f852 	bl	8000a0c <__aeabi_d2f>
 8002968:	4603      	mov	r3, r0
 800296a:	ee07 3a90 	vmov	s15, r3
}
 800296e:	eeb0 0a67 	vmov.f32	s0, s15
 8002972:	bd80      	pop	{r7, pc}
 8002974:	f3af 8000 	nop.w
 8002978:	66666666 	.word	0x66666666
 800297c:	400a6666 	.word	0x400a6666
 8002980:	147ae148 	.word	0x147ae148
 8002984:	40a4b2ee 	.word	0x40a4b2ee
 8002988:	200002a0 	.word	0x200002a0
 800298c:	408f4000 	.word	0x408f4000
 8002990:	40040000 	.word	0x40040000
 8002994:	40140000 	.word	0x40140000

08002998 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <sensor_GetTemperature+0x30>)
 800299e:	891b      	ldrh	r3, [r3, #8]
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80029cc <sensor_GetTemperature+0x34>
 80029ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029d0 <sensor_GetTemperature+0x38>
 80029b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80029bc:	eeb0 0a67 	vmov.f32	s0, s15
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	200002a0 	.word	0x200002a0
 80029cc:	43a50000 	.word	0x43a50000
 80029d0:	457ff000 	.word	0x457ff000

080029d4 <timer_init>:

uint16_t flag_timer_senduart = 0;
uint16_t timer_senduart_counter = 0;
uint16_t timer_senduart_MUL = 0;

void timer_init(){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <timer_init+0x10>)
 80029da:	f004 fa75 	bl	8006ec8 <HAL_TIM_Base_Start_IT>
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000034c 	.word	0x2000034c

080029e8 <setTimer2>:

void setTimer2(uint16_t duration){
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <setTimer2+0x2c>)
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <setTimer2+0x2c>)
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <setTimer2+0x30>)
 80029fe:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <setTimer2+0x34>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	801a      	strh	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200000ce 	.word	0x200000ce
 8002a18:	200000cc 	.word	0x200000cc
 8002a1c:	200000ca 	.word	0x200000ca

08002a20 <setTimerSendUart>:

void setTimerSendUart(uint16_t duration){
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
	timer_senduart_MUL = duration/TIMER_CYCLE_2;
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <setTimerSendUart+0x2c>)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	8013      	strh	r3, [r2, #0]
	timer_senduart_counter = timer_senduart_MUL;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <setTimerSendUart+0x2c>)
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <setTimerSendUart+0x30>)
 8002a36:	801a      	strh	r2, [r3, #0]
	flag_timer_senduart = 0;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <setTimerSendUart+0x34>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	801a      	strh	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200000d4 	.word	0x200000d4
 8002a50:	200000d2 	.word	0x200000d2
 8002a54:	200000d0 	.word	0x200000d0

08002a58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d12b      	bne.n	8002ac2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a7c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a92:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer_senduart_counter > 0){
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_TIM_PeriodElapsedCallback+0x66>
			timer_senduart_counter--;
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002aa6:	801a      	strh	r2, [r3, #0]
			if(timer_senduart_counter == 0){
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer_senduart = 1;
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	801a      	strh	r2, [r3, #0]
				timer_senduart_counter = timer_senduart_MUL;
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ab8:	881a      	ldrh	r2, [r3, #0]
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002abc:	801a      	strh	r2, [r3, #0]
			}
		}

		led7_Scan();
 8002abe:	f7ff fa83 	bl	8001fc8 <led7_Scan>
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200000cc 	.word	0x200000cc
 8002ad0:	200000ca 	.word	0x200000ca
 8002ad4:	200000ce 	.word	0x200000ce
 8002ad8:	200000d2 	.word	0x200000d2
 8002adc:	200000d0 	.word	0x200000d0
 8002ae0:	200000d4 	.word	0x200000d4

08002ae4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002aea:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b30:	220a      	movs	r2, #10
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b34:	4804      	ldr	r0, [pc, #16]	; (8002b48 <MX_SPI1_Init+0x64>)
 8002b36:	f003 fb8b 	bl	8006250 <HAL_SPI_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b40:	f7ff fe56 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200002ac 	.word	0x200002ac
 8002b4c:	40013000 	.word	0x40013000

08002b50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <HAL_SPI_MspInit+0x84>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d12b      	bne.n	8002bca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_SPI_MspInit+0x88>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <HAL_SPI_MspInit+0x88>)
 8002b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_SPI_MspInit+0x88>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_SPI_MspInit+0x88>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_SPI_MspInit+0x88>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_SPI_MspInit+0x88>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002baa:	2338      	movs	r3, #56	; 0x38
 8002bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bba:	2305      	movs	r3, #5
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4805      	ldr	r0, [pc, #20]	; (8002bdc <HAL_SPI_MspInit+0x8c>)
 8002bc6:	f001 fd3f 	bl	8004648 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3728      	adds	r7, #40	; 0x28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40013000 	.word	0x40013000
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020400 	.word	0x40020400

08002be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <NMI_Handler+0x4>

08002c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <HardFault_Handler+0x4>

08002c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <MemManage_Handler+0x4>

08002c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <BusFault_Handler+0x4>

08002c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <UsageFault_Handler+0x4>

08002c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7c:	f000 fb7a 	bl	8003374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <TIM2_IRQHandler+0x10>)
 8002c8a:	f004 faaf 	bl	80071ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	2000034c 	.word	0x2000034c

08002c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <USART1_IRQHandler+0x10>)
 8002c9e:	f005 fa0f 	bl	80080c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200003f8 	.word	0x200003f8

08002cac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <DMA2_Stream0_IRQHandler+0x10>)
 8002cb2:	f001 fa5f 	bl	8004174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000130 	.word	0x20000130

08002cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <_sbrk+0x5c>)
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <_sbrk+0x60>)
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <_sbrk+0x64>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <_sbrk+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf0:	f006 f96e 	bl	8008fd0 <__errno>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e009      	b.n	8002d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <_sbrk+0x64>)
 8002d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20020000 	.word	0x20020000
 8002d20:	00000400 	.word	0x00000400
 8002d24:	200000d8 	.word	0x200000d8
 8002d28:	20000450 	.word	0x20000450

08002d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <SystemInit+0x20>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <SystemInit+0x20>)
 8002d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d64:	463b      	mov	r3, r7
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002d76:	f240 3247 	movw	r2, #839	; 0x347
 8002d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002d84:	2263      	movs	r2, #99	; 0x63
 8002d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d94:	4813      	ldr	r0, [pc, #76]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002d96:	f004 f847 	bl	8006e28 <HAL_TIM_Base_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002da0:	f7ff fd26 	bl	80027f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	4619      	mov	r1, r3
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002db2:	f004 fbe5 	bl	8007580 <HAL_TIM_ConfigClockSource>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002dbc:	f7ff fd18 	bl	80027f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dc8:	463b      	mov	r3, r7
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_TIM2_Init+0x94>)
 8002dce:	f004 ffd7 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002dd8:	f7ff fd0a 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ddc:	bf00      	nop
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2000034c 	.word	0x2000034c

08002de8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e02:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <MX_TIM13_Init+0x98>)
 8002e04:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e08:	f240 3247 	movw	r2, #839	; 0x347
 8002e0c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e16:	2263      	movs	r2, #99	; 0x63
 8002e18:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e28:	f003 fffe 	bl	8006e28 <HAL_TIM_Base_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002e32:	f7ff fcdd 	bl	80027f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002e36:	4811      	ldr	r0, [pc, #68]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e38:	f004 f8b6 	bl	8006fa8 <HAL_TIM_PWM_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002e42:	f7ff fcd5 	bl	80027f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e46:	2360      	movs	r3, #96	; 0x60
 8002e48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4807      	ldr	r0, [pc, #28]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e5e:	f004 facd 	bl	80073fc <HAL_TIM_PWM_ConfigChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002e68:	f7ff fcc2 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002e6c:	4803      	ldr	r0, [pc, #12]	; (8002e7c <MX_TIM13_Init+0x94>)
 8002e6e:	f000 f845 	bl	8002efc <HAL_TIM_MspPostInit>

}
 8002e72:	bf00      	nop
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000304 	.word	0x20000304
 8002e80:	40001c00 	.word	0x40001c00

08002e84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d116      	bne.n	8002ec4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_TIM_Base_MspInit+0x70>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_TIM_Base_MspInit+0x70>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_TIM_Base_MspInit+0x70>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	201c      	movs	r0, #28
 8002eb8:	f000 ff8d 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ebc:	201c      	movs	r0, #28
 8002ebe:	f000 ffa6 	bl	8003e0e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002ec2:	e012      	b.n	8002eea <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <HAL_TIM_Base_MspInit+0x74>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10d      	bne.n	8002eea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_TIM_Base_MspInit+0x70>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_TIM_Base_MspInit+0x70>)
 8002ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_TIM_Base_MspInit+0x70>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40001c00 	.word	0x40001c00

08002efc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_TIM_MspPostInit+0x68>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11e      	bne.n	8002f5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f28:	f043 0320 	orr.w	r3, r3, #32
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f4c:	2309      	movs	r3, #9
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_TIM_MspPostInit+0x70>)
 8002f58:	f001 fb76 	bl	8004648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40001c00 	.word	0x40001c00
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40021400 	.word	0x40021400

08002f70 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f74:	2201      	movs	r2, #1
 8002f76:	4903      	ldr	r1, [pc, #12]	; (8002f84 <uart_init_rs232+0x14>)
 8002f78:	4803      	ldr	r0, [pc, #12]	; (8002f88 <uart_init_rs232+0x18>)
 8002f7a:	f005 f870 	bl	800805e <HAL_UART_Receive_IT>
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200000dc 	.word	0x200000dc
 8002f88:	200003f8 	.word	0x200003f8

08002f8c <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <uart_Rs232SendString+0x28>)
 8002f98:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <uart_Rs232SendString+0x2c>)
 8002f9a:	f006 f84b 	bl	8009034 <siprintf>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	4904      	ldr	r1, [pc, #16]	; (8002fb8 <uart_Rs232SendString+0x2c>)
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <uart_Rs232SendString+0x30>)
 8002fa8:	f004 ffc7 	bl	8007f3a <HAL_UART_Transmit>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	0800995c 	.word	0x0800995c
 8002fb8:	20000394 	.word	0x20000394
 8002fbc:	200003f8 	.word	0x200003f8

08002fc0 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8002fce:	4824      	ldr	r0, [pc, #144]	; (8003060 <uart_Rs232SendNum+0xa0>)
 8002fd0:	f7ff ffdc 	bl	8002f8c <uart_Rs232SendString>
		return;
 8002fd4:	e040      	b.n	8003058 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8002fda:	230a      	movs	r3, #10
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	e038      	b.n	8003052 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	200a      	movs	r0, #10
 8002fe8:	f7fe fd56 	bl	8001a98 <mypow>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d315      	bcc.n	8003022 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	4619      	mov	r1, r3
 8003000:	200a      	movs	r0, #10
 8003002:	f7fe fd49 	bl	8001a98 <mypow>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4914      	ldr	r1, [pc, #80]	; (8003064 <uart_Rs232SendNum+0xa4>)
 8003014:	4814      	ldr	r0, [pc, #80]	; (8003068 <uart_Rs232SendNum+0xa8>)
 8003016:	f006 f80d 	bl	8009034 <siprintf>
            uart_Rs232SendString(msg);
 800301a:	4813      	ldr	r0, [pc, #76]	; (8003068 <uart_Rs232SendNum+0xa8>)
 800301c:	f7ff ffb6 	bl	8002f8c <uart_Rs232SendString>
 8003020:	e005      	b.n	800302e <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <uart_Rs232SendNum+0xa0>)
 800302a:	f7ff ffaf 	bl	8002f8c <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3b01      	subs	r3, #1
 8003032:	4619      	mov	r1, r3
 8003034:	200a      	movs	r0, #10
 8003036:	f7fe fd2f 	bl	8001a98 <mypow>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	fbb3 f1f2 	udiv	r1, r3, r2
 8003044:	fb02 f201 	mul.w	r2, r2, r1
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3b01      	subs	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	dcc3      	bgt.n	8002fe0 <uart_Rs232SendNum+0x20>
    }
}
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	08009960 	.word	0x08009960
 8003064:	08009964 	.word	0x08009964
 8003068:	20000394 	.word	0x20000394

0800306c <uart_Rs232SendFloat>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_Rs232SendFloat(float num){
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	ed87 0a01 	vstr	s0, [r7, #4]
	int integer_part = (int)num;
 8003076:	edd7 7a01 	vldr	s15, [r7, #4]
 800307a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800307e:	ee17 3a90 	vmov	r3, s15
 8003082:	60fb      	str	r3, [r7, #12]
	int fractional_part = (int)((num - integer_part) * 100); // Extract the fractional part (2 decimal places)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003096:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80030c8 <uart_Rs232SendFloat+0x5c>
 800309a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800309e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030a2:	ee17 3a90 	vmov	r3, s15
 80030a6:	60bb      	str	r3, [r7, #8]
	uart_Rs232SendNum(integer_part);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff88 	bl	8002fc0 <uart_Rs232SendNum>

	// Send the decimal point
	uart_Rs232SendString(".");
 80030b0:	4806      	ldr	r0, [pc, #24]	; (80030cc <uart_Rs232SendFloat+0x60>)
 80030b2:	f7ff ff6b 	bl	8002f8c <uart_Rs232SendString>

	// Format the fractional part with zero padding
	uart_Rs232SendNum(fractional_part);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff81 	bl	8002fc0 <uart_Rs232SendNum>
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	42c80000 	.word	0x42c80000
 80030cc:	0800996c 	.word	0x0800996c

080030d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_UART_RxCpltCallback+0x30>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10a      	bne.n	80030f8 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80030e2:	230a      	movs	r3, #10
 80030e4:	2201      	movs	r2, #1
 80030e6:	4907      	ldr	r1, [pc, #28]	; (8003104 <HAL_UART_RxCpltCallback+0x34>)
 80030e8:	4807      	ldr	r0, [pc, #28]	; (8003108 <HAL_UART_RxCpltCallback+0x38>)
 80030ea:	f004 ff26 	bl	8007f3a <HAL_UART_Transmit>

		// turn on the receivce interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80030ee:	2201      	movs	r2, #1
 80030f0:	4904      	ldr	r1, [pc, #16]	; (8003104 <HAL_UART_RxCpltCallback+0x34>)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <HAL_UART_RxCpltCallback+0x38>)
 80030f4:	f004 ffb3 	bl	800805e <HAL_UART_Receive_IT>
	}
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40011000 	.word	0x40011000
 8003104:	200000dc 	.word	0x200000dc
 8003108:	200003f8 	.word	0x200003f8

0800310c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <MX_USART1_UART_Init+0x50>)
 8003114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800311c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003132:	220c      	movs	r2, #12
 8003134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003144:	f004 feac 	bl	8007ea0 <HAL_UART_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800314e:	f7ff fb4f 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200003f8 	.word	0x200003f8
 800315c:	40011000 	.word	0x40011000

08003160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_UART_MspInit+0x94>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d134      	bne.n	80031ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_UART_MspInit+0x98>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_UART_MspInit+0x98>)
 800318c:	f043 0310 	orr.w	r3, r3, #16
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_UART_MspInit+0x98>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	2303      	movs	r3, #3
 80031ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031cc:	2307      	movs	r3, #7
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4619      	mov	r1, r3
 80031d6:	4809      	ldr	r0, [pc, #36]	; (80031fc <HAL_UART_MspInit+0x9c>)
 80031d8:	f001 fa36 	bl	8004648 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031dc:	2200      	movs	r2, #0
 80031de:	2100      	movs	r1, #0
 80031e0:	2025      	movs	r0, #37	; 0x25
 80031e2:	f000 fdf8 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031e6:	2025      	movs	r0, #37	; 0x25
 80031e8:	f000 fe11 	bl	8003e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80031ec:	bf00      	nop
 80031ee:	3728      	adds	r7, #40	; 0x28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020000 	.word	0x40020000

08003200 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	b2da      	uxtb	r2, r3
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2db      	uxtb	r3, r3
 8003222:	4413      	add	r3, r2
 8003224:	b2db      	uxtb	r3, r3
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <DEC2BCD+0x44>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	08db      	lsrs	r3, r3, #3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	b258      	sxtb	r0, r3
 800324e:	79fa      	ldrb	r2, [r7, #7]
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <DEC2BCD+0x44>)
 8003252:	fba3 1302 	umull	r1, r3, r3, r2
 8003256:	08d9      	lsrs	r1, r3, #3
 8003258:	460b      	mov	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	b25b      	sxtb	r3, r3
 8003266:	4303      	orrs	r3, r0
 8003268:	b25b      	sxtb	r3, r3
 800326a:	b2db      	uxtb	r3, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	cccccccd 	.word	0xcccccccd

0800327c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800327c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003280:	480d      	ldr	r0, [pc, #52]	; (80032b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003282:	490e      	ldr	r1, [pc, #56]	; (80032bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003284:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003288:	e002      	b.n	8003290 <LoopCopyDataInit>

0800328a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800328a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800328c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328e:	3304      	adds	r3, #4

08003290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003294:	d3f9      	bcc.n	800328a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003298:	4c0b      	ldr	r4, [pc, #44]	; (80032c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800329c:	e001      	b.n	80032a2 <LoopFillZerobss>

0800329e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032a0:	3204      	adds	r2, #4

080032a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a4:	d3fb      	bcc.n	800329e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032a6:	f7ff fd41 	bl	8002d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032aa:	f005 fe97 	bl	8008fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ae:	f7fe ff3b 	bl	8002128 <main>
  bx  lr    
 80032b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80032c0:	0800c954 	.word	0x0800c954
  ldr r2, =_sbss
 80032c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80032c8:	20000450 	.word	0x20000450

080032cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032cc:	e7fe      	b.n	80032cc <ADC_IRQHandler>
	...

080032d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <HAL_Init+0x40>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_Init+0x40>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_Init+0x40>)
 80032e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_Init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_Init+0x40>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f8:	2003      	movs	r0, #3
 80032fa:	f000 fd61 	bl	8003dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fe:	200f      	movs	r0, #15
 8003300:	f000 f808 	bl	8003314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003304:	f7ff fc6c 	bl	8002be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00

08003314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_InitTick+0x54>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_InitTick+0x58>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800332a:	fbb3 f3f1 	udiv	r3, r3, r1
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fd79 	bl	8003e2a <HAL_SYSTICK_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e00e      	b.n	8003360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d80a      	bhi.n	800335e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003348:	2200      	movs	r2, #0
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	f000 fd41 	bl	8003dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003354:	4a06      	ldr	r2, [pc, #24]	; (8003370 <HAL_InitTick+0x5c>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000010 	.word	0x20000010
 800336c:	20000018 	.word	0x20000018
 8003370:	20000014 	.word	0x20000014

08003374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x20>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_IncTick+0x24>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4413      	add	r3, r2
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_IncTick+0x24>)
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000018 	.word	0x20000018
 8003398:	2000043c 	.word	0x2000043c

0800339c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_GetTick+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	2000043c 	.word	0x2000043c

080033b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7ff ffee 	bl	800339c <HAL_GetTick>
 80033c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d005      	beq.n	80033da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_Delay+0x44>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033da:	bf00      	nop
 80033dc:	f7ff ffde 	bl	800339c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d8f7      	bhi.n	80033dc <HAL_Delay+0x28>
  {
  }
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000018 	.word	0x20000018

080033fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e033      	b.n	800347a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fd4c 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d118      	bne.n	800346c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003442:	f023 0302 	bic.w	r3, r3, #2
 8003446:	f043 0202 	orr.w	r2, r3, #2
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa68 	bl	8003924 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
 800346a:	e001      	b.n	8003470 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_Start_DMA+0x1e>
 800349e:	2302      	movs	r3, #2
 80034a0:	e0e9      	b.n	8003676 <HAL_ADC_Start_DMA+0x1f2>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d018      	beq.n	80034ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034c8:	4b6d      	ldr	r3, [pc, #436]	; (8003680 <HAL_ADC_Start_DMA+0x1fc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6d      	ldr	r2, [pc, #436]	; (8003684 <HAL_ADC_Start_DMA+0x200>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0c9a      	lsrs	r2, r3, #18
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034dc:	e002      	b.n	80034e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f9      	bne.n	80034de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f8:	d107      	bne.n	800350a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003508:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 80a1 	bne.w	800365c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003544:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003558:	d106      	bne.n	8003568 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f023 0206 	bic.w	r2, r3, #6
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
 8003566:	e002      	b.n	800356e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003576:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_ADC_Start_DMA+0x204>)
 8003578:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	4a43      	ldr	r2, [pc, #268]	; (800368c <HAL_ADC_Start_DMA+0x208>)
 8003580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	4a42      	ldr	r2, [pc, #264]	; (8003690 <HAL_ADC_Start_DMA+0x20c>)
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	4a41      	ldr	r2, [pc, #260]	; (8003694 <HAL_ADC_Start_DMA+0x210>)
 8003590:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800359a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	334c      	adds	r3, #76	; 0x4c
 80035c6:	4619      	mov	r1, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f000 fce8 	bl	8003fa0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d12a      	bne.n	8003632 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_ADC_Start_DMA+0x214>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d015      	beq.n	8003612 <HAL_ADC_Start_DMA+0x18e>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a2c      	ldr	r2, [pc, #176]	; (800369c <HAL_ADC_Start_DMA+0x218>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d105      	bne.n	80035fc <HAL_ADC_Start_DMA+0x178>
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_ADC_Start_DMA+0x204>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <HAL_ADC_Start_DMA+0x21c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d136      	bne.n	8003674 <HAL_ADC_Start_DMA+0x1f0>
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_ADC_Start_DMA+0x204>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d130      	bne.n	8003674 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d129      	bne.n	8003674 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	e020      	b.n	8003674 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_ADC_Start_DMA+0x214>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d11b      	bne.n	8003674 <HAL_ADC_Start_DMA+0x1f0>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d114      	bne.n	8003674 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	e00b      	b.n	8003674 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f043 0210 	orr.w	r2, r3, #16
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	f043 0201 	orr.w	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000010 	.word	0x20000010
 8003684:	431bde83 	.word	0x431bde83
 8003688:	40012300 	.word	0x40012300
 800368c:	08003b1d 	.word	0x08003b1d
 8003690:	08003bd7 	.word	0x08003bd7
 8003694:	08003bf3 	.word	0x08003bf3
 8003698:	40012000 	.word	0x40012000
 800369c:	40012100 	.word	0x40012100
 80036a0:	40012200 	.word	0x40012200

080036a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x1c>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e105      	b.n	8003908 <HAL_ADC_ConfigChannel+0x228>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b09      	cmp	r3, #9
 800370a:	d925      	bls.n	8003758 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68d9      	ldr	r1, [r3, #12]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	3b1e      	subs	r3, #30
 8003722:	2207      	movs	r2, #7
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43da      	mvns	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	400a      	ands	r2, r1
 8003730:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68d9      	ldr	r1, [r3, #12]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	4618      	mov	r0, r3
 8003744:	4603      	mov	r3, r0
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4403      	add	r3, r0
 800374a:	3b1e      	subs	r3, #30
 800374c:	409a      	lsls	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e022      	b.n	800379e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6919      	ldr	r1, [r3, #16]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	2207      	movs	r2, #7
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43da      	mvns	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	400a      	ands	r2, r1
 800377a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6919      	ldr	r1, [r3, #16]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	4618      	mov	r0, r3
 800378e:	4603      	mov	r3, r0
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4403      	add	r3, r0
 8003794:	409a      	lsls	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d824      	bhi.n	80037f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	3b05      	subs	r3, #5
 80037b8:	221f      	movs	r2, #31
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	400a      	ands	r2, r1
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	4618      	mov	r0, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	3b05      	subs	r3, #5
 80037e2:	fa00 f203 	lsl.w	r2, r0, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34
 80037ee:	e04c      	b.n	800388a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d824      	bhi.n	8003842 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	3b23      	subs	r3, #35	; 0x23
 800380a:	221f      	movs	r2, #31
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43da      	mvns	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	400a      	ands	r2, r1
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	4618      	mov	r0, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	3b23      	subs	r3, #35	; 0x23
 8003834:	fa00 f203 	lsl.w	r2, r0, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
 8003840:	e023      	b.n	800388a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	3b41      	subs	r3, #65	; 0x41
 8003854:	221f      	movs	r2, #31
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	400a      	ands	r2, r1
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	4618      	mov	r0, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	3b41      	subs	r3, #65	; 0x41
 800387e:	fa00 f203 	lsl.w	r2, r0, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800388a:	4b22      	ldr	r3, [pc, #136]	; (8003914 <HAL_ADC_ConfigChannel+0x234>)
 800388c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a21      	ldr	r2, [pc, #132]	; (8003918 <HAL_ADC_ConfigChannel+0x238>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d109      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1cc>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b12      	cmp	r3, #18
 800389e:	d105      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <HAL_ADC_ConfigChannel+0x238>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d123      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x21e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d003      	beq.n	80038c6 <HAL_ADC_ConfigChannel+0x1e6>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b11      	cmp	r3, #17
 80038c4:	d11b      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d111      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_ADC_ConfigChannel+0x23c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_ADC_ConfigChannel+0x240>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	0c9a      	lsrs	r2, r3, #18
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f0:	e002      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f9      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40012300 	.word	0x40012300
 8003918:	40012000 	.word	0x40012000
 800391c:	20000010 	.word	0x20000010
 8003920:	431bde83 	.word	0x431bde83

08003924 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800392c:	4b79      	ldr	r3, [pc, #484]	; (8003b14 <ADC_Init+0x1f0>)
 800392e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	021a      	lsls	r2, r3, #8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800397c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <ADC_Init+0x1f4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6899      	ldr	r1, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	e00f      	b.n	8003a22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0202 	bic.w	r2, r2, #2
 8003a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7e1b      	ldrb	r3, [r3, #24]
 8003a3c:	005a      	lsls	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	035a      	lsls	r2, r3, #13
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	e007      	b.n	8003a98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	051a      	lsls	r2, r3, #20
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6899      	ldr	r1, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ada:	025a      	lsls	r2, r3, #9
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6899      	ldr	r1, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	029a      	lsls	r2, r3, #10
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40012300 	.word	0x40012300
 8003b18:	0f000001 	.word	0x0f000001

08003b1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d13c      	bne.n	8003bb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d12b      	bne.n	8003ba8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d127      	bne.n	8003ba8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d119      	bne.n	8003ba8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0220 	bic.w	r2, r2, #32
 8003b82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fd7b 	bl	80036a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bae:	e00e      	b.n	8003bce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7ff fd85 	bl	80036cc <HAL_ADC_ErrorCallback>
}
 8003bc2:	e004      	b.n	8003bce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7ff fd67 	bl	80036b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2240      	movs	r2, #64	; 0x40
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f043 0204 	orr.w	r2, r3, #4
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fd5a 	bl	80036cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <__NVIC_GetPriorityGrouping+0x18>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0307 	and.w	r3, r3, #7
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db0b      	blt.n	8003cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4907      	ldr	r1, [pc, #28]	; (8003cbc <__NVIC_EnableIRQ+0x38>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000e100 	.word	0xe000e100

08003cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db0a      	blt.n	8003cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	490c      	ldr	r1, [pc, #48]	; (8003d0c <__NVIC_SetPriority+0x4c>)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce8:	e00a      	b.n	8003d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4908      	ldr	r1, [pc, #32]	; (8003d10 <__NVIC_SetPriority+0x50>)
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	761a      	strb	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000e100 	.word	0xe000e100
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f1c3 0307 	rsb	r3, r3, #7
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	bf28      	it	cs
 8003d32:	2304      	movcs	r3, #4
 8003d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d902      	bls.n	8003d44 <NVIC_EncodePriority+0x30>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3b03      	subs	r3, #3
 8003d42:	e000      	b.n	8003d46 <NVIC_EncodePriority+0x32>
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	401a      	ands	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	4313      	orrs	r3, r2
         );
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d8c:	d301      	bcc.n	8003d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00f      	b.n	8003db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d92:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <SysTick_Config+0x40>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	f7ff ff8e 	bl	8003cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <SysTick_Config+0x40>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <SysTick_Config+0x40>)
 8003dac:	2207      	movs	r2, #7
 8003dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	e000e010 	.word	0xe000e010

08003dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff29 	bl	8003c20 <__NVIC_SetPriorityGrouping>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003de8:	f7ff ff3e 	bl	8003c68 <__NVIC_GetPriorityGrouping>
 8003dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	6978      	ldr	r0, [r7, #20]
 8003df4:	f7ff ff8e 	bl	8003d14 <NVIC_EncodePriority>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff5d 	bl	8003cc0 <__NVIC_SetPriority>
}
 8003e06:	bf00      	nop
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	4603      	mov	r3, r0
 8003e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff31 	bl	8003c84 <__NVIC_EnableIRQ>
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ffa2 	bl	8003d7c <SysTick_Config>
 8003e38:	4603      	mov	r3, r0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e50:	f7ff faa4 	bl	800339c <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e099      	b.n	8003f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e80:	e00f      	b.n	8003ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e82:	f7ff fa8b 	bl	800339c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d908      	bls.n	8003ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2203      	movs	r2, #3
 8003e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e078      	b.n	8003f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e8      	bne.n	8003e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <HAL_DMA_Init+0x158>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d107      	bne.n	8003f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	4313      	orrs	r3, r2
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0307 	bic.w	r3, r3, #7
 8003f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d117      	bne.n	8003f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fb01 	bl	8004550 <DMA_CheckFifoParam>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2240      	movs	r2, #64	; 0x40
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f62:	2301      	movs	r3, #1
 8003f64:	e016      	b.n	8003f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fab8 	bl	80044e4 <DMA_CalcBaseAndBitshift>
 8003f74:	4603      	mov	r3, r0
 8003f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	223f      	movs	r2, #63	; 0x3f
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	f010803f 	.word	0xf010803f

08003fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_DMA_Start_IT+0x26>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e040      	b.n	8004048 <HAL_DMA_Start_IT+0xa8>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d12f      	bne.n	800403a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa4a 	bl	8004488 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	223f      	movs	r2, #63	; 0x3f
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0216 	orr.w	r2, r2, #22
 800400e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0208 	orr.w	r2, r2, #8
 8004026:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e005      	b.n	8004046 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004042:	2302      	movs	r3, #2
 8004044:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004046:	7dfb      	ldrb	r3, [r7, #23]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800405e:	f7ff f99d 	bl	800339c <HAL_GetTick>
 8004062:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d008      	beq.n	8004082 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e052      	b.n	8004128 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0216 	bic.w	r2, r2, #22
 8004090:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <HAL_DMA_Abort+0x62>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0208 	bic.w	r2, r2, #8
 80040c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d2:	e013      	b.n	80040fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040d4:	f7ff f962 	bl	800339c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b05      	cmp	r3, #5
 80040e0:	d90c      	bls.n	80040fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2203      	movs	r2, #3
 80040ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e015      	b.n	8004128 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e4      	bne.n	80040d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	223f      	movs	r2, #63	; 0x3f
 8004110:	409a      	lsls	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d004      	beq.n	800414e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2280      	movs	r2, #128	; 0x80
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e00c      	b.n	8004168 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2205      	movs	r2, #5
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004180:	4b92      	ldr	r3, [pc, #584]	; (80043cc <HAL_DMA_IRQHandler+0x258>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a92      	ldr	r2, [pc, #584]	; (80043d0 <HAL_DMA_IRQHandler+0x25c>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0a9b      	lsrs	r3, r3, #10
 800418c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419e:	2208      	movs	r2, #8
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01a      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0204 	bic.w	r2, r2, #4
 80041c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	2208      	movs	r2, #8
 80041ce:	409a      	lsls	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f043 0201 	orr.w	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	2201      	movs	r2, #1
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d012      	beq.n	8004216 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	2201      	movs	r2, #1
 8004204:	409a      	lsls	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f043 0202 	orr.w	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	2204      	movs	r2, #4
 800421c:	409a      	lsls	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004238:	2204      	movs	r2, #4
 800423a:	409a      	lsls	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f043 0204 	orr.w	r2, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	2210      	movs	r2, #16
 8004252:	409a      	lsls	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d043      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d03c      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	2210      	movs	r2, #16
 8004270:	409a      	lsls	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d018      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d024      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
 80042a2:	e01f      	b.n	80042e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01b      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
 80042b4:	e016      	b.n	80042e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0208 	bic.w	r2, r2, #8
 80042d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	2220      	movs	r2, #32
 80042ea:	409a      	lsls	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 808e 	beq.w	8004412 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8086 	beq.w	8004412 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430a:	2220      	movs	r2, #32
 800430c:	409a      	lsls	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b05      	cmp	r3, #5
 800431c:	d136      	bne.n	800438c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0216 	bic.w	r2, r2, #22
 800432c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800433c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <HAL_DMA_IRQHandler+0x1da>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0208 	bic.w	r2, r2, #8
 800435c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	223f      	movs	r2, #63	; 0x3f
 8004364:	409a      	lsls	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	2b00      	cmp	r3, #0
 8004380:	d07d      	beq.n	800447e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
        }
        return;
 800438a:	e078      	b.n	800447e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01c      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d108      	bne.n	80043ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d030      	beq.n	8004412 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
 80043b8:	e02b      	b.n	8004412 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d027      	beq.n	8004412 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
 80043ca:	e022      	b.n	8004412 <HAL_DMA_IRQHandler+0x29e>
 80043cc:	20000010 	.word	0x20000010
 80043d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0210 	bic.w	r2, r2, #16
 80043f0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	2b00      	cmp	r3, #0
 8004418:	d032      	beq.n	8004480 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d022      	beq.n	800446c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2205      	movs	r2, #5
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3301      	adds	r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	429a      	cmp	r2, r3
 8004448:	d307      	bcc.n	800445a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f2      	bne.n	800443e <HAL_DMA_IRQHandler+0x2ca>
 8004458:	e000      	b.n	800445c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800445a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
 800447c:	e000      	b.n	8004480 <HAL_DMA_IRQHandler+0x30c>
        return;
 800447e:	bf00      	nop
    }
  }
}
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop

08004488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b40      	cmp	r3, #64	; 0x40
 80044b4:	d108      	bne.n	80044c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044c6:	e007      	b.n	80044d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	3b10      	subs	r3, #16
 80044f4:	4a14      	ldr	r2, [pc, #80]	; (8004548 <DMA_CalcBaseAndBitshift+0x64>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044fe:	4a13      	ldr	r2, [pc, #76]	; (800454c <DMA_CalcBaseAndBitshift+0x68>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d909      	bls.n	8004526 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	1d1a      	adds	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	659a      	str	r2, [r3, #88]	; 0x58
 8004524:	e007      	b.n	8004536 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	aaaaaaab 	.word	0xaaaaaaab
 800454c:	0800c908 	.word	0x0800c908

08004550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11f      	bne.n	80045aa <DMA_CheckFifoParam+0x5a>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b03      	cmp	r3, #3
 800456e:	d856      	bhi.n	800461e <DMA_CheckFifoParam+0xce>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <DMA_CheckFifoParam+0x28>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	08004589 	.word	0x08004589
 800457c:	0800459b 	.word	0x0800459b
 8004580:	08004589 	.word	0x08004589
 8004584:	0800461f 	.word	0x0800461f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d046      	beq.n	8004622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004598:	e043      	b.n	8004622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045a2:	d140      	bne.n	8004626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a8:	e03d      	b.n	8004626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b2:	d121      	bne.n	80045f8 <DMA_CheckFifoParam+0xa8>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d837      	bhi.n	800462a <DMA_CheckFifoParam+0xda>
 80045ba:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <DMA_CheckFifoParam+0x70>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045d7 	.word	0x080045d7
 80045c8:	080045d1 	.word	0x080045d1
 80045cc:	080045e9 	.word	0x080045e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      break;
 80045d4:	e030      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d025      	beq.n	800462e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e6:	e022      	b.n	800462e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045f0:	d11f      	bne.n	8004632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045f6:	e01c      	b.n	8004632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d903      	bls.n	8004606 <DMA_CheckFifoParam+0xb6>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d003      	beq.n	800460c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004604:	e018      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
      break;
 800460a:	e015      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e00b      	b.n	8004636 <DMA_CheckFifoParam+0xe6>
      break;
 800461e:	bf00      	nop
 8004620:	e00a      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e008      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
      break;
 8004626:	bf00      	nop
 8004628:	e006      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
      break;
 800462a:	bf00      	nop
 800462c:	e004      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
      break;
 800462e:	bf00      	nop
 8004630:	e002      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
      break;   
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <DMA_CheckFifoParam+0xe8>
      break;
 8004636:	bf00      	nop
    }
  } 
  
  return status; 
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop

08004648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004648:	b480      	push	{r7}
 800464a:	b089      	sub	sp, #36	; 0x24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e16b      	b.n	800493c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004664:	2201      	movs	r2, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	429a      	cmp	r2, r3
 800467e:	f040 815a 	bne.w	8004936 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d005      	beq.n	800469a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004696:	2b02      	cmp	r3, #2
 8004698:	d130      	bne.n	80046fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	2203      	movs	r2, #3
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046d0:	2201      	movs	r2, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 0201 	and.w	r2, r3, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b03      	cmp	r3, #3
 8004706:	d017      	beq.n	8004738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d123      	bne.n	800478c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	08da      	lsrs	r2, r3, #3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3208      	adds	r2, #8
 800474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	220f      	movs	r2, #15
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	08da      	lsrs	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3208      	adds	r2, #8
 8004786:	69b9      	ldr	r1, [r7, #24]
 8004788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0203 	and.w	r2, r3, #3
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80b4 	beq.w	8004936 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	4b60      	ldr	r3, [pc, #384]	; (8004954 <HAL_GPIO_Init+0x30c>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	4a5f      	ldr	r2, [pc, #380]	; (8004954 <HAL_GPIO_Init+0x30c>)
 80047d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047dc:	6453      	str	r3, [r2, #68]	; 0x44
 80047de:	4b5d      	ldr	r3, [pc, #372]	; (8004954 <HAL_GPIO_Init+0x30c>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ea:	4a5b      	ldr	r2, [pc, #364]	; (8004958 <HAL_GPIO_Init+0x310>)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	089b      	lsrs	r3, r3, #2
 80047f0:	3302      	adds	r3, #2
 80047f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	220f      	movs	r2, #15
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4013      	ands	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a52      	ldr	r2, [pc, #328]	; (800495c <HAL_GPIO_Init+0x314>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02b      	beq.n	800486e <HAL_GPIO_Init+0x226>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a51      	ldr	r2, [pc, #324]	; (8004960 <HAL_GPIO_Init+0x318>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d025      	beq.n	800486a <HAL_GPIO_Init+0x222>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a50      	ldr	r2, [pc, #320]	; (8004964 <HAL_GPIO_Init+0x31c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01f      	beq.n	8004866 <HAL_GPIO_Init+0x21e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a4f      	ldr	r2, [pc, #316]	; (8004968 <HAL_GPIO_Init+0x320>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d019      	beq.n	8004862 <HAL_GPIO_Init+0x21a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a4e      	ldr	r2, [pc, #312]	; (800496c <HAL_GPIO_Init+0x324>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_GPIO_Init+0x216>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a4d      	ldr	r2, [pc, #308]	; (8004970 <HAL_GPIO_Init+0x328>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00d      	beq.n	800485a <HAL_GPIO_Init+0x212>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4c      	ldr	r2, [pc, #304]	; (8004974 <HAL_GPIO_Init+0x32c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <HAL_GPIO_Init+0x20e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4b      	ldr	r2, [pc, #300]	; (8004978 <HAL_GPIO_Init+0x330>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_GPIO_Init+0x20a>
 800484e:	2307      	movs	r3, #7
 8004850:	e00e      	b.n	8004870 <HAL_GPIO_Init+0x228>
 8004852:	2308      	movs	r3, #8
 8004854:	e00c      	b.n	8004870 <HAL_GPIO_Init+0x228>
 8004856:	2306      	movs	r3, #6
 8004858:	e00a      	b.n	8004870 <HAL_GPIO_Init+0x228>
 800485a:	2305      	movs	r3, #5
 800485c:	e008      	b.n	8004870 <HAL_GPIO_Init+0x228>
 800485e:	2304      	movs	r3, #4
 8004860:	e006      	b.n	8004870 <HAL_GPIO_Init+0x228>
 8004862:	2303      	movs	r3, #3
 8004864:	e004      	b.n	8004870 <HAL_GPIO_Init+0x228>
 8004866:	2302      	movs	r3, #2
 8004868:	e002      	b.n	8004870 <HAL_GPIO_Init+0x228>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_GPIO_Init+0x228>
 800486e:	2300      	movs	r3, #0
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	f002 0203 	and.w	r2, r2, #3
 8004876:	0092      	lsls	r2, r2, #2
 8004878:	4093      	lsls	r3, r2
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004880:	4935      	ldr	r1, [pc, #212]	; (8004958 <HAL_GPIO_Init+0x310>)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	3302      	adds	r3, #2
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800488e:	4b3b      	ldr	r3, [pc, #236]	; (800497c <HAL_GPIO_Init+0x334>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048b2:	4a32      	ldr	r2, [pc, #200]	; (800497c <HAL_GPIO_Init+0x334>)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048b8:	4b30      	ldr	r3, [pc, #192]	; (800497c <HAL_GPIO_Init+0x334>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048dc:	4a27      	ldr	r2, [pc, #156]	; (800497c <HAL_GPIO_Init+0x334>)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048e2:	4b26      	ldr	r3, [pc, #152]	; (800497c <HAL_GPIO_Init+0x334>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004906:	4a1d      	ldr	r2, [pc, #116]	; (800497c <HAL_GPIO_Init+0x334>)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_GPIO_Init+0x334>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004930:	4a12      	ldr	r2, [pc, #72]	; (800497c <HAL_GPIO_Init+0x334>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b0f      	cmp	r3, #15
 8004940:	f67f ae90 	bls.w	8004664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3724      	adds	r7, #36	; 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	40013800 	.word	0x40013800
 800495c:	40020000 	.word	0x40020000
 8004960:	40020400 	.word	0x40020400
 8004964:	40020800 	.word	0x40020800
 8004968:	40020c00 	.word	0x40020c00
 800496c:	40021000 	.word	0x40021000
 8004970:	40021400 	.word	0x40021400
 8004974:	40021800 	.word	0x40021800
 8004978:	40021c00 	.word	0x40021c00
 800497c:	40013c00 	.word	0x40013c00

08004980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]
 800498c:	4613      	mov	r3, r2
 800498e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004990:	787b      	ldrb	r3, [r7, #1]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800499c:	e003      	b.n	80049a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	041a      	lsls	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	619a      	str	r2, [r3, #24]
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049c4:	887a      	ldrh	r2, [r7, #2]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4013      	ands	r3, r2
 80049ca:	041a      	lsls	r2, r3, #16
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	43d9      	mvns	r1, r3
 80049d0:	887b      	ldrh	r3, [r7, #2]
 80049d2:	400b      	ands	r3, r1
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	619a      	str	r2, [r3, #24]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e12b      	b.n	8004c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fe62 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	; 0x24
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0201 	bic.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a4c:	f001 fbd8 	bl	8006200 <HAL_RCC_GetPCLK1Freq>
 8004a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4a81      	ldr	r2, [pc, #516]	; (8004c5c <HAL_I2C_Init+0x274>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d807      	bhi.n	8004a6c <HAL_I2C_Init+0x84>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a80      	ldr	r2, [pc, #512]	; (8004c60 <HAL_I2C_Init+0x278>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	bf94      	ite	ls
 8004a64:	2301      	movls	r3, #1
 8004a66:	2300      	movhi	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	e006      	b.n	8004a7a <HAL_I2C_Init+0x92>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a7d      	ldr	r2, [pc, #500]	; (8004c64 <HAL_I2C_Init+0x27c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bf94      	ite	ls
 8004a74:	2301      	movls	r3, #1
 8004a76:	2300      	movhi	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0e7      	b.n	8004c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4a78      	ldr	r2, [pc, #480]	; (8004c68 <HAL_I2C_Init+0x280>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	0c9b      	lsrs	r3, r3, #18
 8004a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4a6a      	ldr	r2, [pc, #424]	; (8004c5c <HAL_I2C_Init+0x274>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d802      	bhi.n	8004abc <HAL_I2C_Init+0xd4>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	e009      	b.n	8004ad0 <HAL_I2C_Init+0xe8>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	4a69      	ldr	r2, [pc, #420]	; (8004c6c <HAL_I2C_Init+0x284>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	3301      	adds	r3, #1
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	495c      	ldr	r1, [pc, #368]	; (8004c5c <HAL_I2C_Init+0x274>)
 8004aec:	428b      	cmp	r3, r1
 8004aee:	d819      	bhi.n	8004b24 <HAL_I2C_Init+0x13c>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1e59      	subs	r1, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b04:	400b      	ands	r3, r1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_I2C_Init+0x138>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1e59      	subs	r1, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1e:	e051      	b.n	8004bc4 <HAL_I2C_Init+0x1dc>
 8004b20:	2304      	movs	r3, #4
 8004b22:	e04f      	b.n	8004bc4 <HAL_I2C_Init+0x1dc>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d111      	bne.n	8004b50 <HAL_I2C_Init+0x168>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e58      	subs	r0, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	440b      	add	r3, r1
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e012      	b.n	8004b76 <HAL_I2C_Init+0x18e>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	0099      	lsls	r1, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_Init+0x196>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e022      	b.n	8004bc4 <HAL_I2C_Init+0x1dc>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10e      	bne.n	8004ba4 <HAL_I2C_Init+0x1bc>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1e58      	subs	r0, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	440b      	add	r3, r1
 8004b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b98:	3301      	adds	r3, #1
 8004b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba2:	e00f      	b.n	8004bc4 <HAL_I2C_Init+0x1dc>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1e58      	subs	r0, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	0099      	lsls	r1, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	6809      	ldr	r1, [r1, #0]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6911      	ldr	r1, [r2, #16]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	4311      	orrs	r1, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	000186a0 	.word	0x000186a0
 8004c60:	001e847f 	.word	0x001e847f
 8004c64:	003d08ff 	.word	0x003d08ff
 8004c68:	431bde83 	.word	0x431bde83
 8004c6c:	10624dd3 	.word	0x10624dd3

08004c70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	460b      	mov	r3, r1
 8004c84:	813b      	strh	r3, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c8a:	f7fe fb87 	bl	800339c <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	f040 80d9 	bne.w	8004e50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	2319      	movs	r3, #25
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	496d      	ldr	r1, [pc, #436]	; (8004e5c <HAL_I2C_Mem_Write+0x1ec>)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fc7f 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0cc      	b.n	8004e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2C_Mem_Write+0x56>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0c5      	b.n	8004e52 <HAL_I2C_Mem_Write+0x1e2>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d007      	beq.n	8004cec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2221      	movs	r2, #33	; 0x21
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2240      	movs	r2, #64	; 0x40
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a3a      	ldr	r2, [r7, #32]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a4d      	ldr	r2, [pc, #308]	; (8004e60 <HAL_I2C_Mem_Write+0x1f0>)
 8004d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d2e:	88f8      	ldrh	r0, [r7, #6]
 8004d30:	893a      	ldrh	r2, [r7, #8]
 8004d32:	8979      	ldrh	r1, [r7, #10]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fab6 	bl	80052b0 <I2C_RequestMemoryWrite>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d052      	beq.n	8004df0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e081      	b.n	8004e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fd00 	bl	8005758 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00d      	beq.n	8004d7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d107      	bne.n	8004d76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e06b      	b.n	8004e52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d11b      	bne.n	8004df0 <HAL_I2C_Mem_Write+0x180>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d017      	beq.n	8004df0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1aa      	bne.n	8004d4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fcec 	bl	80057da <I2C_WaitOnBTFFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00d      	beq.n	8004e24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d107      	bne.n	8004e20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e016      	b.n	8004e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
  }
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	00100002 	.word	0x00100002
 8004e60:	ffff0000 	.word	0xffff0000

08004e64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08c      	sub	sp, #48	; 0x30
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	817b      	strh	r3, [r7, #10]
 8004e76:	460b      	mov	r3, r1
 8004e78:	813b      	strh	r3, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e7e:	f7fe fa8d 	bl	800339c <HAL_GetTick>
 8004e82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	f040 8208 	bne.w	80052a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2319      	movs	r3, #25
 8004e98:	2201      	movs	r2, #1
 8004e9a:	497b      	ldr	r1, [pc, #492]	; (8005088 <HAL_I2C_Mem_Read+0x224>)
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fb85 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e1fb      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_I2C_Mem_Read+0x56>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e1f4      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d007      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2222      	movs	r2, #34	; 0x22
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2240      	movs	r2, #64	; 0x40
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a5b      	ldr	r2, [pc, #364]	; (800508c <HAL_I2C_Mem_Read+0x228>)
 8004f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f22:	88f8      	ldrh	r0, [r7, #6]
 8004f24:	893a      	ldrh	r2, [r7, #8]
 8004f26:	8979      	ldrh	r1, [r7, #10]
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4603      	mov	r3, r0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fa52 	bl	80053dc <I2C_RequestMemoryRead>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e1b0      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d113      	bne.n	8004f72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	623b      	str	r3, [r7, #32]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	623b      	str	r3, [r7, #32]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e184      	b.n	800527c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d11b      	bne.n	8004fb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	e164      	b.n	800527c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d11b      	bne.n	8004ff2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	e144      	b.n	800527c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005008:	e138      	b.n	800527c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	2b03      	cmp	r3, #3
 8005010:	f200 80f1 	bhi.w	80051f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	2b01      	cmp	r3, #1
 800501a:	d123      	bne.n	8005064 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fc1b 	bl	800585c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e139      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005062:	e10b      	b.n	800527c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005068:	2b02      	cmp	r3, #2
 800506a:	d14e      	bne.n	800510a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	2200      	movs	r2, #0
 8005074:	4906      	ldr	r1, [pc, #24]	; (8005090 <HAL_I2C_Mem_Read+0x22c>)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fa98 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e10e      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
 8005086:	bf00      	nop
 8005088:	00100002 	.word	0x00100002
 800508c:	ffff0000 	.word	0xffff0000
 8005090:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005108:	e0b8      	b.n	800527c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	2200      	movs	r2, #0
 8005112:	4966      	ldr	r1, [pc, #408]	; (80052ac <HAL_I2C_Mem_Read+0x448>)
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fa49 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0bf      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	2200      	movs	r2, #0
 800516e:	494f      	ldr	r1, [pc, #316]	; (80052ac <HAL_I2C_Mem_Read+0x448>)
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fa1b 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e091      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f4:	e042      	b.n	800527c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 fb2e 	bl	800585c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e04c      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b04      	cmp	r3, #4
 8005248:	d118      	bne.n	800527c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	2b00      	cmp	r3, #0
 8005282:	f47f aec2 	bne.w	800500a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	e000      	b.n	80052a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052a2:	2302      	movs	r3, #2
  }
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3728      	adds	r7, #40	; 0x28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	00010004 	.word	0x00010004

080052b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	4608      	mov	r0, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	461a      	mov	r2, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	817b      	strh	r3, [r7, #10]
 80052c2:	460b      	mov	r3, r1
 80052c4:	813b      	strh	r3, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f960 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005300:	d103      	bne.n	800530a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e05f      	b.n	80053ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800530e:	897b      	ldrh	r3, [r7, #10]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800531c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	6a3a      	ldr	r2, [r7, #32]
 8005322:	492d      	ldr	r1, [pc, #180]	; (80053d8 <I2C_RequestMemoryWrite+0x128>)
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f998 	bl	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e04c      	b.n	80053ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	6a39      	ldr	r1, [r7, #32]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fa02 	bl	8005758 <I2C_WaitOnTXEFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00d      	beq.n	8005376 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	2b04      	cmp	r3, #4
 8005360:	d107      	bne.n	8005372 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e02b      	b.n	80053ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d105      	bne.n	8005388 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800537c:	893b      	ldrh	r3, [r7, #8]
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	611a      	str	r2, [r3, #16]
 8005386:	e021      	b.n	80053cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005388:	893b      	ldrh	r3, [r7, #8]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	b29b      	uxth	r3, r3
 800538e:	b2da      	uxtb	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005398:	6a39      	ldr	r1, [r7, #32]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f9dc 	bl	8005758 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d107      	bne.n	80053be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e005      	b.n	80053ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c2:	893b      	ldrh	r3, [r7, #8]
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	00010002 	.word	0x00010002

080053dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	817b      	strh	r3, [r7, #10]
 80053ee:	460b      	mov	r3, r1
 80053f0:	813b      	strh	r3, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005404:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	2200      	movs	r2, #0
 800541e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f8c2 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00d      	beq.n	800544a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543c:	d103      	bne.n	8005446 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e0aa      	b.n	80055a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800544a:	897b      	ldrh	r3, [r7, #10]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005458:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	4952      	ldr	r1, [pc, #328]	; (80055a8 <I2C_RequestMemoryRead+0x1cc>)
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f8fa 	bl	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e097      	b.n	80055a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005488:	6a39      	ldr	r1, [r7, #32]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f964 	bl	8005758 <I2C_WaitOnTXEFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b04      	cmp	r3, #4
 800549c:	d107      	bne.n	80054ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e076      	b.n	80055a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d105      	bne.n	80054c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054b8:	893b      	ldrh	r3, [r7, #8]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	611a      	str	r2, [r3, #16]
 80054c2:	e021      	b.n	8005508 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054c4:	893b      	ldrh	r3, [r7, #8]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	6a39      	ldr	r1, [r7, #32]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f93e 	bl	8005758 <I2C_WaitOnTXEFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d107      	bne.n	80054fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e050      	b.n	80055a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054fe:	893b      	ldrh	r3, [r7, #8]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	6a39      	ldr	r1, [r7, #32]
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f923 	bl	8005758 <I2C_WaitOnTXEFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00d      	beq.n	8005534 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	2b04      	cmp	r3, #4
 800551e:	d107      	bne.n	8005530 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e035      	b.n	80055a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005542:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2200      	movs	r2, #0
 800554c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f82b 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	d103      	bne.n	8005574 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005572:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e013      	b.n	80055a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005578:	897b      	ldrh	r3, [r7, #10]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	b2da      	uxtb	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	6a3a      	ldr	r2, [r7, #32]
 800558c:	4906      	ldr	r1, [pc, #24]	; (80055a8 <I2C_RequestMemoryRead+0x1cc>)
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f863 	bl	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	00010002 	.word	0x00010002

080055ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055bc:	e025      	b.n	800560a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d021      	beq.n	800560a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7fd fee9 	bl	800339c <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d116      	bne.n	800560a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e023      	b.n	8005652 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	d10d      	bne.n	8005630 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	43da      	mvns	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf0c      	ite	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	2300      	movne	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	e00c      	b.n	800564a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	43da      	mvns	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d0b6      	beq.n	80055be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005668:	e051      	b.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005678:	d123      	bne.n	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005688:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005692:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0204 	orr.w	r2, r3, #4
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e046      	b.n	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d021      	beq.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ca:	f7fd fe67 	bl	800339c <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d302      	bcc.n	80056e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d116      	bne.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e020      	b.n	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	0c1b      	lsrs	r3, r3, #16
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	d10c      	bne.n	8005732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	43da      	mvns	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4013      	ands	r3, r2
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	bf14      	ite	ne
 800572a:	2301      	movne	r3, #1
 800572c:	2300      	moveq	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	e00b      	b.n	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	43da      	mvns	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	bf14      	ite	ne
 8005744:	2301      	movne	r3, #1
 8005746:	2300      	moveq	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d18d      	bne.n	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005764:	e02d      	b.n	80057c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f8ce 	bl	8005908 <I2C_IsAcknowledgeFailed>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e02d      	b.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d021      	beq.n	80057c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577e:	f7fd fe0d 	bl	800339c <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	d302      	bcc.n	8005794 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d116      	bne.n	80057c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f043 0220 	orr.w	r2, r3, #32
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e007      	b.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d1ca      	bne.n	8005766 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057e6:	e02d      	b.n	8005844 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f88d 	bl	8005908 <I2C_IsAcknowledgeFailed>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e02d      	b.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d021      	beq.n	8005844 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005800:	f7fd fdcc 	bl	800339c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d116      	bne.n	8005844 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	f043 0220 	orr.w	r2, r3, #32
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e007      	b.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d1ca      	bne.n	80057e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005868:	e042      	b.n	80058f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b10      	cmp	r3, #16
 8005876:	d119      	bne.n	80058ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0210 	mvn.w	r2, #16
 8005880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e029      	b.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ac:	f7fd fd76 	bl	800339c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e007      	b.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d1b5      	bne.n	800586a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591e:	d11b      	bne.n	8005958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	f043 0204 	orr.w	r2, r3, #4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e264      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d075      	beq.n	8005a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005986:	4ba3      	ldr	r3, [pc, #652]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b04      	cmp	r3, #4
 8005990:	d00c      	beq.n	80059ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005992:	4ba0      	ldr	r3, [pc, #640]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800599a:	2b08      	cmp	r3, #8
 800599c:	d112      	bne.n	80059c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800599e:	4b9d      	ldr	r3, [pc, #628]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059aa:	d10b      	bne.n	80059c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ac:	4b99      	ldr	r3, [pc, #612]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d05b      	beq.n	8005a70 <HAL_RCC_OscConfig+0x108>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d157      	bne.n	8005a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e23f      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059cc:	d106      	bne.n	80059dc <HAL_RCC_OscConfig+0x74>
 80059ce:	4b91      	ldr	r3, [pc, #580]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a90      	ldr	r2, [pc, #576]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e01d      	b.n	8005a18 <HAL_RCC_OscConfig+0xb0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCC_OscConfig+0x98>
 80059e6:	4b8b      	ldr	r3, [pc, #556]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a8a      	ldr	r2, [pc, #552]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	4b88      	ldr	r3, [pc, #544]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a87      	ldr	r2, [pc, #540]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e00b      	b.n	8005a18 <HAL_RCC_OscConfig+0xb0>
 8005a00:	4b84      	ldr	r3, [pc, #528]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a83      	ldr	r2, [pc, #524]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	4b81      	ldr	r3, [pc, #516]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a80      	ldr	r2, [pc, #512]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d013      	beq.n	8005a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a20:	f7fd fcbc 	bl	800339c <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a28:	f7fd fcb8 	bl	800339c <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b64      	cmp	r3, #100	; 0x64
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e204      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	4b76      	ldr	r3, [pc, #472]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0xc0>
 8005a46:	e014      	b.n	8005a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a48:	f7fd fca8 	bl	800339c <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a50:	f7fd fca4 	bl	800339c <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b64      	cmp	r3, #100	; 0x64
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e1f0      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a62:	4b6c      	ldr	r3, [pc, #432]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <HAL_RCC_OscConfig+0xe8>
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d063      	beq.n	8005b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a7e:	4b65      	ldr	r3, [pc, #404]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a8a:	4b62      	ldr	r3, [pc, #392]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d11c      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a96:	4b5f      	ldr	r3, [pc, #380]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d116      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aa2:	4b5c      	ldr	r3, [pc, #368]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_RCC_OscConfig+0x152>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e1c4      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aba:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4952      	ldr	r1, [pc, #328]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ace:	e03a      	b.n	8005b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ad8:	4b4f      	ldr	r3, [pc, #316]	; (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ade:	f7fd fc5d 	bl	800339c <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ae6:	f7fd fc59 	bl	800339c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e1a5      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af8:	4b46      	ldr	r3, [pc, #280]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b04:	4b43      	ldr	r3, [pc, #268]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4940      	ldr	r1, [pc, #256]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	600b      	str	r3, [r1, #0]
 8005b18:	e015      	b.n	8005b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b1a:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fd fc3c 	bl	800339c <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b28:	f7fd fc38 	bl	800339c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e184      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3a:	4b36      	ldr	r3, [pc, #216]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d030      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d016      	beq.n	8005b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b5a:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <HAL_RCC_OscConfig+0x2b4>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7fd fc1c 	bl	800339c <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b68:	f7fd fc18 	bl	800339c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e164      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x200>
 8005b86:	e015      	b.n	8005bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b88:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <HAL_RCC_OscConfig+0x2b4>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8e:	f7fd fc05 	bl	800339c <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b96:	f7fd fc01 	bl	800339c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e14d      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f0      	bne.n	8005b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80a0 	beq.w	8005d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	4a0e      	ldr	r2, [pc, #56]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be0:	6413      	str	r3, [r2, #64]	; 0x40
 8005be2:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <HAL_RCC_OscConfig+0x2b8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d121      	bne.n	8005c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bfe:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <HAL_RCC_OscConfig+0x2b8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a07      	ldr	r2, [pc, #28]	; (8005c20 <HAL_RCC_OscConfig+0x2b8>)
 8005c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0a:	f7fd fbc7 	bl	800339c <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	e011      	b.n	8005c36 <HAL_RCC_OscConfig+0x2ce>
 8005c12:	bf00      	nop
 8005c14:	40023800 	.word	0x40023800
 8005c18:	42470000 	.word	0x42470000
 8005c1c:	42470e80 	.word	0x42470e80
 8005c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c24:	f7fd fbba 	bl	800339c <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e106      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c36:	4b85      	ldr	r3, [pc, #532]	; (8005e4c <HAL_RCC_OscConfig+0x4e4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d106      	bne.n	8005c58 <HAL_RCC_OscConfig+0x2f0>
 8005c4a:	4b81      	ldr	r3, [pc, #516]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	4a80      	ldr	r2, [pc, #512]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c50:	f043 0301 	orr.w	r3, r3, #1
 8005c54:	6713      	str	r3, [r2, #112]	; 0x70
 8005c56:	e01c      	b.n	8005c92 <HAL_RCC_OscConfig+0x32a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	d10c      	bne.n	8005c7a <HAL_RCC_OscConfig+0x312>
 8005c60:	4b7b      	ldr	r3, [pc, #492]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	4a7a      	ldr	r2, [pc, #488]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6c:	4b78      	ldr	r3, [pc, #480]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a77      	ldr	r2, [pc, #476]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
 8005c78:	e00b      	b.n	8005c92 <HAL_RCC_OscConfig+0x32a>
 8005c7a:	4b75      	ldr	r3, [pc, #468]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	4a74      	ldr	r2, [pc, #464]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	6713      	str	r3, [r2, #112]	; 0x70
 8005c86:	4b72      	ldr	r3, [pc, #456]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	4a71      	ldr	r2, [pc, #452]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005c8c:	f023 0304 	bic.w	r3, r3, #4
 8005c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d015      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fd fb7f 	bl	800339c <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca2:	f7fd fb7b 	bl	800339c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e0c5      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb8:	4b65      	ldr	r3, [pc, #404]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0ee      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x33a>
 8005cc4:	e014      	b.n	8005cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc6:	f7fd fb69 	bl	800339c <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ccc:	e00a      	b.n	8005ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cce:	f7fd fb65 	bl	800339c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e0af      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce4:	4b5a      	ldr	r3, [pc, #360]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1ee      	bne.n	8005cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d105      	bne.n	8005d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf6:	4b56      	ldr	r3, [pc, #344]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	4a55      	ldr	r2, [pc, #340]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 809b 	beq.w	8005e42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d0c:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 030c 	and.w	r3, r3, #12
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d05c      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d141      	bne.n	8005da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d20:	4b4c      	ldr	r3, [pc, #304]	; (8005e54 <HAL_RCC_OscConfig+0x4ec>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d26:	f7fd fb39 	bl	800339c <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2e:	f7fd fb35 	bl	800339c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e081      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d40:	4b43      	ldr	r3, [pc, #268]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f0      	bne.n	8005d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	019b      	lsls	r3, r3, #6
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	3b01      	subs	r3, #1
 8005d66:	041b      	lsls	r3, r3, #16
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	4937      	ldr	r1, [pc, #220]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d76:	4b37      	ldr	r3, [pc, #220]	; (8005e54 <HAL_RCC_OscConfig+0x4ec>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7c:	f7fd fb0e 	bl	800339c <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d84:	f7fd fb0a 	bl	800339c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e056      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d96:	4b2e      	ldr	r3, [pc, #184]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0f0      	beq.n	8005d84 <HAL_RCC_OscConfig+0x41c>
 8005da2:	e04e      	b.n	8005e42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da4:	4b2b      	ldr	r3, [pc, #172]	; (8005e54 <HAL_RCC_OscConfig+0x4ec>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005daa:	f7fd faf7 	bl	800339c <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db2:	f7fd faf3 	bl	800339c <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e03f      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc4:	4b22      	ldr	r3, [pc, #136]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f0      	bne.n	8005db2 <HAL_RCC_OscConfig+0x44a>
 8005dd0:	e037      	b.n	8005e42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e032      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dde:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <HAL_RCC_OscConfig+0x4e8>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d028      	beq.n	8005e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d121      	bne.n	8005e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d11a      	bne.n	8005e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e0e:	4013      	ands	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d111      	bne.n	8005e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	3b01      	subs	r3, #1
 8005e28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d001      	beq.n	8005e42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40007000 	.word	0x40007000
 8005e50:	40023800 	.word	0x40023800
 8005e54:	42470060 	.word	0x42470060

08005e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0cc      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e6c:	4b68      	ldr	r3, [pc, #416]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d90c      	bls.n	8005e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7a:	4b65      	ldr	r3, [pc, #404]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e82:	4b63      	ldr	r3, [pc, #396]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d001      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0b8      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d020      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eac:	4b59      	ldr	r3, [pc, #356]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	4a58      	ldr	r2, [pc, #352]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ec4:	4b53      	ldr	r3, [pc, #332]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	4a52      	ldr	r2, [pc, #328]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed0:	4b50      	ldr	r3, [pc, #320]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	494d      	ldr	r1, [pc, #308]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d044      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d107      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b47      	ldr	r3, [pc, #284]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d119      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e07f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d107      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f16:	4b3f      	ldr	r3, [pc, #252]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e06f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f26:	4b3b      	ldr	r3, [pc, #236]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e067      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 0203 	bic.w	r2, r3, #3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4934      	ldr	r1, [pc, #208]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f48:	f7fd fa28 	bl	800339c <HAL_GetTick>
 8005f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4e:	e00a      	b.n	8005f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f50:	f7fd fa24 	bl	800339c <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e04f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f66:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 020c 	and.w	r2, r3, #12
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d1eb      	bne.n	8005f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d20c      	bcs.n	8005fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f86:	4b22      	ldr	r3, [pc, #136]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e032      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fac:	4b19      	ldr	r3, [pc, #100]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4916      	ldr	r1, [pc, #88]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fca:	4b12      	ldr	r3, [pc, #72]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	490e      	ldr	r1, [pc, #56]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fde:	f000 f821 	bl	8006024 <HAL_RCC_GetSysClockFreq>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	490a      	ldr	r1, [pc, #40]	; (8006018 <HAL_RCC_ClockConfig+0x1c0>)
 8005ff0:	5ccb      	ldrb	r3, [r1, r3]
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	4a09      	ldr	r2, [pc, #36]	; (800601c <HAL_RCC_ClockConfig+0x1c4>)
 8005ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fd f988 	bl	8003314 <HAL_InitTick>

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40023c00 	.word	0x40023c00
 8006014:	40023800 	.word	0x40023800
 8006018:	0800c8f0 	.word	0x0800c8f0
 800601c:	20000010 	.word	0x20000010
 8006020:	20000014 	.word	0x20000014

08006024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800603c:	4b67      	ldr	r3, [pc, #412]	; (80061dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d00d      	beq.n	8006064 <HAL_RCC_GetSysClockFreq+0x40>
 8006048:	2b08      	cmp	r3, #8
 800604a:	f200 80bd 	bhi.w	80061c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_RCC_GetSysClockFreq+0x34>
 8006052:	2b04      	cmp	r3, #4
 8006054:	d003      	beq.n	800605e <HAL_RCC_GetSysClockFreq+0x3a>
 8006056:	e0b7      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006058:	4b61      	ldr	r3, [pc, #388]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800605a:	60bb      	str	r3, [r7, #8]
       break;
 800605c:	e0b7      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800605e:	4b61      	ldr	r3, [pc, #388]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006060:	60bb      	str	r3, [r7, #8]
      break;
 8006062:	e0b4      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006064:	4b5d      	ldr	r3, [pc, #372]	; (80061dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800606c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800606e:	4b5b      	ldr	r3, [pc, #364]	; (80061dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04d      	beq.n	8006116 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800607a:	4b58      	ldr	r3, [pc, #352]	; (80061dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	099b      	lsrs	r3, r3, #6
 8006080:	461a      	mov	r2, r3
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	ea02 0800 	and.w	r8, r2, r0
 8006092:	ea03 0901 	and.w	r9, r3, r1
 8006096:	4640      	mov	r0, r8
 8006098:	4649      	mov	r1, r9
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	014b      	lsls	r3, r1, #5
 80060a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060a8:	0142      	lsls	r2, r0, #5
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	ebb0 0008 	subs.w	r0, r0, r8
 80060b2:	eb61 0109 	sbc.w	r1, r1, r9
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	018b      	lsls	r3, r1, #6
 80060c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060c4:	0182      	lsls	r2, r0, #6
 80060c6:	1a12      	subs	r2, r2, r0
 80060c8:	eb63 0301 	sbc.w	r3, r3, r1
 80060cc:	f04f 0000 	mov.w	r0, #0
 80060d0:	f04f 0100 	mov.w	r1, #0
 80060d4:	00d9      	lsls	r1, r3, #3
 80060d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060da:	00d0      	lsls	r0, r2, #3
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	eb12 0208 	adds.w	r2, r2, r8
 80060e4:	eb43 0309 	adc.w	r3, r3, r9
 80060e8:	f04f 0000 	mov.w	r0, #0
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	0259      	lsls	r1, r3, #9
 80060f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80060f6:	0250      	lsls	r0, r2, #9
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4610      	mov	r0, r2
 80060fe:	4619      	mov	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	461a      	mov	r2, r3
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	f7fa fcd0 	bl	8000aac <__aeabi_uldivmod>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4613      	mov	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e04a      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006116:	4b31      	ldr	r3, [pc, #196]	; (80061dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	099b      	lsrs	r3, r3, #6
 800611c:	461a      	mov	r2, r3
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006126:	f04f 0100 	mov.w	r1, #0
 800612a:	ea02 0400 	and.w	r4, r2, r0
 800612e:	ea03 0501 	and.w	r5, r3, r1
 8006132:	4620      	mov	r0, r4
 8006134:	4629      	mov	r1, r5
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	014b      	lsls	r3, r1, #5
 8006140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006144:	0142      	lsls	r2, r0, #5
 8006146:	4610      	mov	r0, r2
 8006148:	4619      	mov	r1, r3
 800614a:	1b00      	subs	r0, r0, r4
 800614c:	eb61 0105 	sbc.w	r1, r1, r5
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	018b      	lsls	r3, r1, #6
 800615a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800615e:	0182      	lsls	r2, r0, #6
 8006160:	1a12      	subs	r2, r2, r0
 8006162:	eb63 0301 	sbc.w	r3, r3, r1
 8006166:	f04f 0000 	mov.w	r0, #0
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	00d9      	lsls	r1, r3, #3
 8006170:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006174:	00d0      	lsls	r0, r2, #3
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	1912      	adds	r2, r2, r4
 800617c:	eb45 0303 	adc.w	r3, r5, r3
 8006180:	f04f 0000 	mov.w	r0, #0
 8006184:	f04f 0100 	mov.w	r1, #0
 8006188:	0299      	lsls	r1, r3, #10
 800618a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800618e:	0290      	lsls	r0, r2, #10
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4610      	mov	r0, r2
 8006196:	4619      	mov	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	461a      	mov	r2, r3
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	f7fa fc84 	bl	8000aac <__aeabi_uldivmod>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4613      	mov	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	3301      	adds	r3, #1
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	60bb      	str	r3, [r7, #8]
      break;
 80061c6:	e002      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061ca:	60bb      	str	r3, [r7, #8]
      break;
 80061cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061ce:	68bb      	ldr	r3, [r7, #8]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80061da:	bf00      	nop
 80061dc:	40023800 	.word	0x40023800
 80061e0:	00f42400 	.word	0x00f42400
 80061e4:	007a1200 	.word	0x007a1200

080061e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <HAL_RCC_GetHCLKFreq+0x14>)
 80061ee:	681b      	ldr	r3, [r3, #0]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20000010 	.word	0x20000010

08006200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006204:	f7ff fff0 	bl	80061e8 <HAL_RCC_GetHCLKFreq>
 8006208:	4602      	mov	r2, r0
 800620a:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	0a9b      	lsrs	r3, r3, #10
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	4903      	ldr	r1, [pc, #12]	; (8006224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006216:	5ccb      	ldrb	r3, [r1, r3]
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40023800 	.word	0x40023800
 8006224:	0800c900 	.word	0x0800c900

08006228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800622c:	f7ff ffdc 	bl	80061e8 <HAL_RCC_GetHCLKFreq>
 8006230:	4602      	mov	r2, r0
 8006232:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	0b5b      	lsrs	r3, r3, #13
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	4903      	ldr	r1, [pc, #12]	; (800624c <HAL_RCC_GetPCLK2Freq+0x24>)
 800623e:	5ccb      	ldrb	r3, [r1, r3]
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006244:	4618      	mov	r0, r3
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40023800 	.word	0x40023800
 800624c:	0800c900 	.word	0x0800c900

08006250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e07b      	b.n	800635a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006272:	d009      	beq.n	8006288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	61da      	str	r2, [r3, #28]
 800627a:	e005      	b.n	8006288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fc fc54 	bl	8002b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	ea42 0103 	orr.w	r1, r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	f003 0104 	and.w	r1, r3, #4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	f003 0210 	and.w	r2, r3, #16
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006348:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_SPI_Transmit+0x22>
 8006380:	2302      	movs	r3, #2
 8006382:	e126      	b.n	80065d2 <HAL_SPI_Transmit+0x270>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800638c:	f7fd f806 	bl	800339c <HAL_GetTick>
 8006390:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063a6:	e10b      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_Transmit+0x52>
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063b8:	e102      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2203      	movs	r2, #3
 80063be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006400:	d10f      	bne.n	8006422 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006410:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006420:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d007      	beq.n	8006440 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800643e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006448:	d14b      	bne.n	80064e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_SPI_Transmit+0xf6>
 8006452:	8afb      	ldrh	r3, [r7, #22]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d13e      	bne.n	80064d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	881a      	ldrh	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	1c9a      	adds	r2, r3, #2
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800647c:	e02b      	b.n	80064d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	d112      	bne.n	80064b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80064b0:	e011      	b.n	80064d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b2:	f7fc ff73 	bl	800339c <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d803      	bhi.n	80064ca <HAL_SPI_Transmit+0x168>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d102      	bne.n	80064d0 <HAL_SPI_Transmit+0x16e>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064d4:	e074      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1ce      	bne.n	800647e <HAL_SPI_Transmit+0x11c>
 80064e0:	e04c      	b.n	800657c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_SPI_Transmit+0x18e>
 80064ea:	8afb      	ldrh	r3, [r7, #22]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d140      	bne.n	8006572 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006516:	e02c      	b.n	8006572 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b02      	cmp	r3, #2
 8006524:	d113      	bne.n	800654e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	7812      	ldrb	r2, [r2, #0]
 8006532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	86da      	strh	r2, [r3, #54]	; 0x36
 800654c:	e011      	b.n	8006572 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654e:	f7fc ff25 	bl	800339c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d803      	bhi.n	8006566 <HAL_SPI_Transmit+0x204>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d102      	bne.n	800656c <HAL_SPI_Transmit+0x20a>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006570:	e026      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1cd      	bne.n	8006518 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fbcb 	bl	8006d1c <SPI_EndRxTxTransaction>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800659a:	2300      	movs	r3, #0
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e000      	b.n	80065c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3720      	adds	r7, #32
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b088      	sub	sp, #32
 80065de:	af02      	add	r7, sp, #8
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f6:	d112      	bne.n	800661e <HAL_SPI_Receive+0x44>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10e      	bne.n	800661e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2204      	movs	r2, #4
 8006604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	4613      	mov	r3, r2
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f8f1 	bl	80067fc <HAL_SPI_TransmitReceive>
 800661a:	4603      	mov	r3, r0
 800661c:	e0ea      	b.n	80067f4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_SPI_Receive+0x52>
 8006628:	2302      	movs	r3, #2
 800662a:	e0e3      	b.n	80067f4 <HAL_SPI_Receive+0x21a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006634:	f7fc feb2 	bl	800339c <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	d002      	beq.n	800664c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006646:	2302      	movs	r3, #2
 8006648:	75fb      	strb	r3, [r7, #23]
    goto error;
 800664a:	e0ca      	b.n	80067e2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_SPI_Receive+0x7e>
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800665c:	e0c1      	b.n	80067e2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2204      	movs	r2, #4
 8006662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a4:	d10f      	bne.n	80066c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d007      	beq.n	80066e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d162      	bne.n	80067b2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066ec:	e02e      	b.n	800674c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d115      	bne.n	8006728 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f103 020c 	add.w	r2, r3, #12
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	7812      	ldrb	r2, [r2, #0]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006726:	e011      	b.n	800674c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006728:	f7fc fe38 	bl	800339c <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d803      	bhi.n	8006740 <HAL_SPI_Receive+0x166>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d102      	bne.n	8006746 <HAL_SPI_Receive+0x16c>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	75fb      	strb	r3, [r7, #23]
          goto error;
 800674a:	e04a      	b.n	80067e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1cb      	bne.n	80066ee <HAL_SPI_Receive+0x114>
 8006756:	e031      	b.n	80067bc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b01      	cmp	r3, #1
 8006764:	d113      	bne.n	800678e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	b292      	uxth	r2, r2
 8006772:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	1c9a      	adds	r2, r3, #2
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800678c:	e011      	b.n	80067b2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800678e:	f7fc fe05 	bl	800339c <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d803      	bhi.n	80067a6 <HAL_SPI_Receive+0x1cc>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d102      	bne.n	80067ac <HAL_SPI_Receive+0x1d2>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067b0:	e017      	b.n	80067e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1cd      	bne.n	8006758 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fa45 	bl	8006c50 <SPI_EndRxTransaction>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
 80067de:	e000      	b.n	80067e2 <HAL_SPI_Receive+0x208>
  }

error :
 80067e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08c      	sub	sp, #48	; 0x30
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800680a:	2301      	movs	r3, #1
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x26>
 800681e:	2302      	movs	r3, #2
 8006820:	e18a      	b.n	8006b38 <HAL_SPI_TransmitReceive+0x33c>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800682a:	f7fc fdb7 	bl	800339c <HAL_GetTick>
 800682e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006840:	887b      	ldrh	r3, [r7, #2]
 8006842:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006848:	2b01      	cmp	r3, #1
 800684a:	d00f      	beq.n	800686c <HAL_SPI_TransmitReceive+0x70>
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006852:	d107      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d103      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x68>
 800685c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006860:	2b04      	cmp	r3, #4
 8006862:	d003      	beq.n	800686c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006864:	2302      	movs	r3, #2
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800686a:	e15b      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_SPI_TransmitReceive+0x82>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_SPI_TransmitReceive+0x82>
 8006878:	887b      	ldrh	r3, [r7, #2]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006884:	e14e      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b04      	cmp	r3, #4
 8006890:	d003      	beq.n	800689a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2205      	movs	r2, #5
 8006896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	887a      	ldrh	r2, [r7, #2]
 80068aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	887a      	ldrh	r2, [r7, #2]
 80068bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	887a      	ldrh	r2, [r7, #2]
 80068c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	d007      	beq.n	80068ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f6:	d178      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_SPI_TransmitReceive+0x10a>
 8006900:	8b7b      	ldrh	r3, [r7, #26]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d166      	bne.n	80069d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	1c9a      	adds	r2, r3, #2
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800692a:	e053      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b02      	cmp	r3, #2
 8006938:	d11b      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x176>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d016      	beq.n	8006972 <HAL_SPI_TransmitReceive+0x176>
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d113      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b01      	cmp	r3, #1
 800697e:	d119      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x1b8>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d014      	beq.n	80069b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	b292      	uxth	r2, r2
 8006996:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069b0:	2301      	movs	r3, #1
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069b4:	f7fc fcf2 	bl	800339c <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d807      	bhi.n	80069d4 <HAL_SPI_TransmitReceive+0x1d8>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d003      	beq.n	80069d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069d2:	e0a7      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1a6      	bne.n	800692c <HAL_SPI_TransmitReceive+0x130>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1a1      	bne.n	800692c <HAL_SPI_TransmitReceive+0x130>
 80069e8:	e07c      	b.n	8006ae4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x1fc>
 80069f2:	8b7b      	ldrh	r3, [r7, #26]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d16b      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a1e:	e057      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d11c      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x26c>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d017      	beq.n	8006a68 <HAL_SPI_TransmitReceive+0x26c>
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d114      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d119      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x2ae>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d014      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aaa:	f7fc fc77 	bl	800339c <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d803      	bhi.n	8006ac2 <HAL_SPI_TransmitReceive+0x2c6>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d102      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0x2cc>
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ace:	e029      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1a2      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x224>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d19d      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f917 	bl	8006d1c <SPI_EndRxTxTransaction>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b00:	e010      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	e000      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3730      	adds	r7, #48	; 0x30
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b50:	f7fc fc24 	bl	800339c <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b60:	f7fc fc1c 	bl	800339c <HAL_GetTick>
 8006b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b66:	4b39      	ldr	r3, [pc, #228]	; (8006c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	015b      	lsls	r3, r3, #5
 8006b6c:	0d1b      	lsrs	r3, r3, #20
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	fb02 f303 	mul.w	r3, r2, r3
 8006b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b76:	e054      	b.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d050      	beq.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b80:	f7fc fc0c 	bl	800339c <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d902      	bls.n	8006b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d13d      	bne.n	8006c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bae:	d111      	bne.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb8:	d004      	beq.n	8006bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc2:	d107      	bne.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bdc:	d10f      	bne.n	8006bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e017      	b.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	bf0c      	ite	eq
 8006c32:	2301      	moveq	r3, #1
 8006c34:	2300      	movne	r3, #0
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d19b      	bne.n	8006b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000010 	.word	0x20000010

08006c50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c64:	d111      	bne.n	8006c8a <SPI_EndRxTransaction+0x3a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6e:	d004      	beq.n	8006c7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c78:	d107      	bne.n	8006c8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c92:	d12a      	bne.n	8006cea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9c:	d012      	beq.n	8006cc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2180      	movs	r1, #128	; 0x80
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7ff ff49 	bl	8006b40 <SPI_WaitFlagStateUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d02d      	beq.n	8006d10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e026      	b.n	8006d12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2101      	movs	r1, #1
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff ff36 	bl	8006b40 <SPI_WaitFlagStateUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01a      	beq.n	8006d10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e013      	b.n	8006d12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff ff23 	bl	8006b40 <SPI_WaitFlagStateUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d007      	beq.n	8006d10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d04:	f043 0220 	orr.w	r2, r3, #32
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e000      	b.n	8006d12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <SPI_EndRxTxTransaction+0x7c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <SPI_EndRxTxTransaction+0x80>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	0d5b      	lsrs	r3, r3, #21
 8006d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d46:	d112      	bne.n	8006d6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fef4 	bl	8006b40 <SPI_WaitFlagStateUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e00f      	b.n	8006d8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b80      	cmp	r3, #128	; 0x80
 8006d86:	d0f2      	beq.n	8006d6e <SPI_EndRxTxTransaction+0x52>
 8006d88:	e000      	b.n	8006d8c <SPI_EndRxTxTransaction+0x70>
        break;
 8006d8a:	bf00      	nop
  }

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000010 	.word	0x20000010
 8006d9c:	165e9f81 	.word	0x165e9f81

08006da0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e034      	b.n	8006e20 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7fa fb46 	bl	800145c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f002 f828 	bl	8008e30 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	461a      	mov	r2, r3
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	f002 f872 	bl	8008ed4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6858      	ldr	r0, [r3, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	f002 f8a7 	bl	8008f50 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	6892      	ldr	r2, [r2, #8]
 8006e0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	6892      	ldr	r2, [r2, #8]
 8006e16:	f041 0101 	orr.w	r1, r1, #1
 8006e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e041      	b.n	8006ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fc f818 	bl	8002e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f000 fc7a 	bl	8007760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d001      	beq.n	8006ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e04e      	b.n	8006f7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a23      	ldr	r2, [pc, #140]	; (8006f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d022      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d01d      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d018      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d013      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00e      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d009      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d004      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d111      	bne.n	8006f6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b06      	cmp	r3, #6
 8006f58:	d010      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0201 	orr.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6a:	e007      	b.n	8006f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40010400 	.word	0x40010400
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40001800 	.word	0x40001800

08006fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e041      	b.n	800703e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f839 	bl	8007046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f000 fbba 	bl	8007760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d109      	bne.n	8007080 <HAL_TIM_PWM_Start+0x24>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	bf14      	ite	ne
 8007078:	2301      	movne	r3, #1
 800707a:	2300      	moveq	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	e022      	b.n	80070c6 <HAL_TIM_PWM_Start+0x6a>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b04      	cmp	r3, #4
 8007084:	d109      	bne.n	800709a <HAL_TIM_PWM_Start+0x3e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b01      	cmp	r3, #1
 8007090:	bf14      	ite	ne
 8007092:	2301      	movne	r3, #1
 8007094:	2300      	moveq	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	e015      	b.n	80070c6 <HAL_TIM_PWM_Start+0x6a>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d109      	bne.n	80070b4 <HAL_TIM_PWM_Start+0x58>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	bf14      	ite	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	2300      	moveq	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	e008      	b.n	80070c6 <HAL_TIM_PWM_Start+0x6a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	bf14      	ite	ne
 80070c0:	2301      	movne	r3, #1
 80070c2:	2300      	moveq	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e07c      	b.n	80071c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <HAL_TIM_PWM_Start+0x82>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070dc:	e013      	b.n	8007106 <HAL_TIM_PWM_Start+0xaa>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_PWM_Start+0x92>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ec:	e00b      	b.n	8007106 <HAL_TIM_PWM_Start+0xaa>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d104      	bne.n	80070fe <HAL_TIM_PWM_Start+0xa2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070fc:	e003      	b.n	8007106 <HAL_TIM_PWM_Start+0xaa>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2201      	movs	r2, #1
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fe10 	bl	8007d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2d      	ldr	r2, [pc, #180]	; (80071d0 <HAL_TIM_PWM_Start+0x174>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_TIM_PWM_Start+0xcc>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2c      	ldr	r2, [pc, #176]	; (80071d4 <HAL_TIM_PWM_Start+0x178>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <HAL_TIM_PWM_Start+0xd0>
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <HAL_TIM_PWM_Start+0xd2>
 800712c:	2300      	movs	r3, #0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a22      	ldr	r2, [pc, #136]	; (80071d0 <HAL_TIM_PWM_Start+0x174>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d022      	beq.n	8007192 <HAL_TIM_PWM_Start+0x136>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007154:	d01d      	beq.n	8007192 <HAL_TIM_PWM_Start+0x136>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1f      	ldr	r2, [pc, #124]	; (80071d8 <HAL_TIM_PWM_Start+0x17c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d018      	beq.n	8007192 <HAL_TIM_PWM_Start+0x136>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1d      	ldr	r2, [pc, #116]	; (80071dc <HAL_TIM_PWM_Start+0x180>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <HAL_TIM_PWM_Start+0x136>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <HAL_TIM_PWM_Start+0x184>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00e      	beq.n	8007192 <HAL_TIM_PWM_Start+0x136>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <HAL_TIM_PWM_Start+0x178>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d009      	beq.n	8007192 <HAL_TIM_PWM_Start+0x136>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a18      	ldr	r2, [pc, #96]	; (80071e4 <HAL_TIM_PWM_Start+0x188>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d004      	beq.n	8007192 <HAL_TIM_PWM_Start+0x136>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <HAL_TIM_PWM_Start+0x18c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d111      	bne.n	80071b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b06      	cmp	r3, #6
 80071a2:	d010      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b4:	e007      	b.n	80071c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0201 	orr.w	r2, r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40010400 	.word	0x40010400
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40001800 	.word	0x40001800

080071ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d122      	bne.n	8007248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b02      	cmp	r3, #2
 800720e:	d11b      	bne.n	8007248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0202 	mvn.w	r2, #2
 8007218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa77 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 8007234:	e005      	b.n	8007242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa69 	bl	800770e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fa7a 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b04      	cmp	r3, #4
 8007254:	d122      	bne.n	800729c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b04      	cmp	r3, #4
 8007262:	d11b      	bne.n	800729c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f06f 0204 	mvn.w	r2, #4
 800726c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2202      	movs	r2, #2
 8007272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa4d 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 8007288:	e005      	b.n	8007296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa3f 	bl	800770e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa50 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	d122      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d11b      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f06f 0208 	mvn.w	r2, #8
 80072c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2204      	movs	r2, #4
 80072c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa23 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 80072dc:	e005      	b.n	80072ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa15 	bl	800770e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fa26 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d122      	bne.n	8007344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b10      	cmp	r3, #16
 800730a:	d11b      	bne.n	8007344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0210 	mvn.w	r2, #16
 8007314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2208      	movs	r2, #8
 800731a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9f9 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 8007330:	e005      	b.n	800733e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9eb 	bl	800770e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f9fc 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b01      	cmp	r3, #1
 8007350:	d10e      	bne.n	8007370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b01      	cmp	r3, #1
 800735e:	d107      	bne.n	8007370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0201 	mvn.w	r2, #1
 8007368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fb fb74 	bl	8002a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737a:	2b80      	cmp	r3, #128	; 0x80
 800737c:	d10e      	bne.n	800739c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007388:	2b80      	cmp	r3, #128	; 0x80
 800738a:	d107      	bne.n	800739c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fd78 	bl	8007e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d10e      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b40      	cmp	r3, #64	; 0x40
 80073b6:	d107      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f9c1 	bl	800774a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d10e      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0320 	and.w	r3, r3, #32
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d107      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0220 	mvn.w	r2, #32
 80073ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fd42 	bl	8007e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007416:	2302      	movs	r3, #2
 8007418:	e0ae      	b.n	8007578 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b0c      	cmp	r3, #12
 8007426:	f200 809f 	bhi.w	8007568 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007465 	.word	0x08007465
 8007434:	08007569 	.word	0x08007569
 8007438:	08007569 	.word	0x08007569
 800743c:	08007569 	.word	0x08007569
 8007440:	080074a5 	.word	0x080074a5
 8007444:	08007569 	.word	0x08007569
 8007448:	08007569 	.word	0x08007569
 800744c:	08007569 	.word	0x08007569
 8007450:	080074e7 	.word	0x080074e7
 8007454:	08007569 	.word	0x08007569
 8007458:	08007569 	.word	0x08007569
 800745c:	08007569 	.word	0x08007569
 8007460:	08007527 	.word	0x08007527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fa18 	bl	80078a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0208 	orr.w	r2, r2, #8
 800747e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0204 	bic.w	r2, r2, #4
 800748e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6999      	ldr	r1, [r3, #24]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	691a      	ldr	r2, [r3, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	619a      	str	r2, [r3, #24]
      break;
 80074a2:	e064      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fa68 	bl	8007980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6999      	ldr	r1, [r3, #24]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	021a      	lsls	r2, r3, #8
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	619a      	str	r2, [r3, #24]
      break;
 80074e4:	e043      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68b9      	ldr	r1, [r7, #8]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fabd 	bl	8007a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0208 	orr.w	r2, r2, #8
 8007500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69da      	ldr	r2, [r3, #28]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0204 	bic.w	r2, r2, #4
 8007510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69d9      	ldr	r1, [r3, #28]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	61da      	str	r2, [r3, #28]
      break;
 8007524:	e023      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	4618      	mov	r0, r3
 800752e:	f000 fb11 	bl	8007b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69da      	ldr	r2, [r3, #28]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69d9      	ldr	r1, [r3, #28]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	021a      	lsls	r2, r3, #8
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	61da      	str	r2, [r3, #28]
      break;
 8007566:	e002      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
      break;
 800756c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_TIM_ConfigClockSource+0x1c>
 8007598:	2302      	movs	r3, #2
 800759a:	e0b4      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x186>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d4:	d03e      	beq.n	8007654 <HAL_TIM_ConfigClockSource+0xd4>
 80075d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075da:	f200 8087 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e2:	f000 8086 	beq.w	80076f2 <HAL_TIM_ConfigClockSource+0x172>
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d87f      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 80075ec:	2b70      	cmp	r3, #112	; 0x70
 80075ee:	d01a      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0xa6>
 80075f0:	2b70      	cmp	r3, #112	; 0x70
 80075f2:	d87b      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 80075f4:	2b60      	cmp	r3, #96	; 0x60
 80075f6:	d050      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x11a>
 80075f8:	2b60      	cmp	r3, #96	; 0x60
 80075fa:	d877      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 80075fc:	2b50      	cmp	r3, #80	; 0x50
 80075fe:	d03c      	beq.n	800767a <HAL_TIM_ConfigClockSource+0xfa>
 8007600:	2b50      	cmp	r3, #80	; 0x50
 8007602:	d873      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 8007604:	2b40      	cmp	r3, #64	; 0x40
 8007606:	d058      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x13a>
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d86f      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 800760c:	2b30      	cmp	r3, #48	; 0x30
 800760e:	d064      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x15a>
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d86b      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 8007614:	2b20      	cmp	r3, #32
 8007616:	d060      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x15a>
 8007618:	2b20      	cmp	r3, #32
 800761a:	d867      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d05c      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x15a>
 8007620:	2b10      	cmp	r3, #16
 8007622:	d05a      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x15a>
 8007624:	e062      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6899      	ldr	r1, [r3, #8]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f000 fb5d 	bl	8007cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	609a      	str	r2, [r3, #8]
      break;
 8007652:	e04f      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	6899      	ldr	r1, [r3, #8]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f000 fb46 	bl	8007cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007676:	609a      	str	r2, [r3, #8]
      break;
 8007678:	e03c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	6859      	ldr	r1, [r3, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	461a      	mov	r2, r3
 8007688:	f000 faba 	bl	8007c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2150      	movs	r1, #80	; 0x50
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fb13 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 8007698:	e02c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6859      	ldr	r1, [r3, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f000 fad9 	bl	8007c5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2160      	movs	r1, #96	; 0x60
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fb03 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076b8:	e01c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6859      	ldr	r1, [r3, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f000 fa9a 	bl	8007c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2140      	movs	r1, #64	; 0x40
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 faf3 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076d8:	e00c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f000 faea 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076ea:	e003      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
      break;
 80076f0:	e000      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a40      	ldr	r2, [pc, #256]	; (8007874 <TIM_Base_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777e:	d00f      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a3d      	ldr	r2, [pc, #244]	; (8007878 <TIM_Base_SetConfig+0x118>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00b      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a3c      	ldr	r2, [pc, #240]	; (800787c <TIM_Base_SetConfig+0x11c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d007      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a3b      	ldr	r2, [pc, #236]	; (8007880 <TIM_Base_SetConfig+0x120>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a3a      	ldr	r2, [pc, #232]	; (8007884 <TIM_Base_SetConfig+0x124>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d108      	bne.n	80077b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a2f      	ldr	r2, [pc, #188]	; (8007874 <TIM_Base_SetConfig+0x114>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d02b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c0:	d027      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a2c      	ldr	r2, [pc, #176]	; (8007878 <TIM_Base_SetConfig+0x118>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d023      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a2b      	ldr	r2, [pc, #172]	; (800787c <TIM_Base_SetConfig+0x11c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01f      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <TIM_Base_SetConfig+0x120>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a29      	ldr	r2, [pc, #164]	; (8007884 <TIM_Base_SetConfig+0x124>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d017      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <TIM_Base_SetConfig+0x128>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a27      	ldr	r2, [pc, #156]	; (800788c <TIM_Base_SetConfig+0x12c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00f      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a26      	ldr	r2, [pc, #152]	; (8007890 <TIM_Base_SetConfig+0x130>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a25      	ldr	r2, [pc, #148]	; (8007894 <TIM_Base_SetConfig+0x134>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a24      	ldr	r2, [pc, #144]	; (8007898 <TIM_Base_SetConfig+0x138>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a23      	ldr	r2, [pc, #140]	; (800789c <TIM_Base_SetConfig+0x13c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d108      	bne.n	8007824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <TIM_Base_SetConfig+0x114>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_Base_SetConfig+0xf8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a0c      	ldr	r2, [pc, #48]	; (8007884 <TIM_Base_SetConfig+0x124>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d103      	bne.n	8007860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	615a      	str	r2, [r3, #20]
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	40010400 	.word	0x40010400
 8007888:	40014000 	.word	0x40014000
 800788c:	40014400 	.word	0x40014400
 8007890:	40014800 	.word	0x40014800
 8007894:	40001800 	.word	0x40001800
 8007898:	40001c00 	.word	0x40001c00
 800789c:	40002000 	.word	0x40002000

080078a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f023 0201 	bic.w	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f023 0302 	bic.w	r3, r3, #2
 80078e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a20      	ldr	r2, [pc, #128]	; (8007978 <TIM_OC1_SetConfig+0xd8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_OC1_SetConfig+0x64>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a1f      	ldr	r2, [pc, #124]	; (800797c <TIM_OC1_SetConfig+0xdc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10c      	bne.n	800791e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f023 0308 	bic.w	r3, r3, #8
 800790a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f023 0304 	bic.w	r3, r3, #4
 800791c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a15      	ldr	r2, [pc, #84]	; (8007978 <TIM_OC1_SetConfig+0xd8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d003      	beq.n	800792e <TIM_OC1_SetConfig+0x8e>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a14      	ldr	r2, [pc, #80]	; (800797c <TIM_OC1_SetConfig+0xdc>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d111      	bne.n	8007952 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800793c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	621a      	str	r2, [r3, #32]
}
 800796c:	bf00      	nop
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400

08007980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f023 0210 	bic.w	r2, r3, #16
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0320 	bic.w	r3, r3, #32
 80079ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <TIM_OC2_SetConfig+0xe4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_OC2_SetConfig+0x68>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <TIM_OC2_SetConfig+0xe8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10d      	bne.n	8007a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <TIM_OC2_SetConfig+0xe4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC2_SetConfig+0x94>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <TIM_OC2_SetConfig+0xe8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d113      	bne.n	8007a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400

08007a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <TIM_OC3_SetConfig+0xe0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_OC3_SetConfig+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a20      	ldr	r2, [pc, #128]	; (8007b50 <TIM_OC3_SetConfig+0xe4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d10d      	bne.n	8007aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	021b      	lsls	r3, r3, #8
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a16      	ldr	r2, [pc, #88]	; (8007b4c <TIM_OC3_SetConfig+0xe0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC3_SetConfig+0x92>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a15      	ldr	r2, [pc, #84]	; (8007b50 <TIM_OC3_SetConfig+0xe4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d113      	bne.n	8007b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40010400 	.word	0x40010400

08007b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	031b      	lsls	r3, r3, #12
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a12      	ldr	r2, [pc, #72]	; (8007bf8 <TIM_OC4_SetConfig+0xa4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC4_SetConfig+0x68>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <TIM_OC4_SetConfig+0xa8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d109      	bne.n	8007bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	019b      	lsls	r3, r3, #6
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400

08007c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f023 0201 	bic.w	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f023 030a 	bic.w	r3, r3, #10
 8007c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b087      	sub	sp, #28
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f023 0210 	bic.w	r2, r3, #16
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	031b      	lsls	r3, r3, #12
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f043 0307 	orr.w	r3, r3, #7
 8007ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	609a      	str	r2, [r3, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	021a      	lsls	r2, r3, #8
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2201      	movs	r2, #1
 8007d48:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a1a      	ldr	r2, [r3, #32]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	43db      	mvns	r3, r3
 8007d56:	401a      	ands	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a1a      	ldr	r2, [r3, #32]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e05a      	b.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a21      	ldr	r2, [pc, #132]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d022      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de4:	d01d      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d018      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d013      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d00e      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a18      	ldr	r2, [pc, #96]	; (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d009      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d004      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d10c      	bne.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40000400 	.word	0x40000400
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40000c00 	.word	0x40000c00
 8007e6c:	40010400 	.word	0x40010400
 8007e70:	40014000 	.word	0x40014000
 8007e74:	40001800 	.word	0x40001800

08007e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e03f      	b.n	8007f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fb f94a 	bl	8003160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2224      	movs	r2, #36	; 0x24
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fddb 	bl	8008aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695a      	ldr	r2, [r3, #20]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b08a      	sub	sp, #40	; 0x28
 8007f3e:	af02      	add	r7, sp, #8
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	4613      	mov	r3, r2
 8007f48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d17c      	bne.n	8008054 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <HAL_UART_Transmit+0x2c>
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e075      	b.n	8008056 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_UART_Transmit+0x3e>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e06e      	b.n	8008056 <HAL_UART_Transmit+0x11c>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2221      	movs	r2, #33	; 0x21
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f8e:	f7fb fa05 	bl	800339c <HAL_GetTick>
 8007f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	88fa      	ldrh	r2, [r7, #6]
 8007f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	88fa      	ldrh	r2, [r7, #6]
 8007f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa8:	d108      	bne.n	8007fbc <HAL_UART_Transmit+0x82>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	e003      	b.n	8007fc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007fcc:	e02a      	b.n	8008024 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2180      	movs	r1, #128	; 0x80
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 fb1f 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e036      	b.n	8008056 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10b      	bne.n	8008006 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	3302      	adds	r3, #2
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	e007      	b.n	8008016 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	3301      	adds	r3, #1
 8008014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800801a:	b29b      	uxth	r3, r3
 800801c:	3b01      	subs	r3, #1
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1cf      	bne.n	8007fce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2200      	movs	r2, #0
 8008036:	2140      	movs	r1, #64	; 0x40
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 faef 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e006      	b.n	8008056 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e000      	b.n	8008056 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	4613      	mov	r3, r2
 800806a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b20      	cmp	r3, #32
 8008076:	d11d      	bne.n	80080b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <HAL_UART_Receive_IT+0x26>
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e016      	b.n	80080b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_UART_Receive_IT+0x38>
 8008092:	2302      	movs	r3, #2
 8008094:	e00f      	b.n	80080b6 <HAL_UART_Receive_IT+0x58>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	461a      	mov	r2, r3
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fb24 	bl	80086f8 <UART_Start_Receive_IT>
 80080b0:	4603      	mov	r3, r0
 80080b2:	e000      	b.n	80080b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80080b4:	2302      	movs	r3, #2
  }
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b0ba      	sub	sp, #232	; 0xe8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80080fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10f      	bne.n	8008126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d009      	beq.n	8008126 <HAL_UART_IRQHandler+0x66>
 8008112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fc03 	bl	800892a <UART_Receive_IT>
      return;
 8008124:	e256      	b.n	80085d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80de 	beq.w	80082ec <HAL_UART_IRQHandler+0x22c>
 8008130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d106      	bne.n	800814a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800813c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008140:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80d1 	beq.w	80082ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800814a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <HAL_UART_IRQHandler+0xae>
 8008156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	f043 0201 	orr.w	r2, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <HAL_UART_IRQHandler+0xd2>
 800817a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f043 0202 	orr.w	r2, r3, #2
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <HAL_UART_IRQHandler+0xf6>
 800819e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	f043 0204 	orr.w	r2, r3, #4
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80081b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d011      	beq.n	80081e6 <HAL_UART_IRQHandler+0x126>
 80081c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80081ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	f043 0208 	orr.w	r2, r3, #8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 81ed 	beq.w	80085ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d008      	beq.n	800820e <HAL_UART_IRQHandler+0x14e>
 80081fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb8e 	bl	800892a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	bf0c      	ite	eq
 800821c:	2301      	moveq	r3, #1
 800821e:	2300      	movne	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d103      	bne.n	800823a <HAL_UART_IRQHandler+0x17a>
 8008232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008236:	2b00      	cmp	r3, #0
 8008238:	d04f      	beq.n	80082da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa96 	bl	800876c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d141      	bne.n	80082d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3314      	adds	r3, #20
 8008254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800826c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3314      	adds	r3, #20
 8008276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800827a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800827e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1d9      	bne.n	800824e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d013      	beq.n	80082ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	4a7d      	ldr	r2, [pc, #500]	; (800849c <HAL_UART_IRQHandler+0x3dc>)
 80082a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fb ff3e 	bl	8004130 <HAL_DMA_Abort_IT>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d016      	beq.n	80082e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c8:	e00e      	b.n	80082e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f990 	bl	80085f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d0:	e00a      	b.n	80082e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f98c 	bl	80085f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d8:	e006      	b.n	80082e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f988 	bl	80085f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082e6:	e170      	b.n	80085ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e8:	bf00      	nop
    return;
 80082ea:	e16e      	b.n	80085ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	f040 814a 	bne.w	800858a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80082f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fa:	f003 0310 	and.w	r3, r3, #16
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 8143 	beq.w	800858a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 813c 	beq.w	800858a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008312:	2300      	movs	r3, #0
 8008314:	60bb      	str	r3, [r7, #8]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60bb      	str	r3, [r7, #8]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	60bb      	str	r3, [r7, #8]
 8008326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	f040 80b4 	bne.w	80084a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 8140 	beq.w	80085ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008356:	429a      	cmp	r2, r3
 8008358:	f080 8139 	bcs.w	80085ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008362:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800836e:	f000 8088 	beq.w	8008482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	330c      	adds	r3, #12
 8008378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800838c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	330c      	adds	r3, #12
 800839a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800839e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1d9      	bne.n	8008372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3314      	adds	r3, #20
 80083c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083d0:	f023 0301 	bic.w	r3, r3, #1
 80083d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3314      	adds	r3, #20
 80083de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e1      	bne.n	80083be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3314      	adds	r3, #20
 8008400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800840a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800840c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3314      	adds	r3, #20
 800841a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800841e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008420:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800842c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e3      	bne.n	80083fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008452:	f023 0310 	bic.w	r3, r3, #16
 8008456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008464:	65ba      	str	r2, [r7, #88]	; 0x58
 8008466:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800846a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e3      	bne.n	8008440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	4618      	mov	r0, r3
 800847e:	f7fb fde7 	bl	8004050 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800848a:	b29b      	uxth	r3, r3
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	b29b      	uxth	r3, r3
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f8b6 	bl	8008604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008498:	e099      	b.n	80085ce <HAL_UART_IRQHandler+0x50e>
 800849a:	bf00      	nop
 800849c:	08008833 	.word	0x08008833
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 808b 	beq.w	80085d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80084bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 8086 	beq.w	80085d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	330c      	adds	r3, #12
 80084cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	330c      	adds	r3, #12
 80084e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80084ea:	647a      	str	r2, [r7, #68]	; 0x44
 80084ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e3      	bne.n	80084c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3314      	adds	r3, #20
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	623b      	str	r3, [r7, #32]
   return(result);
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	f023 0301 	bic.w	r3, r3, #1
 8008514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3314      	adds	r3, #20
 800851e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008522:	633a      	str	r2, [r7, #48]	; 0x30
 8008524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e3      	bne.n	80084fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	330c      	adds	r3, #12
 800854a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	60fb      	str	r3, [r7, #12]
   return(result);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0310 	bic.w	r3, r3, #16
 800855a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008568:	61fa      	str	r2, [r7, #28]
 800856a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	69b9      	ldr	r1, [r7, #24]
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	617b      	str	r3, [r7, #20]
   return(result);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e3      	bne.n	8008544 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800857c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f83e 	bl	8008604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008588:	e023      	b.n	80085d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800858a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800858e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <HAL_UART_IRQHandler+0x4ea>
 8008596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f959 	bl	800885a <UART_Transmit_IT>
    return;
 80085a8:	e014      	b.n	80085d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00e      	beq.n	80085d4 <HAL_UART_IRQHandler+0x514>
 80085b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d008      	beq.n	80085d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f999 	bl	80088fa <UART_EndTransmit_IT>
    return;
 80085c8:	e004      	b.n	80085d4 <HAL_UART_IRQHandler+0x514>
    return;
 80085ca:	bf00      	nop
 80085cc:	e002      	b.n	80085d4 <HAL_UART_IRQHandler+0x514>
      return;
 80085ce:	bf00      	nop
 80085d0:	e000      	b.n	80085d4 <HAL_UART_IRQHandler+0x514>
      return;
 80085d2:	bf00      	nop
  }
}
 80085d4:	37e8      	adds	r7, #232	; 0xe8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop

080085dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b090      	sub	sp, #64	; 0x40
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800862c:	e050      	b.n	80086d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d04c      	beq.n	80086d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008638:	2b00      	cmp	r3, #0
 800863a:	d007      	beq.n	800864c <UART_WaitOnFlagUntilTimeout+0x30>
 800863c:	f7fa feae 	bl	800339c <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008648:	429a      	cmp	r2, r3
 800864a:	d241      	bcs.n	80086d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	330c      	adds	r3, #12
 800866a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800866c:	637a      	str	r2, [r7, #52]	; 0x34
 800866e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e5      	bne.n	800864c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3314      	adds	r3, #20
 8008686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	613b      	str	r3, [r7, #16]
   return(result);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f023 0301 	bic.w	r3, r3, #1
 8008696:	63bb      	str	r3, [r7, #56]	; 0x38
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3314      	adds	r3, #20
 800869e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a0:	623a      	str	r2, [r7, #32]
 80086a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	69f9      	ldr	r1, [r7, #28]
 80086a6:	6a3a      	ldr	r2, [r7, #32]
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e5      	bne.n	8008680 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e00f      	b.n	80086f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	4013      	ands	r3, r2
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	429a      	cmp	r2, r3
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	461a      	mov	r2, r3
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d09f      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3740      	adds	r7, #64	; 0x40
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	88fa      	ldrh	r2, [r7, #6]
 8008710:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	88fa      	ldrh	r2, [r7, #6]
 8008716:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2222      	movs	r2, #34	; 0x22
 8008722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800873c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	695a      	ldr	r2, [r3, #20]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0201 	orr.w	r2, r2, #1
 800874c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0220 	orr.w	r2, r2, #32
 800875c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b095      	sub	sp, #84	; 0x54
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800878a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008794:	643a      	str	r2, [r7, #64]	; 0x40
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800879a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3314      	adds	r3, #20
 80087c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d119      	bne.n	8008818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	330c      	adds	r3, #12
 80087ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f023 0310 	bic.w	r3, r3, #16
 80087fa:	647b      	str	r3, [r7, #68]	; 0x44
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008804:	61ba      	str	r2, [r7, #24]
 8008806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6979      	ldr	r1, [r7, #20]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	613b      	str	r3, [r7, #16]
   return(result);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e5      	bne.n	80087e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008826:	bf00      	nop
 8008828:	3754      	adds	r7, #84	; 0x54
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7ff fecf 	bl	80085f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b21      	cmp	r3, #33	; 0x21
 800886c:	d13e      	bne.n	80088ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008876:	d114      	bne.n	80088a2 <UART_Transmit_IT+0x48>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d110      	bne.n	80088a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	1c9a      	adds	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	621a      	str	r2, [r3, #32]
 80088a0:	e008      	b.n	80088b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6211      	str	r1, [r2, #32]
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29b      	uxth	r3, r3
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	4619      	mov	r1, r3
 80088c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10f      	bne.n	80088e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e000      	b.n	80088ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088ec:	2302      	movs	r3, #2
  }
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fe5e 	bl	80085dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b08c      	sub	sp, #48	; 0x30
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b22      	cmp	r3, #34	; 0x22
 800893c:	f040 80ab 	bne.w	8008a96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008948:	d117      	bne.n	800897a <UART_Receive_IT+0x50>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d113      	bne.n	800897a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008968:	b29a      	uxth	r2, r3
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	1c9a      	adds	r2, r3, #2
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	629a      	str	r2, [r3, #40]	; 0x28
 8008978:	e026      	b.n	80089c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008980:	2300      	movs	r3, #0
 8008982:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898c:	d007      	beq.n	800899e <UART_Receive_IT+0x74>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10a      	bne.n	80089ac <UART_Receive_IT+0x82>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	e008      	b.n	80089be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	4619      	mov	r1, r3
 80089d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d15a      	bne.n	8008a92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0220 	bic.w	r2, r2, #32
 80089ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0201 	bic.w	r2, r2, #1
 8008a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d135      	bne.n	8008a88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	613b      	str	r3, [r7, #16]
   return(result);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f023 0310 	bic.w	r3, r3, #16
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	330c      	adds	r3, #12
 8008a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a42:	623a      	str	r2, [r7, #32]
 8008a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	69f9      	ldr	r1, [r7, #28]
 8008a48:	6a3a      	ldr	r2, [r7, #32]
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d10a      	bne.n	8008a7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff fdbf 	bl	8008604 <HAL_UARTEx_RxEventCallback>
 8008a86:	e002      	b.n	8008a8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7fa fb21 	bl	80030d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e002      	b.n	8008a98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e000      	b.n	8008a98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a96:	2302      	movs	r3, #2
  }
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3730      	adds	r7, #48	; 0x30
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	b09f      	sub	sp, #124	; 0x7c
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab6:	68d9      	ldr	r1, [r3, #12]
 8008ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	ea40 0301 	orr.w	r3, r0, r1
 8008ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ae4:	f021 010c 	bic.w	r1, r1, #12
 8008ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aee:	430b      	orrs	r3, r1
 8008af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afe:	6999      	ldr	r1, [r3, #24]
 8008b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	ea40 0301 	orr.w	r3, r0, r1
 8008b08:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	4bc5      	ldr	r3, [pc, #788]	; (8008e24 <UART_SetConfig+0x384>)
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d004      	beq.n	8008b1e <UART_SetConfig+0x7e>
 8008b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	4bc3      	ldr	r3, [pc, #780]	; (8008e28 <UART_SetConfig+0x388>)
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d103      	bne.n	8008b26 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b1e:	f7fd fb83 	bl	8006228 <HAL_RCC_GetPCLK2Freq>
 8008b22:	6778      	str	r0, [r7, #116]	; 0x74
 8008b24:	e002      	b.n	8008b2c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b26:	f7fd fb6b 	bl	8006200 <HAL_RCC_GetPCLK1Freq>
 8008b2a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b34:	f040 80b6 	bne.w	8008ca4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b3a:	461c      	mov	r4, r3
 8008b3c:	f04f 0500 	mov.w	r5, #0
 8008b40:	4622      	mov	r2, r4
 8008b42:	462b      	mov	r3, r5
 8008b44:	1891      	adds	r1, r2, r2
 8008b46:	6439      	str	r1, [r7, #64]	; 0x40
 8008b48:	415b      	adcs	r3, r3
 8008b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b50:	1912      	adds	r2, r2, r4
 8008b52:	eb45 0303 	adc.w	r3, r5, r3
 8008b56:	f04f 0000 	mov.w	r0, #0
 8008b5a:	f04f 0100 	mov.w	r1, #0
 8008b5e:	00d9      	lsls	r1, r3, #3
 8008b60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b64:	00d0      	lsls	r0, r2, #3
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	1911      	adds	r1, r2, r4
 8008b6c:	6639      	str	r1, [r7, #96]	; 0x60
 8008b6e:	416b      	adcs	r3, r5
 8008b70:	667b      	str	r3, [r7, #100]	; 0x64
 8008b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f04f 0300 	mov.w	r3, #0
 8008b7c:	1891      	adds	r1, r2, r2
 8008b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b80:	415b      	adcs	r3, r3
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008b8c:	f7f7 ff8e 	bl	8000aac <__aeabi_uldivmod>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4ba5      	ldr	r3, [pc, #660]	; (8008e2c <UART_SetConfig+0x38c>)
 8008b96:	fba3 2302 	umull	r2, r3, r3, r2
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	011e      	lsls	r6, r3, #4
 8008b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba0:	461c      	mov	r4, r3
 8008ba2:	f04f 0500 	mov.w	r5, #0
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	462b      	mov	r3, r5
 8008baa:	1891      	adds	r1, r2, r2
 8008bac:	6339      	str	r1, [r7, #48]	; 0x30
 8008bae:	415b      	adcs	r3, r3
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bb6:	1912      	adds	r2, r2, r4
 8008bb8:	eb45 0303 	adc.w	r3, r5, r3
 8008bbc:	f04f 0000 	mov.w	r0, #0
 8008bc0:	f04f 0100 	mov.w	r1, #0
 8008bc4:	00d9      	lsls	r1, r3, #3
 8008bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bca:	00d0      	lsls	r0, r2, #3
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	1911      	adds	r1, r2, r4
 8008bd2:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bd4:	416b      	adcs	r3, r5
 8008bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	f04f 0300 	mov.w	r3, #0
 8008be2:	1891      	adds	r1, r2, r2
 8008be4:	62b9      	str	r1, [r7, #40]	; 0x28
 8008be6:	415b      	adcs	r3, r3
 8008be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008bf2:	f7f7 ff5b 	bl	8000aac <__aeabi_uldivmod>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4b8c      	ldr	r3, [pc, #560]	; (8008e2c <UART_SetConfig+0x38c>)
 8008bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8008c00:	095b      	lsrs	r3, r3, #5
 8008c02:	2164      	movs	r1, #100	; 0x64
 8008c04:	fb01 f303 	mul.w	r3, r1, r3
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	3332      	adds	r3, #50	; 0x32
 8008c0e:	4a87      	ldr	r2, [pc, #540]	; (8008e2c <UART_SetConfig+0x38c>)
 8008c10:	fba2 2303 	umull	r2, r3, r2, r3
 8008c14:	095b      	lsrs	r3, r3, #5
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c1c:	441e      	add	r6, r3
 8008c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c20:	4618      	mov	r0, r3
 8008c22:	f04f 0100 	mov.w	r1, #0
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	1894      	adds	r4, r2, r2
 8008c2c:	623c      	str	r4, [r7, #32]
 8008c2e:	415b      	adcs	r3, r3
 8008c30:	627b      	str	r3, [r7, #36]	; 0x24
 8008c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c36:	1812      	adds	r2, r2, r0
 8008c38:	eb41 0303 	adc.w	r3, r1, r3
 8008c3c:	f04f 0400 	mov.w	r4, #0
 8008c40:	f04f 0500 	mov.w	r5, #0
 8008c44:	00dd      	lsls	r5, r3, #3
 8008c46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c4a:	00d4      	lsls	r4, r2, #3
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	462b      	mov	r3, r5
 8008c50:	1814      	adds	r4, r2, r0
 8008c52:	653c      	str	r4, [r7, #80]	; 0x50
 8008c54:	414b      	adcs	r3, r1
 8008c56:	657b      	str	r3, [r7, #84]	; 0x54
 8008c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f04f 0300 	mov.w	r3, #0
 8008c62:	1891      	adds	r1, r2, r2
 8008c64:	61b9      	str	r1, [r7, #24]
 8008c66:	415b      	adcs	r3, r3
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008c72:	f7f7 ff1b 	bl	8000aac <__aeabi_uldivmod>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4b6c      	ldr	r3, [pc, #432]	; (8008e2c <UART_SetConfig+0x38c>)
 8008c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c80:	095b      	lsrs	r3, r3, #5
 8008c82:	2164      	movs	r1, #100	; 0x64
 8008c84:	fb01 f303 	mul.w	r3, r1, r3
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	3332      	adds	r3, #50	; 0x32
 8008c8e:	4a67      	ldr	r2, [pc, #412]	; (8008e2c <UART_SetConfig+0x38c>)
 8008c90:	fba2 2303 	umull	r2, r3, r2, r3
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	f003 0207 	and.w	r2, r3, #7
 8008c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4432      	add	r2, r6
 8008ca0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ca2:	e0b9      	b.n	8008e18 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ca6:	461c      	mov	r4, r3
 8008ca8:	f04f 0500 	mov.w	r5, #0
 8008cac:	4622      	mov	r2, r4
 8008cae:	462b      	mov	r3, r5
 8008cb0:	1891      	adds	r1, r2, r2
 8008cb2:	6139      	str	r1, [r7, #16]
 8008cb4:	415b      	adcs	r3, r3
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cbc:	1912      	adds	r2, r2, r4
 8008cbe:	eb45 0303 	adc.w	r3, r5, r3
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f04f 0100 	mov.w	r1, #0
 8008cca:	00d9      	lsls	r1, r3, #3
 8008ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cd0:	00d0      	lsls	r0, r2, #3
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	eb12 0804 	adds.w	r8, r2, r4
 8008cda:	eb43 0905 	adc.w	r9, r3, r5
 8008cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f04f 0100 	mov.w	r1, #0
 8008ce8:	f04f 0200 	mov.w	r2, #0
 8008cec:	f04f 0300 	mov.w	r3, #0
 8008cf0:	008b      	lsls	r3, r1, #2
 8008cf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cf6:	0082      	lsls	r2, r0, #2
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	f7f7 fed6 	bl	8000aac <__aeabi_uldivmod>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4b49      	ldr	r3, [pc, #292]	; (8008e2c <UART_SetConfig+0x38c>)
 8008d06:	fba3 2302 	umull	r2, r3, r3, r2
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	011e      	lsls	r6, r3, #4
 8008d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d10:	4618      	mov	r0, r3
 8008d12:	f04f 0100 	mov.w	r1, #0
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	1894      	adds	r4, r2, r2
 8008d1c:	60bc      	str	r4, [r7, #8]
 8008d1e:	415b      	adcs	r3, r3
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d26:	1812      	adds	r2, r2, r0
 8008d28:	eb41 0303 	adc.w	r3, r1, r3
 8008d2c:	f04f 0400 	mov.w	r4, #0
 8008d30:	f04f 0500 	mov.w	r5, #0
 8008d34:	00dd      	lsls	r5, r3, #3
 8008d36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d3a:	00d4      	lsls	r4, r2, #3
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	462b      	mov	r3, r5
 8008d40:	1814      	adds	r4, r2, r0
 8008d42:	64bc      	str	r4, [r7, #72]	; 0x48
 8008d44:	414b      	adcs	r3, r1
 8008d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f04f 0100 	mov.w	r1, #0
 8008d52:	f04f 0200 	mov.w	r2, #0
 8008d56:	f04f 0300 	mov.w	r3, #0
 8008d5a:	008b      	lsls	r3, r1, #2
 8008d5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d60:	0082      	lsls	r2, r0, #2
 8008d62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008d66:	f7f7 fea1 	bl	8000aac <__aeabi_uldivmod>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4b2f      	ldr	r3, [pc, #188]	; (8008e2c <UART_SetConfig+0x38c>)
 8008d70:	fba3 1302 	umull	r1, r3, r3, r2
 8008d74:	095b      	lsrs	r3, r3, #5
 8008d76:	2164      	movs	r1, #100	; 0x64
 8008d78:	fb01 f303 	mul.w	r3, r1, r3
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	3332      	adds	r3, #50	; 0x32
 8008d82:	4a2a      	ldr	r2, [pc, #168]	; (8008e2c <UART_SetConfig+0x38c>)
 8008d84:	fba2 2303 	umull	r2, r3, r2, r3
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d8e:	441e      	add	r6, r3
 8008d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d92:	4618      	mov	r0, r3
 8008d94:	f04f 0100 	mov.w	r1, #0
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	1894      	adds	r4, r2, r2
 8008d9e:	603c      	str	r4, [r7, #0]
 8008da0:	415b      	adcs	r3, r3
 8008da2:	607b      	str	r3, [r7, #4]
 8008da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da8:	1812      	adds	r2, r2, r0
 8008daa:	eb41 0303 	adc.w	r3, r1, r3
 8008dae:	f04f 0400 	mov.w	r4, #0
 8008db2:	f04f 0500 	mov.w	r5, #0
 8008db6:	00dd      	lsls	r5, r3, #3
 8008db8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008dbc:	00d4      	lsls	r4, r2, #3
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	eb12 0a00 	adds.w	sl, r2, r0
 8008dc6:	eb43 0b01 	adc.w	fp, r3, r1
 8008dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f04f 0100 	mov.w	r1, #0
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	f04f 0300 	mov.w	r3, #0
 8008ddc:	008b      	lsls	r3, r1, #2
 8008dde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008de2:	0082      	lsls	r2, r0, #2
 8008de4:	4650      	mov	r0, sl
 8008de6:	4659      	mov	r1, fp
 8008de8:	f7f7 fe60 	bl	8000aac <__aeabi_uldivmod>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <UART_SetConfig+0x38c>)
 8008df2:	fba3 1302 	umull	r1, r3, r3, r2
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	2164      	movs	r1, #100	; 0x64
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	3332      	adds	r3, #50	; 0x32
 8008e04:	4a09      	ldr	r2, [pc, #36]	; (8008e2c <UART_SetConfig+0x38c>)
 8008e06:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	f003 020f 	and.w	r2, r3, #15
 8008e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4432      	add	r2, r6
 8008e16:	609a      	str	r2, [r3, #8]
}
 8008e18:	bf00      	nop
 8008e1a:	377c      	adds	r7, #124	; 0x7c
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e22:	bf00      	nop
 8008e24:	40011000 	.word	0x40011000
 8008e28:	40011400 	.word	0x40011400
 8008e2c:	51eb851f 	.word	0x51eb851f

08008e30 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e48:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4b20      	ldr	r3, [pc, #128]	; (8008ed0 <FSMC_NORSRAM_Init+0xa0>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e5a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008e60:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008e66:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008e6c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008e72:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008e78:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008e7e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008e84:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008e8a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008e90:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008e96:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008e9c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d103      	bne.n	8008eb4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	fff00080 	.word	0xfff00080

08008ed4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eee:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008ef6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f02:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008f0a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008f12:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f1c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	3b02      	subs	r3, #2
 8008f24:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008f26:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6979      	ldr	r1, [r7, #20]
 8008f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f68:	d122      	bne.n	8008fb0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f72:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	4b15      	ldr	r3, [pc, #84]	; (8008fcc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f86:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008f8e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008f96:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f9c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6979      	ldr	r1, [r7, #20]
 8008faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008fae:	e005      	b.n	8008fbc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	cff00000 	.word	0xcff00000

08008fd0 <__errno>:
 8008fd0:	4b01      	ldr	r3, [pc, #4]	; (8008fd8 <__errno+0x8>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	2000001c 	.word	0x2000001c

08008fdc <__libc_init_array>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	4d0d      	ldr	r5, [pc, #52]	; (8009014 <__libc_init_array+0x38>)
 8008fe0:	4c0d      	ldr	r4, [pc, #52]	; (8009018 <__libc_init_array+0x3c>)
 8008fe2:	1b64      	subs	r4, r4, r5
 8008fe4:	10a4      	asrs	r4, r4, #2
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	42a6      	cmp	r6, r4
 8008fea:	d109      	bne.n	8009000 <__libc_init_array+0x24>
 8008fec:	4d0b      	ldr	r5, [pc, #44]	; (800901c <__libc_init_array+0x40>)
 8008fee:	4c0c      	ldr	r4, [pc, #48]	; (8009020 <__libc_init_array+0x44>)
 8008ff0:	f000 fc4e 	bl	8009890 <_init>
 8008ff4:	1b64      	subs	r4, r4, r5
 8008ff6:	10a4      	asrs	r4, r4, #2
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	42a6      	cmp	r6, r4
 8008ffc:	d105      	bne.n	800900a <__libc_init_array+0x2e>
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	f855 3b04 	ldr.w	r3, [r5], #4
 8009004:	4798      	blx	r3
 8009006:	3601      	adds	r6, #1
 8009008:	e7ee      	b.n	8008fe8 <__libc_init_array+0xc>
 800900a:	f855 3b04 	ldr.w	r3, [r5], #4
 800900e:	4798      	blx	r3
 8009010:	3601      	adds	r6, #1
 8009012:	e7f2      	b.n	8008ffa <__libc_init_array+0x1e>
 8009014:	0800c94c 	.word	0x0800c94c
 8009018:	0800c94c 	.word	0x0800c94c
 800901c:	0800c94c 	.word	0x0800c94c
 8009020:	0800c950 	.word	0x0800c950

08009024 <memset>:
 8009024:	4402      	add	r2, r0
 8009026:	4603      	mov	r3, r0
 8009028:	4293      	cmp	r3, r2
 800902a:	d100      	bne.n	800902e <memset+0xa>
 800902c:	4770      	bx	lr
 800902e:	f803 1b01 	strb.w	r1, [r3], #1
 8009032:	e7f9      	b.n	8009028 <memset+0x4>

08009034 <siprintf>:
 8009034:	b40e      	push	{r1, r2, r3}
 8009036:	b500      	push	{lr}
 8009038:	b09c      	sub	sp, #112	; 0x70
 800903a:	ab1d      	add	r3, sp, #116	; 0x74
 800903c:	9002      	str	r0, [sp, #8]
 800903e:	9006      	str	r0, [sp, #24]
 8009040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009044:	4809      	ldr	r0, [pc, #36]	; (800906c <siprintf+0x38>)
 8009046:	9107      	str	r1, [sp, #28]
 8009048:	9104      	str	r1, [sp, #16]
 800904a:	4909      	ldr	r1, [pc, #36]	; (8009070 <siprintf+0x3c>)
 800904c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009050:	9105      	str	r1, [sp, #20]
 8009052:	6800      	ldr	r0, [r0, #0]
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	a902      	add	r1, sp, #8
 8009058:	f000 f868 	bl	800912c <_svfiprintf_r>
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	2200      	movs	r2, #0
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	b01c      	add	sp, #112	; 0x70
 8009064:	f85d eb04 	ldr.w	lr, [sp], #4
 8009068:	b003      	add	sp, #12
 800906a:	4770      	bx	lr
 800906c:	2000001c 	.word	0x2000001c
 8009070:	ffff0208 	.word	0xffff0208

08009074 <__ssputs_r>:
 8009074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009078:	688e      	ldr	r6, [r1, #8]
 800907a:	429e      	cmp	r6, r3
 800907c:	4682      	mov	sl, r0
 800907e:	460c      	mov	r4, r1
 8009080:	4690      	mov	r8, r2
 8009082:	461f      	mov	r7, r3
 8009084:	d838      	bhi.n	80090f8 <__ssputs_r+0x84>
 8009086:	898a      	ldrh	r2, [r1, #12]
 8009088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800908c:	d032      	beq.n	80090f4 <__ssputs_r+0x80>
 800908e:	6825      	ldr	r5, [r4, #0]
 8009090:	6909      	ldr	r1, [r1, #16]
 8009092:	eba5 0901 	sub.w	r9, r5, r1
 8009096:	6965      	ldr	r5, [r4, #20]
 8009098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800909c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090a0:	3301      	adds	r3, #1
 80090a2:	444b      	add	r3, r9
 80090a4:	106d      	asrs	r5, r5, #1
 80090a6:	429d      	cmp	r5, r3
 80090a8:	bf38      	it	cc
 80090aa:	461d      	movcc	r5, r3
 80090ac:	0553      	lsls	r3, r2, #21
 80090ae:	d531      	bpl.n	8009114 <__ssputs_r+0xa0>
 80090b0:	4629      	mov	r1, r5
 80090b2:	f000 fb47 	bl	8009744 <_malloc_r>
 80090b6:	4606      	mov	r6, r0
 80090b8:	b950      	cbnz	r0, 80090d0 <__ssputs_r+0x5c>
 80090ba:	230c      	movs	r3, #12
 80090bc:	f8ca 3000 	str.w	r3, [sl]
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d0:	6921      	ldr	r1, [r4, #16]
 80090d2:	464a      	mov	r2, r9
 80090d4:	f000 fabe 	bl	8009654 <memcpy>
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	6126      	str	r6, [r4, #16]
 80090e6:	6165      	str	r5, [r4, #20]
 80090e8:	444e      	add	r6, r9
 80090ea:	eba5 0509 	sub.w	r5, r5, r9
 80090ee:	6026      	str	r6, [r4, #0]
 80090f0:	60a5      	str	r5, [r4, #8]
 80090f2:	463e      	mov	r6, r7
 80090f4:	42be      	cmp	r6, r7
 80090f6:	d900      	bls.n	80090fa <__ssputs_r+0x86>
 80090f8:	463e      	mov	r6, r7
 80090fa:	4632      	mov	r2, r6
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	4641      	mov	r1, r8
 8009100:	f000 fab6 	bl	8009670 <memmove>
 8009104:	68a3      	ldr	r3, [r4, #8]
 8009106:	6822      	ldr	r2, [r4, #0]
 8009108:	1b9b      	subs	r3, r3, r6
 800910a:	4432      	add	r2, r6
 800910c:	60a3      	str	r3, [r4, #8]
 800910e:	6022      	str	r2, [r4, #0]
 8009110:	2000      	movs	r0, #0
 8009112:	e7db      	b.n	80090cc <__ssputs_r+0x58>
 8009114:	462a      	mov	r2, r5
 8009116:	f000 fb6f 	bl	80097f8 <_realloc_r>
 800911a:	4606      	mov	r6, r0
 800911c:	2800      	cmp	r0, #0
 800911e:	d1e1      	bne.n	80090e4 <__ssputs_r+0x70>
 8009120:	6921      	ldr	r1, [r4, #16]
 8009122:	4650      	mov	r0, sl
 8009124:	f000 fabe 	bl	80096a4 <_free_r>
 8009128:	e7c7      	b.n	80090ba <__ssputs_r+0x46>
	...

0800912c <_svfiprintf_r>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	4698      	mov	r8, r3
 8009132:	898b      	ldrh	r3, [r1, #12]
 8009134:	061b      	lsls	r3, r3, #24
 8009136:	b09d      	sub	sp, #116	; 0x74
 8009138:	4607      	mov	r7, r0
 800913a:	460d      	mov	r5, r1
 800913c:	4614      	mov	r4, r2
 800913e:	d50e      	bpl.n	800915e <_svfiprintf_r+0x32>
 8009140:	690b      	ldr	r3, [r1, #16]
 8009142:	b963      	cbnz	r3, 800915e <_svfiprintf_r+0x32>
 8009144:	2140      	movs	r1, #64	; 0x40
 8009146:	f000 fafd 	bl	8009744 <_malloc_r>
 800914a:	6028      	str	r0, [r5, #0]
 800914c:	6128      	str	r0, [r5, #16]
 800914e:	b920      	cbnz	r0, 800915a <_svfiprintf_r+0x2e>
 8009150:	230c      	movs	r3, #12
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	e0d1      	b.n	80092fe <_svfiprintf_r+0x1d2>
 800915a:	2340      	movs	r3, #64	; 0x40
 800915c:	616b      	str	r3, [r5, #20]
 800915e:	2300      	movs	r3, #0
 8009160:	9309      	str	r3, [sp, #36]	; 0x24
 8009162:	2320      	movs	r3, #32
 8009164:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009168:	f8cd 800c 	str.w	r8, [sp, #12]
 800916c:	2330      	movs	r3, #48	; 0x30
 800916e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009318 <_svfiprintf_r+0x1ec>
 8009172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009176:	f04f 0901 	mov.w	r9, #1
 800917a:	4623      	mov	r3, r4
 800917c:	469a      	mov	sl, r3
 800917e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009182:	b10a      	cbz	r2, 8009188 <_svfiprintf_r+0x5c>
 8009184:	2a25      	cmp	r2, #37	; 0x25
 8009186:	d1f9      	bne.n	800917c <_svfiprintf_r+0x50>
 8009188:	ebba 0b04 	subs.w	fp, sl, r4
 800918c:	d00b      	beq.n	80091a6 <_svfiprintf_r+0x7a>
 800918e:	465b      	mov	r3, fp
 8009190:	4622      	mov	r2, r4
 8009192:	4629      	mov	r1, r5
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff ff6d 	bl	8009074 <__ssputs_r>
 800919a:	3001      	adds	r0, #1
 800919c:	f000 80aa 	beq.w	80092f4 <_svfiprintf_r+0x1c8>
 80091a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a2:	445a      	add	r2, fp
 80091a4:	9209      	str	r2, [sp, #36]	; 0x24
 80091a6:	f89a 3000 	ldrb.w	r3, [sl]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 80a2 	beq.w	80092f4 <_svfiprintf_r+0x1c8>
 80091b0:	2300      	movs	r3, #0
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ba:	f10a 0a01 	add.w	sl, sl, #1
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	9307      	str	r3, [sp, #28]
 80091c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c6:	931a      	str	r3, [sp, #104]	; 0x68
 80091c8:	4654      	mov	r4, sl
 80091ca:	2205      	movs	r2, #5
 80091cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d0:	4851      	ldr	r0, [pc, #324]	; (8009318 <_svfiprintf_r+0x1ec>)
 80091d2:	f7f6 fffd 	bl	80001d0 <memchr>
 80091d6:	9a04      	ldr	r2, [sp, #16]
 80091d8:	b9d8      	cbnz	r0, 8009212 <_svfiprintf_r+0xe6>
 80091da:	06d0      	lsls	r0, r2, #27
 80091dc:	bf44      	itt	mi
 80091de:	2320      	movmi	r3, #32
 80091e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e4:	0711      	lsls	r1, r2, #28
 80091e6:	bf44      	itt	mi
 80091e8:	232b      	movmi	r3, #43	; 0x2b
 80091ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ee:	f89a 3000 	ldrb.w	r3, [sl]
 80091f2:	2b2a      	cmp	r3, #42	; 0x2a
 80091f4:	d015      	beq.n	8009222 <_svfiprintf_r+0xf6>
 80091f6:	9a07      	ldr	r2, [sp, #28]
 80091f8:	4654      	mov	r4, sl
 80091fa:	2000      	movs	r0, #0
 80091fc:	f04f 0c0a 	mov.w	ip, #10
 8009200:	4621      	mov	r1, r4
 8009202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009206:	3b30      	subs	r3, #48	; 0x30
 8009208:	2b09      	cmp	r3, #9
 800920a:	d94e      	bls.n	80092aa <_svfiprintf_r+0x17e>
 800920c:	b1b0      	cbz	r0, 800923c <_svfiprintf_r+0x110>
 800920e:	9207      	str	r2, [sp, #28]
 8009210:	e014      	b.n	800923c <_svfiprintf_r+0x110>
 8009212:	eba0 0308 	sub.w	r3, r0, r8
 8009216:	fa09 f303 	lsl.w	r3, r9, r3
 800921a:	4313      	orrs	r3, r2
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	46a2      	mov	sl, r4
 8009220:	e7d2      	b.n	80091c8 <_svfiprintf_r+0x9c>
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	1d19      	adds	r1, r3, #4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	9103      	str	r1, [sp, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfbb      	ittet	lt
 800922e:	425b      	neglt	r3, r3
 8009230:	f042 0202 	orrlt.w	r2, r2, #2
 8009234:	9307      	strge	r3, [sp, #28]
 8009236:	9307      	strlt	r3, [sp, #28]
 8009238:	bfb8      	it	lt
 800923a:	9204      	strlt	r2, [sp, #16]
 800923c:	7823      	ldrb	r3, [r4, #0]
 800923e:	2b2e      	cmp	r3, #46	; 0x2e
 8009240:	d10c      	bne.n	800925c <_svfiprintf_r+0x130>
 8009242:	7863      	ldrb	r3, [r4, #1]
 8009244:	2b2a      	cmp	r3, #42	; 0x2a
 8009246:	d135      	bne.n	80092b4 <_svfiprintf_r+0x188>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	1d1a      	adds	r2, r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	9203      	str	r2, [sp, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bfb8      	it	lt
 8009254:	f04f 33ff 	movlt.w	r3, #4294967295
 8009258:	3402      	adds	r4, #2
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009328 <_svfiprintf_r+0x1fc>
 8009260:	7821      	ldrb	r1, [r4, #0]
 8009262:	2203      	movs	r2, #3
 8009264:	4650      	mov	r0, sl
 8009266:	f7f6 ffb3 	bl	80001d0 <memchr>
 800926a:	b140      	cbz	r0, 800927e <_svfiprintf_r+0x152>
 800926c:	2340      	movs	r3, #64	; 0x40
 800926e:	eba0 000a 	sub.w	r0, r0, sl
 8009272:	fa03 f000 	lsl.w	r0, r3, r0
 8009276:	9b04      	ldr	r3, [sp, #16]
 8009278:	4303      	orrs	r3, r0
 800927a:	3401      	adds	r4, #1
 800927c:	9304      	str	r3, [sp, #16]
 800927e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009282:	4826      	ldr	r0, [pc, #152]	; (800931c <_svfiprintf_r+0x1f0>)
 8009284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009288:	2206      	movs	r2, #6
 800928a:	f7f6 ffa1 	bl	80001d0 <memchr>
 800928e:	2800      	cmp	r0, #0
 8009290:	d038      	beq.n	8009304 <_svfiprintf_r+0x1d8>
 8009292:	4b23      	ldr	r3, [pc, #140]	; (8009320 <_svfiprintf_r+0x1f4>)
 8009294:	bb1b      	cbnz	r3, 80092de <_svfiprintf_r+0x1b2>
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	3307      	adds	r3, #7
 800929a:	f023 0307 	bic.w	r3, r3, #7
 800929e:	3308      	adds	r3, #8
 80092a0:	9303      	str	r3, [sp, #12]
 80092a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a4:	4433      	add	r3, r6
 80092a6:	9309      	str	r3, [sp, #36]	; 0x24
 80092a8:	e767      	b.n	800917a <_svfiprintf_r+0x4e>
 80092aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ae:	460c      	mov	r4, r1
 80092b0:	2001      	movs	r0, #1
 80092b2:	e7a5      	b.n	8009200 <_svfiprintf_r+0xd4>
 80092b4:	2300      	movs	r3, #0
 80092b6:	3401      	adds	r4, #1
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	4619      	mov	r1, r3
 80092bc:	f04f 0c0a 	mov.w	ip, #10
 80092c0:	4620      	mov	r0, r4
 80092c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c6:	3a30      	subs	r2, #48	; 0x30
 80092c8:	2a09      	cmp	r2, #9
 80092ca:	d903      	bls.n	80092d4 <_svfiprintf_r+0x1a8>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0c5      	beq.n	800925c <_svfiprintf_r+0x130>
 80092d0:	9105      	str	r1, [sp, #20]
 80092d2:	e7c3      	b.n	800925c <_svfiprintf_r+0x130>
 80092d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d8:	4604      	mov	r4, r0
 80092da:	2301      	movs	r3, #1
 80092dc:	e7f0      	b.n	80092c0 <_svfiprintf_r+0x194>
 80092de:	ab03      	add	r3, sp, #12
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	462a      	mov	r2, r5
 80092e4:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <_svfiprintf_r+0x1f8>)
 80092e6:	a904      	add	r1, sp, #16
 80092e8:	4638      	mov	r0, r7
 80092ea:	f3af 8000 	nop.w
 80092ee:	1c42      	adds	r2, r0, #1
 80092f0:	4606      	mov	r6, r0
 80092f2:	d1d6      	bne.n	80092a2 <_svfiprintf_r+0x176>
 80092f4:	89ab      	ldrh	r3, [r5, #12]
 80092f6:	065b      	lsls	r3, r3, #25
 80092f8:	f53f af2c 	bmi.w	8009154 <_svfiprintf_r+0x28>
 80092fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092fe:	b01d      	add	sp, #116	; 0x74
 8009300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009304:	ab03      	add	r3, sp, #12
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	462a      	mov	r2, r5
 800930a:	4b06      	ldr	r3, [pc, #24]	; (8009324 <_svfiprintf_r+0x1f8>)
 800930c:	a904      	add	r1, sp, #16
 800930e:	4638      	mov	r0, r7
 8009310:	f000 f87a 	bl	8009408 <_printf_i>
 8009314:	e7eb      	b.n	80092ee <_svfiprintf_r+0x1c2>
 8009316:	bf00      	nop
 8009318:	0800c910 	.word	0x0800c910
 800931c:	0800c91a 	.word	0x0800c91a
 8009320:	00000000 	.word	0x00000000
 8009324:	08009075 	.word	0x08009075
 8009328:	0800c916 	.word	0x0800c916

0800932c <_printf_common>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	4616      	mov	r6, r2
 8009332:	4699      	mov	r9, r3
 8009334:	688a      	ldr	r2, [r1, #8]
 8009336:	690b      	ldr	r3, [r1, #16]
 8009338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800933c:	4293      	cmp	r3, r2
 800933e:	bfb8      	it	lt
 8009340:	4613      	movlt	r3, r2
 8009342:	6033      	str	r3, [r6, #0]
 8009344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009348:	4607      	mov	r7, r0
 800934a:	460c      	mov	r4, r1
 800934c:	b10a      	cbz	r2, 8009352 <_printf_common+0x26>
 800934e:	3301      	adds	r3, #1
 8009350:	6033      	str	r3, [r6, #0]
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	0699      	lsls	r1, r3, #26
 8009356:	bf42      	ittt	mi
 8009358:	6833      	ldrmi	r3, [r6, #0]
 800935a:	3302      	addmi	r3, #2
 800935c:	6033      	strmi	r3, [r6, #0]
 800935e:	6825      	ldr	r5, [r4, #0]
 8009360:	f015 0506 	ands.w	r5, r5, #6
 8009364:	d106      	bne.n	8009374 <_printf_common+0x48>
 8009366:	f104 0a19 	add.w	sl, r4, #25
 800936a:	68e3      	ldr	r3, [r4, #12]
 800936c:	6832      	ldr	r2, [r6, #0]
 800936e:	1a9b      	subs	r3, r3, r2
 8009370:	42ab      	cmp	r3, r5
 8009372:	dc26      	bgt.n	80093c2 <_printf_common+0x96>
 8009374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009378:	1e13      	subs	r3, r2, #0
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	bf18      	it	ne
 800937e:	2301      	movne	r3, #1
 8009380:	0692      	lsls	r2, r2, #26
 8009382:	d42b      	bmi.n	80093dc <_printf_common+0xb0>
 8009384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009388:	4649      	mov	r1, r9
 800938a:	4638      	mov	r0, r7
 800938c:	47c0      	blx	r8
 800938e:	3001      	adds	r0, #1
 8009390:	d01e      	beq.n	80093d0 <_printf_common+0xa4>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	68e5      	ldr	r5, [r4, #12]
 8009396:	6832      	ldr	r2, [r6, #0]
 8009398:	f003 0306 	and.w	r3, r3, #6
 800939c:	2b04      	cmp	r3, #4
 800939e:	bf08      	it	eq
 80093a0:	1aad      	subeq	r5, r5, r2
 80093a2:	68a3      	ldr	r3, [r4, #8]
 80093a4:	6922      	ldr	r2, [r4, #16]
 80093a6:	bf0c      	ite	eq
 80093a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093ac:	2500      	movne	r5, #0
 80093ae:	4293      	cmp	r3, r2
 80093b0:	bfc4      	itt	gt
 80093b2:	1a9b      	subgt	r3, r3, r2
 80093b4:	18ed      	addgt	r5, r5, r3
 80093b6:	2600      	movs	r6, #0
 80093b8:	341a      	adds	r4, #26
 80093ba:	42b5      	cmp	r5, r6
 80093bc:	d11a      	bne.n	80093f4 <_printf_common+0xc8>
 80093be:	2000      	movs	r0, #0
 80093c0:	e008      	b.n	80093d4 <_printf_common+0xa8>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4652      	mov	r2, sl
 80093c6:	4649      	mov	r1, r9
 80093c8:	4638      	mov	r0, r7
 80093ca:	47c0      	blx	r8
 80093cc:	3001      	adds	r0, #1
 80093ce:	d103      	bne.n	80093d8 <_printf_common+0xac>
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d8:	3501      	adds	r5, #1
 80093da:	e7c6      	b.n	800936a <_printf_common+0x3e>
 80093dc:	18e1      	adds	r1, r4, r3
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	2030      	movs	r0, #48	; 0x30
 80093e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093e6:	4422      	add	r2, r4
 80093e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093f0:	3302      	adds	r3, #2
 80093f2:	e7c7      	b.n	8009384 <_printf_common+0x58>
 80093f4:	2301      	movs	r3, #1
 80093f6:	4622      	mov	r2, r4
 80093f8:	4649      	mov	r1, r9
 80093fa:	4638      	mov	r0, r7
 80093fc:	47c0      	blx	r8
 80093fe:	3001      	adds	r0, #1
 8009400:	d0e6      	beq.n	80093d0 <_printf_common+0xa4>
 8009402:	3601      	adds	r6, #1
 8009404:	e7d9      	b.n	80093ba <_printf_common+0x8e>
	...

08009408 <_printf_i>:
 8009408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800940c:	460c      	mov	r4, r1
 800940e:	4691      	mov	r9, r2
 8009410:	7e27      	ldrb	r7, [r4, #24]
 8009412:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009414:	2f78      	cmp	r7, #120	; 0x78
 8009416:	4680      	mov	r8, r0
 8009418:	469a      	mov	sl, r3
 800941a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800941e:	d807      	bhi.n	8009430 <_printf_i+0x28>
 8009420:	2f62      	cmp	r7, #98	; 0x62
 8009422:	d80a      	bhi.n	800943a <_printf_i+0x32>
 8009424:	2f00      	cmp	r7, #0
 8009426:	f000 80d8 	beq.w	80095da <_printf_i+0x1d2>
 800942a:	2f58      	cmp	r7, #88	; 0x58
 800942c:	f000 80a3 	beq.w	8009576 <_printf_i+0x16e>
 8009430:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009438:	e03a      	b.n	80094b0 <_printf_i+0xa8>
 800943a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800943e:	2b15      	cmp	r3, #21
 8009440:	d8f6      	bhi.n	8009430 <_printf_i+0x28>
 8009442:	a001      	add	r0, pc, #4	; (adr r0, 8009448 <_printf_i+0x40>)
 8009444:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009448:	080094a1 	.word	0x080094a1
 800944c:	080094b5 	.word	0x080094b5
 8009450:	08009431 	.word	0x08009431
 8009454:	08009431 	.word	0x08009431
 8009458:	08009431 	.word	0x08009431
 800945c:	08009431 	.word	0x08009431
 8009460:	080094b5 	.word	0x080094b5
 8009464:	08009431 	.word	0x08009431
 8009468:	08009431 	.word	0x08009431
 800946c:	08009431 	.word	0x08009431
 8009470:	08009431 	.word	0x08009431
 8009474:	080095c1 	.word	0x080095c1
 8009478:	080094e5 	.word	0x080094e5
 800947c:	080095a3 	.word	0x080095a3
 8009480:	08009431 	.word	0x08009431
 8009484:	08009431 	.word	0x08009431
 8009488:	080095e3 	.word	0x080095e3
 800948c:	08009431 	.word	0x08009431
 8009490:	080094e5 	.word	0x080094e5
 8009494:	08009431 	.word	0x08009431
 8009498:	08009431 	.word	0x08009431
 800949c:	080095ab 	.word	0x080095ab
 80094a0:	680b      	ldr	r3, [r1, #0]
 80094a2:	1d1a      	adds	r2, r3, #4
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	600a      	str	r2, [r1, #0]
 80094a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094b0:	2301      	movs	r3, #1
 80094b2:	e0a3      	b.n	80095fc <_printf_i+0x1f4>
 80094b4:	6825      	ldr	r5, [r4, #0]
 80094b6:	6808      	ldr	r0, [r1, #0]
 80094b8:	062e      	lsls	r6, r5, #24
 80094ba:	f100 0304 	add.w	r3, r0, #4
 80094be:	d50a      	bpl.n	80094d6 <_printf_i+0xce>
 80094c0:	6805      	ldr	r5, [r0, #0]
 80094c2:	600b      	str	r3, [r1, #0]
 80094c4:	2d00      	cmp	r5, #0
 80094c6:	da03      	bge.n	80094d0 <_printf_i+0xc8>
 80094c8:	232d      	movs	r3, #45	; 0x2d
 80094ca:	426d      	negs	r5, r5
 80094cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d0:	485e      	ldr	r0, [pc, #376]	; (800964c <_printf_i+0x244>)
 80094d2:	230a      	movs	r3, #10
 80094d4:	e019      	b.n	800950a <_printf_i+0x102>
 80094d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094da:	6805      	ldr	r5, [r0, #0]
 80094dc:	600b      	str	r3, [r1, #0]
 80094de:	bf18      	it	ne
 80094e0:	b22d      	sxthne	r5, r5
 80094e2:	e7ef      	b.n	80094c4 <_printf_i+0xbc>
 80094e4:	680b      	ldr	r3, [r1, #0]
 80094e6:	6825      	ldr	r5, [r4, #0]
 80094e8:	1d18      	adds	r0, r3, #4
 80094ea:	6008      	str	r0, [r1, #0]
 80094ec:	0628      	lsls	r0, r5, #24
 80094ee:	d501      	bpl.n	80094f4 <_printf_i+0xec>
 80094f0:	681d      	ldr	r5, [r3, #0]
 80094f2:	e002      	b.n	80094fa <_printf_i+0xf2>
 80094f4:	0669      	lsls	r1, r5, #25
 80094f6:	d5fb      	bpl.n	80094f0 <_printf_i+0xe8>
 80094f8:	881d      	ldrh	r5, [r3, #0]
 80094fa:	4854      	ldr	r0, [pc, #336]	; (800964c <_printf_i+0x244>)
 80094fc:	2f6f      	cmp	r7, #111	; 0x6f
 80094fe:	bf0c      	ite	eq
 8009500:	2308      	moveq	r3, #8
 8009502:	230a      	movne	r3, #10
 8009504:	2100      	movs	r1, #0
 8009506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800950a:	6866      	ldr	r6, [r4, #4]
 800950c:	60a6      	str	r6, [r4, #8]
 800950e:	2e00      	cmp	r6, #0
 8009510:	bfa2      	ittt	ge
 8009512:	6821      	ldrge	r1, [r4, #0]
 8009514:	f021 0104 	bicge.w	r1, r1, #4
 8009518:	6021      	strge	r1, [r4, #0]
 800951a:	b90d      	cbnz	r5, 8009520 <_printf_i+0x118>
 800951c:	2e00      	cmp	r6, #0
 800951e:	d04d      	beq.n	80095bc <_printf_i+0x1b4>
 8009520:	4616      	mov	r6, r2
 8009522:	fbb5 f1f3 	udiv	r1, r5, r3
 8009526:	fb03 5711 	mls	r7, r3, r1, r5
 800952a:	5dc7      	ldrb	r7, [r0, r7]
 800952c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009530:	462f      	mov	r7, r5
 8009532:	42bb      	cmp	r3, r7
 8009534:	460d      	mov	r5, r1
 8009536:	d9f4      	bls.n	8009522 <_printf_i+0x11a>
 8009538:	2b08      	cmp	r3, #8
 800953a:	d10b      	bne.n	8009554 <_printf_i+0x14c>
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	07df      	lsls	r7, r3, #31
 8009540:	d508      	bpl.n	8009554 <_printf_i+0x14c>
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	6861      	ldr	r1, [r4, #4]
 8009546:	4299      	cmp	r1, r3
 8009548:	bfde      	ittt	le
 800954a:	2330      	movle	r3, #48	; 0x30
 800954c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009550:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009554:	1b92      	subs	r2, r2, r6
 8009556:	6122      	str	r2, [r4, #16]
 8009558:	f8cd a000 	str.w	sl, [sp]
 800955c:	464b      	mov	r3, r9
 800955e:	aa03      	add	r2, sp, #12
 8009560:	4621      	mov	r1, r4
 8009562:	4640      	mov	r0, r8
 8009564:	f7ff fee2 	bl	800932c <_printf_common>
 8009568:	3001      	adds	r0, #1
 800956a:	d14c      	bne.n	8009606 <_printf_i+0x1fe>
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	b004      	add	sp, #16
 8009572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009576:	4835      	ldr	r0, [pc, #212]	; (800964c <_printf_i+0x244>)
 8009578:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	680e      	ldr	r6, [r1, #0]
 8009580:	061f      	lsls	r7, r3, #24
 8009582:	f856 5b04 	ldr.w	r5, [r6], #4
 8009586:	600e      	str	r6, [r1, #0]
 8009588:	d514      	bpl.n	80095b4 <_printf_i+0x1ac>
 800958a:	07d9      	lsls	r1, r3, #31
 800958c:	bf44      	itt	mi
 800958e:	f043 0320 	orrmi.w	r3, r3, #32
 8009592:	6023      	strmi	r3, [r4, #0]
 8009594:	b91d      	cbnz	r5, 800959e <_printf_i+0x196>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	f023 0320 	bic.w	r3, r3, #32
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	2310      	movs	r3, #16
 80095a0:	e7b0      	b.n	8009504 <_printf_i+0xfc>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	f043 0320 	orr.w	r3, r3, #32
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	2378      	movs	r3, #120	; 0x78
 80095ac:	4828      	ldr	r0, [pc, #160]	; (8009650 <_printf_i+0x248>)
 80095ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095b2:	e7e3      	b.n	800957c <_printf_i+0x174>
 80095b4:	065e      	lsls	r6, r3, #25
 80095b6:	bf48      	it	mi
 80095b8:	b2ad      	uxthmi	r5, r5
 80095ba:	e7e6      	b.n	800958a <_printf_i+0x182>
 80095bc:	4616      	mov	r6, r2
 80095be:	e7bb      	b.n	8009538 <_printf_i+0x130>
 80095c0:	680b      	ldr	r3, [r1, #0]
 80095c2:	6826      	ldr	r6, [r4, #0]
 80095c4:	6960      	ldr	r0, [r4, #20]
 80095c6:	1d1d      	adds	r5, r3, #4
 80095c8:	600d      	str	r5, [r1, #0]
 80095ca:	0635      	lsls	r5, r6, #24
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	d501      	bpl.n	80095d4 <_printf_i+0x1cc>
 80095d0:	6018      	str	r0, [r3, #0]
 80095d2:	e002      	b.n	80095da <_printf_i+0x1d2>
 80095d4:	0671      	lsls	r1, r6, #25
 80095d6:	d5fb      	bpl.n	80095d0 <_printf_i+0x1c8>
 80095d8:	8018      	strh	r0, [r3, #0]
 80095da:	2300      	movs	r3, #0
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	4616      	mov	r6, r2
 80095e0:	e7ba      	b.n	8009558 <_printf_i+0x150>
 80095e2:	680b      	ldr	r3, [r1, #0]
 80095e4:	1d1a      	adds	r2, r3, #4
 80095e6:	600a      	str	r2, [r1, #0]
 80095e8:	681e      	ldr	r6, [r3, #0]
 80095ea:	6862      	ldr	r2, [r4, #4]
 80095ec:	2100      	movs	r1, #0
 80095ee:	4630      	mov	r0, r6
 80095f0:	f7f6 fdee 	bl	80001d0 <memchr>
 80095f4:	b108      	cbz	r0, 80095fa <_printf_i+0x1f2>
 80095f6:	1b80      	subs	r0, r0, r6
 80095f8:	6060      	str	r0, [r4, #4]
 80095fa:	6863      	ldr	r3, [r4, #4]
 80095fc:	6123      	str	r3, [r4, #16]
 80095fe:	2300      	movs	r3, #0
 8009600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009604:	e7a8      	b.n	8009558 <_printf_i+0x150>
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	4632      	mov	r2, r6
 800960a:	4649      	mov	r1, r9
 800960c:	4640      	mov	r0, r8
 800960e:	47d0      	blx	sl
 8009610:	3001      	adds	r0, #1
 8009612:	d0ab      	beq.n	800956c <_printf_i+0x164>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	079b      	lsls	r3, r3, #30
 8009618:	d413      	bmi.n	8009642 <_printf_i+0x23a>
 800961a:	68e0      	ldr	r0, [r4, #12]
 800961c:	9b03      	ldr	r3, [sp, #12]
 800961e:	4298      	cmp	r0, r3
 8009620:	bfb8      	it	lt
 8009622:	4618      	movlt	r0, r3
 8009624:	e7a4      	b.n	8009570 <_printf_i+0x168>
 8009626:	2301      	movs	r3, #1
 8009628:	4632      	mov	r2, r6
 800962a:	4649      	mov	r1, r9
 800962c:	4640      	mov	r0, r8
 800962e:	47d0      	blx	sl
 8009630:	3001      	adds	r0, #1
 8009632:	d09b      	beq.n	800956c <_printf_i+0x164>
 8009634:	3501      	adds	r5, #1
 8009636:	68e3      	ldr	r3, [r4, #12]
 8009638:	9903      	ldr	r1, [sp, #12]
 800963a:	1a5b      	subs	r3, r3, r1
 800963c:	42ab      	cmp	r3, r5
 800963e:	dcf2      	bgt.n	8009626 <_printf_i+0x21e>
 8009640:	e7eb      	b.n	800961a <_printf_i+0x212>
 8009642:	2500      	movs	r5, #0
 8009644:	f104 0619 	add.w	r6, r4, #25
 8009648:	e7f5      	b.n	8009636 <_printf_i+0x22e>
 800964a:	bf00      	nop
 800964c:	0800c921 	.word	0x0800c921
 8009650:	0800c932 	.word	0x0800c932

08009654 <memcpy>:
 8009654:	440a      	add	r2, r1
 8009656:	4291      	cmp	r1, r2
 8009658:	f100 33ff 	add.w	r3, r0, #4294967295
 800965c:	d100      	bne.n	8009660 <memcpy+0xc>
 800965e:	4770      	bx	lr
 8009660:	b510      	push	{r4, lr}
 8009662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800966a:	4291      	cmp	r1, r2
 800966c:	d1f9      	bne.n	8009662 <memcpy+0xe>
 800966e:	bd10      	pop	{r4, pc}

08009670 <memmove>:
 8009670:	4288      	cmp	r0, r1
 8009672:	b510      	push	{r4, lr}
 8009674:	eb01 0402 	add.w	r4, r1, r2
 8009678:	d902      	bls.n	8009680 <memmove+0x10>
 800967a:	4284      	cmp	r4, r0
 800967c:	4623      	mov	r3, r4
 800967e:	d807      	bhi.n	8009690 <memmove+0x20>
 8009680:	1e43      	subs	r3, r0, #1
 8009682:	42a1      	cmp	r1, r4
 8009684:	d008      	beq.n	8009698 <memmove+0x28>
 8009686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800968a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800968e:	e7f8      	b.n	8009682 <memmove+0x12>
 8009690:	4402      	add	r2, r0
 8009692:	4601      	mov	r1, r0
 8009694:	428a      	cmp	r2, r1
 8009696:	d100      	bne.n	800969a <memmove+0x2a>
 8009698:	bd10      	pop	{r4, pc}
 800969a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800969e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096a2:	e7f7      	b.n	8009694 <memmove+0x24>

080096a4 <_free_r>:
 80096a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096a6:	2900      	cmp	r1, #0
 80096a8:	d048      	beq.n	800973c <_free_r+0x98>
 80096aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ae:	9001      	str	r0, [sp, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f1a1 0404 	sub.w	r4, r1, #4
 80096b6:	bfb8      	it	lt
 80096b8:	18e4      	addlt	r4, r4, r3
 80096ba:	f000 f8d3 	bl	8009864 <__malloc_lock>
 80096be:	4a20      	ldr	r2, [pc, #128]	; (8009740 <_free_r+0x9c>)
 80096c0:	9801      	ldr	r0, [sp, #4]
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	4615      	mov	r5, r2
 80096c6:	b933      	cbnz	r3, 80096d6 <_free_r+0x32>
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	6014      	str	r4, [r2, #0]
 80096cc:	b003      	add	sp, #12
 80096ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096d2:	f000 b8cd 	b.w	8009870 <__malloc_unlock>
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	d90b      	bls.n	80096f2 <_free_r+0x4e>
 80096da:	6821      	ldr	r1, [r4, #0]
 80096dc:	1862      	adds	r2, r4, r1
 80096de:	4293      	cmp	r3, r2
 80096e0:	bf04      	itt	eq
 80096e2:	681a      	ldreq	r2, [r3, #0]
 80096e4:	685b      	ldreq	r3, [r3, #4]
 80096e6:	6063      	str	r3, [r4, #4]
 80096e8:	bf04      	itt	eq
 80096ea:	1852      	addeq	r2, r2, r1
 80096ec:	6022      	streq	r2, [r4, #0]
 80096ee:	602c      	str	r4, [r5, #0]
 80096f0:	e7ec      	b.n	80096cc <_free_r+0x28>
 80096f2:	461a      	mov	r2, r3
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	b10b      	cbz	r3, 80096fc <_free_r+0x58>
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	d9fa      	bls.n	80096f2 <_free_r+0x4e>
 80096fc:	6811      	ldr	r1, [r2, #0]
 80096fe:	1855      	adds	r5, r2, r1
 8009700:	42a5      	cmp	r5, r4
 8009702:	d10b      	bne.n	800971c <_free_r+0x78>
 8009704:	6824      	ldr	r4, [r4, #0]
 8009706:	4421      	add	r1, r4
 8009708:	1854      	adds	r4, r2, r1
 800970a:	42a3      	cmp	r3, r4
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	d1dd      	bne.n	80096cc <_free_r+0x28>
 8009710:	681c      	ldr	r4, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	6053      	str	r3, [r2, #4]
 8009716:	4421      	add	r1, r4
 8009718:	6011      	str	r1, [r2, #0]
 800971a:	e7d7      	b.n	80096cc <_free_r+0x28>
 800971c:	d902      	bls.n	8009724 <_free_r+0x80>
 800971e:	230c      	movs	r3, #12
 8009720:	6003      	str	r3, [r0, #0]
 8009722:	e7d3      	b.n	80096cc <_free_r+0x28>
 8009724:	6825      	ldr	r5, [r4, #0]
 8009726:	1961      	adds	r1, r4, r5
 8009728:	428b      	cmp	r3, r1
 800972a:	bf04      	itt	eq
 800972c:	6819      	ldreq	r1, [r3, #0]
 800972e:	685b      	ldreq	r3, [r3, #4]
 8009730:	6063      	str	r3, [r4, #4]
 8009732:	bf04      	itt	eq
 8009734:	1949      	addeq	r1, r1, r5
 8009736:	6021      	streq	r1, [r4, #0]
 8009738:	6054      	str	r4, [r2, #4]
 800973a:	e7c7      	b.n	80096cc <_free_r+0x28>
 800973c:	b003      	add	sp, #12
 800973e:	bd30      	pop	{r4, r5, pc}
 8009740:	200000e0 	.word	0x200000e0

08009744 <_malloc_r>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	1ccd      	adds	r5, r1, #3
 8009748:	f025 0503 	bic.w	r5, r5, #3
 800974c:	3508      	adds	r5, #8
 800974e:	2d0c      	cmp	r5, #12
 8009750:	bf38      	it	cc
 8009752:	250c      	movcc	r5, #12
 8009754:	2d00      	cmp	r5, #0
 8009756:	4606      	mov	r6, r0
 8009758:	db01      	blt.n	800975e <_malloc_r+0x1a>
 800975a:	42a9      	cmp	r1, r5
 800975c:	d903      	bls.n	8009766 <_malloc_r+0x22>
 800975e:	230c      	movs	r3, #12
 8009760:	6033      	str	r3, [r6, #0]
 8009762:	2000      	movs	r0, #0
 8009764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009766:	f000 f87d 	bl	8009864 <__malloc_lock>
 800976a:	4921      	ldr	r1, [pc, #132]	; (80097f0 <_malloc_r+0xac>)
 800976c:	680a      	ldr	r2, [r1, #0]
 800976e:	4614      	mov	r4, r2
 8009770:	b99c      	cbnz	r4, 800979a <_malloc_r+0x56>
 8009772:	4f20      	ldr	r7, [pc, #128]	; (80097f4 <_malloc_r+0xb0>)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	b923      	cbnz	r3, 8009782 <_malloc_r+0x3e>
 8009778:	4621      	mov	r1, r4
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f862 	bl	8009844 <_sbrk_r>
 8009780:	6038      	str	r0, [r7, #0]
 8009782:	4629      	mov	r1, r5
 8009784:	4630      	mov	r0, r6
 8009786:	f000 f85d 	bl	8009844 <_sbrk_r>
 800978a:	1c43      	adds	r3, r0, #1
 800978c:	d123      	bne.n	80097d6 <_malloc_r+0x92>
 800978e:	230c      	movs	r3, #12
 8009790:	6033      	str	r3, [r6, #0]
 8009792:	4630      	mov	r0, r6
 8009794:	f000 f86c 	bl	8009870 <__malloc_unlock>
 8009798:	e7e3      	b.n	8009762 <_malloc_r+0x1e>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	1b5b      	subs	r3, r3, r5
 800979e:	d417      	bmi.n	80097d0 <_malloc_r+0x8c>
 80097a0:	2b0b      	cmp	r3, #11
 80097a2:	d903      	bls.n	80097ac <_malloc_r+0x68>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	441c      	add	r4, r3
 80097a8:	6025      	str	r5, [r4, #0]
 80097aa:	e004      	b.n	80097b6 <_malloc_r+0x72>
 80097ac:	6863      	ldr	r3, [r4, #4]
 80097ae:	42a2      	cmp	r2, r4
 80097b0:	bf0c      	ite	eq
 80097b2:	600b      	streq	r3, [r1, #0]
 80097b4:	6053      	strne	r3, [r2, #4]
 80097b6:	4630      	mov	r0, r6
 80097b8:	f000 f85a 	bl	8009870 <__malloc_unlock>
 80097bc:	f104 000b 	add.w	r0, r4, #11
 80097c0:	1d23      	adds	r3, r4, #4
 80097c2:	f020 0007 	bic.w	r0, r0, #7
 80097c6:	1ac2      	subs	r2, r0, r3
 80097c8:	d0cc      	beq.n	8009764 <_malloc_r+0x20>
 80097ca:	1a1b      	subs	r3, r3, r0
 80097cc:	50a3      	str	r3, [r4, r2]
 80097ce:	e7c9      	b.n	8009764 <_malloc_r+0x20>
 80097d0:	4622      	mov	r2, r4
 80097d2:	6864      	ldr	r4, [r4, #4]
 80097d4:	e7cc      	b.n	8009770 <_malloc_r+0x2c>
 80097d6:	1cc4      	adds	r4, r0, #3
 80097d8:	f024 0403 	bic.w	r4, r4, #3
 80097dc:	42a0      	cmp	r0, r4
 80097de:	d0e3      	beq.n	80097a8 <_malloc_r+0x64>
 80097e0:	1a21      	subs	r1, r4, r0
 80097e2:	4630      	mov	r0, r6
 80097e4:	f000 f82e 	bl	8009844 <_sbrk_r>
 80097e8:	3001      	adds	r0, #1
 80097ea:	d1dd      	bne.n	80097a8 <_malloc_r+0x64>
 80097ec:	e7cf      	b.n	800978e <_malloc_r+0x4a>
 80097ee:	bf00      	nop
 80097f0:	200000e0 	.word	0x200000e0
 80097f4:	200000e4 	.word	0x200000e4

080097f8 <_realloc_r>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	4607      	mov	r7, r0
 80097fc:	4614      	mov	r4, r2
 80097fe:	460e      	mov	r6, r1
 8009800:	b921      	cbnz	r1, 800980c <_realloc_r+0x14>
 8009802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009806:	4611      	mov	r1, r2
 8009808:	f7ff bf9c 	b.w	8009744 <_malloc_r>
 800980c:	b922      	cbnz	r2, 8009818 <_realloc_r+0x20>
 800980e:	f7ff ff49 	bl	80096a4 <_free_r>
 8009812:	4625      	mov	r5, r4
 8009814:	4628      	mov	r0, r5
 8009816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009818:	f000 f830 	bl	800987c <_malloc_usable_size_r>
 800981c:	42a0      	cmp	r0, r4
 800981e:	d20f      	bcs.n	8009840 <_realloc_r+0x48>
 8009820:	4621      	mov	r1, r4
 8009822:	4638      	mov	r0, r7
 8009824:	f7ff ff8e 	bl	8009744 <_malloc_r>
 8009828:	4605      	mov	r5, r0
 800982a:	2800      	cmp	r0, #0
 800982c:	d0f2      	beq.n	8009814 <_realloc_r+0x1c>
 800982e:	4631      	mov	r1, r6
 8009830:	4622      	mov	r2, r4
 8009832:	f7ff ff0f 	bl	8009654 <memcpy>
 8009836:	4631      	mov	r1, r6
 8009838:	4638      	mov	r0, r7
 800983a:	f7ff ff33 	bl	80096a4 <_free_r>
 800983e:	e7e9      	b.n	8009814 <_realloc_r+0x1c>
 8009840:	4635      	mov	r5, r6
 8009842:	e7e7      	b.n	8009814 <_realloc_r+0x1c>

08009844 <_sbrk_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4d06      	ldr	r5, [pc, #24]	; (8009860 <_sbrk_r+0x1c>)
 8009848:	2300      	movs	r3, #0
 800984a:	4604      	mov	r4, r0
 800984c:	4608      	mov	r0, r1
 800984e:	602b      	str	r3, [r5, #0]
 8009850:	f7f9 fa36 	bl	8002cc0 <_sbrk>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_sbrk_r+0x1a>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_sbrk_r+0x1a>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	20000440 	.word	0x20000440

08009864 <__malloc_lock>:
 8009864:	4801      	ldr	r0, [pc, #4]	; (800986c <__malloc_lock+0x8>)
 8009866:	f000 b811 	b.w	800988c <__retarget_lock_acquire_recursive>
 800986a:	bf00      	nop
 800986c:	20000448 	.word	0x20000448

08009870 <__malloc_unlock>:
 8009870:	4801      	ldr	r0, [pc, #4]	; (8009878 <__malloc_unlock+0x8>)
 8009872:	f000 b80c 	b.w	800988e <__retarget_lock_release_recursive>
 8009876:	bf00      	nop
 8009878:	20000448 	.word	0x20000448

0800987c <_malloc_usable_size_r>:
 800987c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009880:	1f18      	subs	r0, r3, #4
 8009882:	2b00      	cmp	r3, #0
 8009884:	bfbc      	itt	lt
 8009886:	580b      	ldrlt	r3, [r1, r0]
 8009888:	18c0      	addlt	r0, r0, r3
 800988a:	4770      	bx	lr

0800988c <__retarget_lock_acquire_recursive>:
 800988c:	4770      	bx	lr

0800988e <__retarget_lock_release_recursive>:
 800988e:	4770      	bx	lr

08009890 <_init>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	bf00      	nop
 8009894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009896:	bc08      	pop	{r3}
 8009898:	469e      	mov	lr, r3
 800989a:	4770      	bx	lr

0800989c <_fini>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr
